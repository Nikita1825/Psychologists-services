{"version":3,"file":"static/js/609.d6af97c0.chunk.js","mappings":"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","sources":["../node_modules/@firebase/util/src/constants.ts","../node_modules/@firebase/util/src/assert.ts","../node_modules/@firebase/util/src/crypt.ts","../node_modules/@firebase/util/src/deepCopy.ts","../node_modules/@firebase/util/src/defaults.ts","../node_modules/@firebase/util/src/global.ts","../node_modules/@firebase/util/src/deferred.ts","../node_modules/@firebase/util/src/emulator.ts","../node_modules/@firebase/util/src/environment.ts","../node_modules/@firebase/util/src/errors.ts","../node_modules/@firebase/util/src/json.ts","../node_modules/@firebase/util/src/jwt.ts","../node_modules/@firebase/util/src/obj.ts","../node_modules/@firebase/util/src/query.ts","../node_modules/@firebase/util/src/sha1.ts","../node_modules/@firebase/util/src/validation.ts","../node_modules/@firebase/util/src/utf8.ts","../node_modules/@firebase/util/src/compat.ts","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../node_modules/@firebase/app/node_modules/idb/build/wrap-idb-value.js","../node_modules/@firebase/app/node_modules/idb/build/index.js","../node_modules/@firebase/app/src/platformLoggerService.ts","../node_modules/@firebase/app/src/logger.ts","../node_modules/@firebase/app/src/constants.ts","../node_modules/@firebase/app/src/internal.ts","../node_modules/@firebase/app/src/errors.ts","../node_modules/@firebase/app/src/firebaseApp.ts","../node_modules/@firebase/app/src/api.ts","../node_modules/@firebase/app/src/indexeddb.ts","../node_modules/@firebase/app/src/heartbeatService.ts","../node_modules/@firebase/app/src/registerCoreComponents.ts","../node_modules/@firebase/app/src/index.ts","../node_modules/@firebase/component/src/component.ts","../node_modules/@firebase/component/src/constants.ts","../node_modules/@firebase/component/src/provider.ts","../node_modules/@firebase/component/src/component_container.ts","../node_modules/@firebase/logger/src/logger.ts","../node_modules/firebase/app/index.ts","../node_modules/@firebase/database/src/core/version.ts","../node_modules/@firebase/database/src/core/storage/DOMStorageWrapper.ts","../node_modules/@firebase/database/src/core/storage/MemoryStorage.ts","../node_modules/@firebase/database/src/core/storage/storage.ts","../node_modules/@firebase/database/src/core/util/util.ts","../node_modules/@firebase/database/src/core/AppCheckTokenProvider.ts","../node_modules/@firebase/database/src/core/AuthTokenProvider.ts","../node_modules/@firebase/database/src/realtime/Constants.ts","../node_modules/@firebase/database/src/core/RepoInfo.ts","../node_modules/@firebase/database/src/core/stats/StatsCollection.ts","../node_modules/@firebase/database/src/core/stats/StatsManager.ts","../node_modules/@firebase/database/src/realtime/polling/PacketReceiver.ts","../node_modules/@firebase/database/src/realtime/BrowserPollConnection.ts","../node_modules/@firebase/database/src/realtime/WebSocketConnection.ts","../node_modules/@firebase/database/src/realtime/TransportManager.ts","../node_modules/@firebase/database/src/realtime/Connection.ts","../node_modules/@firebase/database/src/core/ServerActions.ts","../node_modules/@firebase/database/src/core/util/EventEmitter.ts","../node_modules/@firebase/database/src/core/util/OnlineMonitor.ts","../node_modules/@firebase/database/src/core/util/Path.ts","../node_modules/@firebase/database/src/core/util/VisibilityMonitor.ts","../node_modules/@firebase/database/src/core/PersistentConnection.ts","../node_modules/@firebase/database/src/core/snap/Node.ts","../node_modules/@firebase/database/src/core/snap/indexes/KeyIndex.ts","../node_modules/@firebase/database/src/core/snap/indexes/Index.ts","../node_modules/@firebase/database/src/core/util/SortedMap.ts","../node_modules/@firebase/database/src/core/snap/snap.ts","../node_modules/@firebase/database/src/core/snap/comparators.ts","../node_modules/@firebase/database/src/core/snap/LeafNode.ts","../node_modules/@firebase/database/src/core/snap/indexes/PriorityIndex.ts","../node_modules/@firebase/database/src/core/snap/IndexMap.ts","../node_modules/@firebase/database/src/core/snap/ChildrenNode.ts","../node_modules/@firebase/database/src/core/snap/childSet.ts","../node_modules/@firebase/database/src/core/snap/nodeFromJSON.ts","../node_modules/@firebase/database/src/core/snap/indexes/PathIndex.ts","../node_modules/@firebase/database/src/core/snap/indexes/ValueIndex.ts","../node_modules/@firebase/database/src/core/view/Change.ts","../node_modules/@firebase/database/src/core/view/filter/IndexedFilter.ts","../node_modules/@firebase/database/src/core/view/filter/RangedFilter.ts","../node_modules/@firebase/database/src/core/view/filter/LimitedFilter.ts","../node_modules/@firebase/database/src/core/view/QueryParams.ts","../node_modules/@firebase/database/src/core/ReadonlyRestClient.ts","../node_modules/@firebase/database/src/core/SnapshotHolder.ts","../node_modules/@firebase/database/src/core/SparseSnapshotTree.ts","../node_modules/@firebase/database/src/core/stats/StatsListener.ts","../node_modules/@firebase/database/src/core/operation/Operation.ts","../node_modules/@firebase/database/src/core/stats/StatsReporter.ts","../node_modules/@firebase/database/src/core/operation/AckUserWrite.ts","../node_modules/@firebase/database/src/core/util/ImmutableTree.ts","../node_modules/@firebase/database/src/core/operation/ListenComplete.ts","../node_modules/@firebase/database/src/core/operation/Overwrite.ts","../node_modules/@firebase/database/src/core/operation/Merge.ts","../node_modules/@firebase/database/src/core/view/CacheNode.ts","../node_modules/@firebase/database/src/core/view/EventGenerator.ts","../node_modules/@firebase/database/src/core/view/ViewCache.ts","../node_modules/@firebase/database/src/core/CompoundWrite.ts","../node_modules/@firebase/database/src/core/WriteTree.ts","../node_modules/@firebase/database/src/core/view/ChildChangeAccumulator.ts","../node_modules/@firebase/database/src/core/view/CompleteChildSource.ts","../node_modules/@firebase/database/src/core/view/ViewProcessor.ts","../node_modules/@firebase/database/src/core/view/View.ts","../node_modules/@firebase/database/src/core/SyncPoint.ts","../node_modules/@firebase/database/src/core/SyncTree.ts","../node_modules/@firebase/database/src/core/util/ServerValues.ts","../node_modules/@firebase/database/src/core/util/Tree.ts","../node_modules/@firebase/database/src/core/util/validation.ts","../node_modules/@firebase/database/src/core/view/EventQueue.ts","../node_modules/@firebase/database/src/core/Repo.ts","../node_modules/@firebase/database/src/core/util/libs/parser.ts","../node_modules/@firebase/database/src/core/util/NextPushId.ts","../node_modules/@firebase/database/src/core/view/Event.ts","../node_modules/@firebase/database/src/core/view/EventRegistration.ts","../node_modules/@firebase/database/src/api/Reference_impl.ts","../node_modules/@firebase/database/src/api/Database.ts","../node_modules/@firebase/database/src/api/test_access.ts","../node_modules/@firebase/database/src/register.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\n */\n\nexport const CONSTANTS = {\n  /**\n   * @define {boolean} Whether this is the client Node.js SDK.\n   */\n  NODE_CLIENT: false,\n  /**\n   * @define {boolean} Whether this is the Admin Node.js SDK.\n   */\n  NODE_ADMIN: false,\n\n  /**\n   * Firebase SDK Version\n   */\n  SDK_VERSION: '${JSCORE_VERSION}'\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSTANTS } from './constants';\n\n/**\n * Throws an error if the provided assertion is falsy\n */\nexport const assert = function (assertion: unknown, message: string): void {\n  if (!assertion) {\n    throw assertionError(message);\n  }\n};\n\n/**\n * Returns an Error object suitable for throwing.\n */\nexport const assertionError = function (message: string): Error {\n  return new Error(\n    'Firebase Database (' +\n      CONSTANTS.SDK_VERSION +\n      ') INTERNAL ASSERT FAILED: ' +\n      message\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst stringToByteArray = function (str: string): number[] {\n  // TODO(user): Use native implementations if/when available\n  const out: number[] = [];\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charCodeAt(i);\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = (c >> 6) | 192;\n      out[p++] = (c & 63) | 128;\n    } else if (\n      (c & 0xfc00) === 0xd800 &&\n      i + 1 < str.length &&\n      (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00\n    ) {\n      // Surrogate Pair\n      c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\n      out[p++] = (c >> 18) | 240;\n      out[p++] = ((c >> 12) & 63) | 128;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    } else {\n      out[p++] = (c >> 12) | 224;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    }\n  }\n  return out;\n};\n\n/**\n * Turns an array of numbers into the string given by the concatenation of the\n * characters to which the numbers correspond.\n * @param bytes Array of numbers representing characters.\n * @return Stringification of the array.\n */\nconst byteArrayToString = function (bytes: number[]): string {\n  // TODO(user): Use native implementations if/when available\n  const out: string[] = [];\n  let pos = 0,\n    c = 0;\n  while (pos < bytes.length) {\n    const c1 = bytes[pos++];\n    if (c1 < 128) {\n      out[c++] = String.fromCharCode(c1);\n    } else if (c1 > 191 && c1 < 224) {\n      const c2 = bytes[pos++];\n      out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\n    } else if (c1 > 239 && c1 < 365) {\n      // Surrogate Pair\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      const c4 = bytes[pos++];\n      const u =\n        (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\n        0x10000;\n      out[c++] = String.fromCharCode(0xd800 + (u >> 10));\n      out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\n    } else {\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      out[c++] = String.fromCharCode(\n        ((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63)\n      );\n    }\n  }\n  return out.join('');\n};\n\ninterface Base64 {\n  byteToCharMap_: { [key: number]: string } | null;\n  charToByteMap_: { [key: string]: number } | null;\n  byteToCharMapWebSafe_: { [key: number]: string } | null;\n  charToByteMapWebSafe_: { [key: string]: number } | null;\n  ENCODED_VALS_BASE: string;\n  readonly ENCODED_VALS: string;\n  readonly ENCODED_VALS_WEBSAFE: string;\n  HAS_NATIVE_SUPPORT: boolean;\n  encodeByteArray(input: number[] | Uint8Array, webSafe?: boolean): string;\n  encodeString(input: string, webSafe?: boolean): string;\n  decodeString(input: string, webSafe: boolean): string;\n  decodeStringToByteArray(input: string, webSafe: boolean): number[];\n  init_(): void;\n}\n\n// We define it as an object literal instead of a class because a class compiled down to es5 can't\n// be treeshaked. https://github.com/rollup/rollup/issues/1691\n// Static lookup maps, lazily populated by init_()\nexport const base64: Base64 = {\n  /**\n   * Maps bytes to characters.\n   */\n  byteToCharMap_: null,\n\n  /**\n   * Maps characters to bytes.\n   */\n  charToByteMap_: null,\n\n  /**\n   * Maps bytes to websafe characters.\n   * @private\n   */\n  byteToCharMapWebSafe_: null,\n\n  /**\n   * Maps websafe characters to bytes.\n   * @private\n   */\n  charToByteMapWebSafe_: null,\n\n  /**\n   * Our default alphabet, shared between\n   * ENCODED_VALS and ENCODED_VALS_WEBSAFE\n   */\n  ENCODED_VALS_BASE:\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\n\n  /**\n   * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\n   */\n  get ENCODED_VALS() {\n    return this.ENCODED_VALS_BASE + '+/=';\n  },\n\n  /**\n   * Our websafe alphabet.\n   */\n  get ENCODED_VALS_WEBSAFE() {\n    return this.ENCODED_VALS_BASE + '-_.';\n  },\n\n  /**\n   * Whether this browser supports the atob and btoa functions. This extension\n   * started at Mozilla but is now implemented by many browsers. We use the\n   * ASSUME_* variables to avoid pulling in the full useragent detection library\n   * but still allowing the standard per-browser compilations.\n   *\n   */\n  HAS_NATIVE_SUPPORT: typeof atob === 'function',\n\n  /**\n   * Base64-encode an array of bytes.\n   *\n   * @param input An array of bytes (numbers with\n   *     value in [0, 255]) to encode.\n   * @param webSafe Boolean indicating we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeByteArray(input: number[] | Uint8Array, webSafe?: boolean): string {\n    if (!Array.isArray(input)) {\n      throw Error('encodeByteArray takes an array as a parameter');\n    }\n\n    this.init_();\n\n    const byteToCharMap = webSafe\n      ? this.byteToCharMapWebSafe_!\n      : this.byteToCharMap_!;\n\n    const output = [];\n\n    for (let i = 0; i < input.length; i += 3) {\n      const byte1 = input[i];\n      const haveByte2 = i + 1 < input.length;\n      const byte2 = haveByte2 ? input[i + 1] : 0;\n      const haveByte3 = i + 2 < input.length;\n      const byte3 = haveByte3 ? input[i + 2] : 0;\n\n      const outByte1 = byte1 >> 2;\n      const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\n      let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\n      let outByte4 = byte3 & 0x3f;\n\n      if (!haveByte3) {\n        outByte4 = 64;\n\n        if (!haveByte2) {\n          outByte3 = 64;\n        }\n      }\n\n      output.push(\n        byteToCharMap[outByte1],\n        byteToCharMap[outByte2],\n        byteToCharMap[outByte3],\n        byteToCharMap[outByte4]\n      );\n    }\n\n    return output.join('');\n  },\n\n  /**\n   * Base64-encode a string.\n   *\n   * @param input A string to encode.\n   * @param webSafe If true, we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeString(input: string, webSafe?: boolean): string {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return btoa(input);\n    }\n    return this.encodeByteArray(stringToByteArray(input), webSafe);\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * @param input to decode.\n   * @param webSafe True if we should use the\n   *     alternative alphabet.\n   * @return string representing the decoded value.\n   */\n  decodeString(input: string, webSafe: boolean): string {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return atob(input);\n    }\n    return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * In base-64 decoding, groups of four characters are converted into three\n   * bytes.  If the encoder did not apply padding, the input length may not\n   * be a multiple of 4.\n   *\n   * In this case, the last group will have fewer than 4 characters, and\n   * padding will be inferred.  If the group has one or two characters, it decodes\n   * to one byte.  If the group has three characters, it decodes to two bytes.\n   *\n   * @param input Input to decode.\n   * @param webSafe True if we should use the web-safe alphabet.\n   * @return bytes representing the decoded value.\n   */\n  decodeStringToByteArray(input: string, webSafe: boolean): number[] {\n    this.init_();\n\n    const charToByteMap = webSafe\n      ? this.charToByteMapWebSafe_!\n      : this.charToByteMap_!;\n\n    const output: number[] = [];\n\n    for (let i = 0; i < input.length; ) {\n      const byte1 = charToByteMap[input.charAt(i++)];\n\n      const haveByte2 = i < input.length;\n      const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\n      ++i;\n\n      const haveByte3 = i < input.length;\n      const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      const haveByte4 = i < input.length;\n      const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\n        throw new DecodeBase64StringError();\n      }\n\n      const outByte1 = (byte1 << 2) | (byte2 >> 4);\n      output.push(outByte1);\n\n      if (byte3 !== 64) {\n        const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\n        output.push(outByte2);\n\n        if (byte4 !== 64) {\n          const outByte3 = ((byte3 << 6) & 0xc0) | byte4;\n          output.push(outByte3);\n        }\n      }\n    }\n\n    return output;\n  },\n\n  /**\n   * Lazy static initialization function. Called before\n   * accessing any of the static map variables.\n   * @private\n   */\n  init_() {\n    if (!this.byteToCharMap_) {\n      this.byteToCharMap_ = {};\n      this.charToByteMap_ = {};\n      this.byteToCharMapWebSafe_ = {};\n      this.charToByteMapWebSafe_ = {};\n\n      // We want quick mappings back and forth, so we precompute two maps.\n      for (let i = 0; i < this.ENCODED_VALS.length; i++) {\n        this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\n        this.charToByteMap_[this.byteToCharMap_[i]] = i;\n        this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\n        this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\n\n        // Be forgiving when decoding and correctly decode both encodings.\n        if (i >= this.ENCODED_VALS_BASE.length) {\n          this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\n          this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\n        }\n      }\n    }\n  }\n};\n\n/**\n * An error encountered while decoding base64 string.\n */\nexport class DecodeBase64StringError extends Error {\n  readonly name = 'DecodeBase64StringError';\n}\n\n/**\n * URL-safe base64 encoding\n */\nexport const base64Encode = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  return base64.encodeByteArray(utf8Bytes, true);\n};\n\n/**\n * URL-safe base64 encoding (without \".\" padding in the end).\n * e.g. Used in JSON Web Token (JWT) parts.\n */\nexport const base64urlEncodeWithoutPadding = function (str: string): string {\n  // Use base64url encoding and remove padding in the end (dot characters).\n  return base64Encode(str).replace(/\\./g, '');\n};\n\n/**\n * URL-safe base64 decoding\n *\n * NOTE: DO NOT use the global atob() function - it does NOT support the\n * base64Url variant encoding.\n *\n * @param str To be decoded\n * @return Decoded result, if possible\n */\nexport const base64Decode = function (str: string): string | null {\n  try {\n    return base64.decodeString(str, true);\n  } catch (e) {\n    console.error('base64Decode failed: ', e);\n  }\n  return null;\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Do a deep-copy of basic JavaScript Objects or Arrays.\n */\nexport function deepCopy<T>(value: T): T {\n  return deepExtend(undefined, value) as T;\n}\n\n/**\n * Copy properties from source to target (recursively allows extension\n * of Objects and Arrays).  Scalar values in the target are over-written.\n * If target is undefined, an object of the appropriate type will be created\n * (and returned).\n *\n * We recursively copy all child properties of plain Objects in the source- so\n * that namespace- like dictionaries are merged.\n *\n * Note that the target can be a function, in which case the properties in\n * the source Object are copied onto it as static properties of the Function.\n *\n * Note: we don't merge __proto__ to prevent prototype pollution\n */\nexport function deepExtend(target: unknown, source: unknown): unknown {\n  if (!(source instanceof Object)) {\n    return source;\n  }\n\n  switch (source.constructor) {\n    case Date:\n      // Treat Dates like scalars; if the target date object had any child\n      // properties - they will be lost!\n      const dateValue = source as Date;\n      return new Date(dateValue.getTime());\n\n    case Object:\n      if (target === undefined) {\n        target = {};\n      }\n      break;\n    case Array:\n      // Always copy the array source and overwrite the target.\n      target = [];\n      break;\n\n    default:\n      // Not a plain Object - treat it as a scalar.\n      return source;\n  }\n\n  for (const prop in source) {\n    // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202\n    if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {\n      continue;\n    }\n    (target as Record<string, unknown>)[prop] = deepExtend(\n      (target as Record<string, unknown>)[prop],\n      (source as Record<string, unknown>)[prop]\n    );\n  }\n\n  return target;\n}\n\nfunction isValidKey(key: string): boolean {\n  return key !== '__proto__';\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Decode } from './crypt';\nimport { getGlobal } from './global';\n\n/**\n * Keys for experimental properties on the `FirebaseDefaults` object.\n * @public\n */\nexport type ExperimentalKey = 'authTokenSyncURL' | 'authIdTokenMaxAge';\n\n/**\n * An object that can be injected into the environment as __FIREBASE_DEFAULTS__,\n * either as a property of globalThis, a shell environment variable, or a\n * cookie.\n *\n * This object can be used to automatically configure and initialize\n * a Firebase app as well as any emulators.\n *\n * @public\n */\nexport interface FirebaseDefaults {\n  config?: Record<string, string>;\n  emulatorHosts?: Record<string, string>;\n  _authTokenSyncURL?: string;\n  _authIdTokenMaxAge?: number;\n  /**\n   * Override Firebase's runtime environment detection and\n   * force the SDK to act as if it were in the specified environment.\n   */\n  forceEnvironment?: 'browser' | 'node';\n  [key: string]: unknown;\n}\n\ndeclare global {\n  // Need `var` for this to work.\n  // eslint-disable-next-line no-var\n  var __FIREBASE_DEFAULTS__: FirebaseDefaults | undefined;\n}\n\nconst getDefaultsFromGlobal = (): FirebaseDefaults | undefined =>\n  getGlobal().__FIREBASE_DEFAULTS__;\n\n/**\n * Attempt to read defaults from a JSON string provided to\n * process(.)env(.)__FIREBASE_DEFAULTS__ or a JSON file whose path is in\n * process(.)env(.)__FIREBASE_DEFAULTS_PATH__\n * The dots are in parens because certain compilers (Vite?) cannot\n * handle seeing that variable in comments.\n * See https://github.com/firebase/firebase-js-sdk/issues/6838\n */\nconst getDefaultsFromEnvVariable = (): FirebaseDefaults | undefined => {\n  if (typeof process === 'undefined' || typeof process.env === 'undefined') {\n    return;\n  }\n  const defaultsJsonString = process.env.__FIREBASE_DEFAULTS__;\n  if (defaultsJsonString) {\n    return JSON.parse(defaultsJsonString);\n  }\n};\n\nconst getDefaultsFromCookie = (): FirebaseDefaults | undefined => {\n  if (typeof document === 'undefined') {\n    return;\n  }\n  let match;\n  try {\n    match = document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/);\n  } catch (e) {\n    // Some environments such as Angular Universal SSR have a\n    // `document` object but error on accessing `document.cookie`.\n    return;\n  }\n  const decoded = match && base64Decode(match[1]);\n  return decoded && JSON.parse(decoded);\n};\n\n/**\n * Get the __FIREBASE_DEFAULTS__ object. It checks in order:\n * (1) if such an object exists as a property of `globalThis`\n * (2) if such an object was provided on a shell environment variable\n * (3) if such an object exists in a cookie\n * @public\n */\nexport const getDefaults = (): FirebaseDefaults | undefined => {\n  try {\n    return (\n      getDefaultsFromGlobal() ||\n      getDefaultsFromEnvVariable() ||\n      getDefaultsFromCookie()\n    );\n  } catch (e) {\n    /**\n     * Catch-all for being unable to get __FIREBASE_DEFAULTS__ due\n     * to any environment case we have not accounted for. Log to\n     * info instead of swallowing so we can find these unknown cases\n     * and add paths for them if needed.\n     */\n    console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`);\n    return;\n  }\n};\n\n/**\n * Returns emulator host stored in the __FIREBASE_DEFAULTS__ object\n * for the given product.\n * @returns a URL host formatted like `127.0.0.1:9999` or `[::1]:4000` if available\n * @public\n */\nexport const getDefaultEmulatorHost = (\n  productName: string\n): string | undefined => getDefaults()?.emulatorHosts?.[productName];\n\n/**\n * Returns emulator hostname and port stored in the __FIREBASE_DEFAULTS__ object\n * for the given product.\n * @returns a pair of hostname and port like `[\"::1\", 4000]` if available\n * @public\n */\nexport const getDefaultEmulatorHostnameAndPort = (\n  productName: string\n): [hostname: string, port: number] | undefined => {\n  const host = getDefaultEmulatorHost(productName);\n  if (!host) {\n    return undefined;\n  }\n  const separatorIndex = host.lastIndexOf(':'); // Finding the last since IPv6 addr also has colons.\n  if (separatorIndex <= 0 || separatorIndex + 1 === host.length) {\n    throw new Error(`Invalid host ${host} with no separate hostname and port!`);\n  }\n  // eslint-disable-next-line no-restricted-globals\n  const port = parseInt(host.substring(separatorIndex + 1), 10);\n  if (host[0] === '[') {\n    // Bracket-quoted `[ipv6addr]:port` => return \"ipv6addr\" (without brackets).\n    return [host.substring(1, separatorIndex - 1), port];\n  } else {\n    return [host.substring(0, separatorIndex), port];\n  }\n};\n\n/**\n * Returns Firebase app config stored in the __FIREBASE_DEFAULTS__ object.\n * @public\n */\nexport const getDefaultAppConfig = (): Record<string, string> | undefined =>\n  getDefaults()?.config;\n\n/**\n * Returns an experimental setting on the __FIREBASE_DEFAULTS__ object (properties\n * prefixed by \"_\")\n * @public\n */\nexport const getExperimentalSetting = <T extends ExperimentalKey>(\n  name: T\n): FirebaseDefaults[`_${T}`] =>\n  getDefaults()?.[`_${name}`] as FirebaseDefaults[`_${T}`];\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Polyfill for `globalThis` object.\n * @returns the `globalThis` object for the given environment.\n * @public\n */\nexport function getGlobal(): typeof globalThis {\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n  throw new Error('Unable to locate global object.');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class Deferred<R> {\n  promise: Promise<R>;\n  reject: (value?: unknown) => void = () => {};\n  resolve: (value?: unknown) => void = () => {};\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve as (value?: unknown) => void;\n      this.reject = reject as (value?: unknown) => void;\n    });\n  }\n\n  /**\n   * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\n   * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\n   * and returns a node-style callback which will resolve or reject the Deferred's promise.\n   */\n  wrapCallback(\n    callback?: (error?: unknown, value?: unknown) => void\n  ): (error: unknown, value?: unknown) => void {\n    return (error, value?) => {\n      if (error) {\n        this.reject(error);\n      } else {\n        this.resolve(value);\n      }\n      if (typeof callback === 'function') {\n        // Attaching noop handler just in case developer wasn't expecting\n        // promises\n        this.promise.catch(() => {});\n\n        // Some of our callbacks don't expect a value and our own tests\n        // assert that the parameter length is 1\n        if (callback.length === 1) {\n          callback(error);\n        } else {\n          callback(error, value);\n        }\n      }\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64urlEncodeWithoutPadding } from './crypt';\n\n// Firebase Auth tokens contain snake_case claims following the JWT standard / convention.\n/* eslint-disable camelcase */\n\nexport type FirebaseSignInProvider =\n  | 'custom'\n  | 'email'\n  | 'password'\n  | 'phone'\n  | 'anonymous'\n  | 'google.com'\n  | 'facebook.com'\n  | 'github.com'\n  | 'twitter.com'\n  | 'microsoft.com'\n  | 'apple.com';\n\ninterface FirebaseIdToken {\n  // Always set to https://securetoken.google.com/PROJECT_ID\n  iss: string;\n\n  // Always set to PROJECT_ID\n  aud: string;\n\n  // The user's unique ID\n  sub: string;\n\n  // The token issue time, in seconds since epoch\n  iat: number;\n\n  // The token expiry time, normally 'iat' + 3600\n  exp: number;\n\n  // The user's unique ID. Must be equal to 'sub'\n  user_id: string;\n\n  // The time the user authenticated, normally 'iat'\n  auth_time: number;\n\n  // The sign in provider, only set when the provider is 'anonymous'\n  provider_id?: 'anonymous';\n\n  // The user's primary email\n  email?: string;\n\n  // The user's email verification status\n  email_verified?: boolean;\n\n  // The user's primary phone number\n  phone_number?: string;\n\n  // The user's display name\n  name?: string;\n\n  // The user's profile photo URL\n  picture?: string;\n\n  // Information on all identities linked to this user\n  firebase: {\n    // The primary sign-in provider\n    sign_in_provider: FirebaseSignInProvider;\n\n    // A map of providers to the user's list of unique identifiers from\n    // each provider\n    identities?: { [provider in FirebaseSignInProvider]?: string[] };\n  };\n\n  // Custom claims set by the developer\n  [claim: string]: unknown;\n\n  uid?: never; // Try to catch a common mistake of \"uid\" (should be \"sub\" instead).\n}\n\nexport type EmulatorMockTokenOptions = ({ user_id: string } | { sub: string }) &\n  Partial<FirebaseIdToken>;\n\nexport function createMockUserToken(\n  token: EmulatorMockTokenOptions,\n  projectId?: string\n): string {\n  if (token.uid) {\n    throw new Error(\n      'The \"uid\" field is no longer supported by mockUserToken. Please use \"sub\" instead for Firebase Auth User ID.'\n    );\n  }\n  // Unsecured JWTs use \"none\" as the algorithm.\n  const header = {\n    alg: 'none',\n    type: 'JWT'\n  };\n\n  const project = projectId || 'demo-project';\n  const iat = token.iat || 0;\n  const sub = token.sub || token.user_id;\n  if (!sub) {\n    throw new Error(\"mockUserToken must contain 'sub' or 'user_id' field!\");\n  }\n\n  const payload: FirebaseIdToken = {\n    // Set all required fields to decent defaults\n    iss: `https://securetoken.google.com/${project}`,\n    aud: project,\n    iat,\n    exp: iat + 3600,\n    auth_time: iat,\n    sub,\n    user_id: sub,\n    firebase: {\n      sign_in_provider: 'custom',\n      identities: {}\n    },\n\n    // Override with user options\n    ...token\n  };\n\n  // Unsecured JWTs use the empty string as a signature.\n  const signature = '';\n  return [\n    base64urlEncodeWithoutPadding(JSON.stringify(header)),\n    base64urlEncodeWithoutPadding(JSON.stringify(payload)),\n    signature\n  ].join('.');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSTANTS } from './constants';\nimport { getDefaults } from './defaults';\n\n/**\n * Returns navigator.userAgent string or '' if it's not defined.\n * @return user agent string\n */\nexport function getUA(): string {\n  if (\n    typeof navigator !== 'undefined' &&\n    typeof navigator['userAgent'] === 'string'\n  ) {\n    return navigator['userAgent'];\n  } else {\n    return '';\n  }\n}\n\n/**\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\n *\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\n * wait for a callback.\n */\nexport function isMobileCordova(): boolean {\n  return (\n    typeof window !== 'undefined' &&\n    // @ts-ignore Setting up an broadly applicable index signature for Window\n    // just to deal with this case would probably be a bad idea.\n    !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\n    /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA())\n  );\n}\n\n/**\n * Detect Node.js.\n *\n * @return true if Node.js environment is detected or specified.\n */\n// Node detection logic from: https://github.com/iliakan/detect-node/\nexport function isNode(): boolean {\n  const forceEnvironment = getDefaults()?.forceEnvironment;\n  if (forceEnvironment === 'node') {\n    return true;\n  } else if (forceEnvironment === 'browser') {\n    return false;\n  }\n\n  try {\n    return (\n      Object.prototype.toString.call(global.process) === '[object process]'\n    );\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Detect Browser Environment\n */\nexport function isBrowser(): boolean {\n  return typeof self === 'object' && self.self === self;\n}\n\n/**\n * Detect browser extensions (Chrome and Firefox at least).\n */\ninterface BrowserRuntime {\n  id?: unknown;\n}\ndeclare const chrome: { runtime?: BrowserRuntime };\ndeclare const browser: { runtime?: BrowserRuntime };\nexport function isBrowserExtension(): boolean {\n  const runtime =\n    typeof chrome === 'object'\n      ? chrome.runtime\n      : typeof browser === 'object'\n      ? browser.runtime\n      : undefined;\n  return typeof runtime === 'object' && runtime.id !== undefined;\n}\n\n/**\n * Detect React Native.\n *\n * @return true if ReactNative environment is detected.\n */\nexport function isReactNative(): boolean {\n  return (\n    typeof navigator === 'object' && navigator['product'] === 'ReactNative'\n  );\n}\n\n/** Detects Electron apps. */\nexport function isElectron(): boolean {\n  return getUA().indexOf('Electron/') >= 0;\n}\n\n/** Detects Internet Explorer. */\nexport function isIE(): boolean {\n  const ua = getUA();\n  return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;\n}\n\n/** Detects Universal Windows Platform apps. */\nexport function isUWP(): boolean {\n  return getUA().indexOf('MSAppHost/') >= 0;\n}\n\n/**\n * Detect whether the current SDK build is the Node version.\n *\n * @return true if it's the Node SDK build.\n */\nexport function isNodeSdk(): boolean {\n  return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\n}\n\n/** Returns true if we are running in Safari. */\nexport function isSafari(): boolean {\n  return (\n    !isNode() &&\n    navigator.userAgent.includes('Safari') &&\n    !navigator.userAgent.includes('Chrome')\n  );\n}\n\n/**\n * This method checks if indexedDB is supported by current browser/service worker context\n * @return true if indexedDB is supported by current browser/service worker context\n */\nexport function isIndexedDBAvailable(): boolean {\n  try {\n    return typeof indexedDB === 'object';\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject\n * if errors occur during the database open operation.\n *\n * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox\n * private browsing)\n */\nexport function validateIndexedDBOpenable(): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    try {\n      let preExist: boolean = true;\n      const DB_CHECK_NAME =\n        'validate-browser-context-for-indexeddb-analytics-module';\n      const request = self.indexedDB.open(DB_CHECK_NAME);\n      request.onsuccess = () => {\n        request.result.close();\n        // delete database only when it doesn't pre-exist\n        if (!preExist) {\n          self.indexedDB.deleteDatabase(DB_CHECK_NAME);\n        }\n        resolve(true);\n      };\n      request.onupgradeneeded = () => {\n        preExist = false;\n      };\n\n      request.onerror = () => {\n        reject(request.error?.message || '');\n      };\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\n/**\n *\n * This method checks whether cookie is enabled within current browser\n * @return true if cookie is enabled within current browser\n */\nexport function areCookiesEnabled(): boolean {\n  if (typeof navigator === 'undefined' || !navigator.cookieEnabled) {\n    return false;\n  }\n  return true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Standardized Firebase Error.\n *\n * Usage:\n *\n *   // Typescript string literals for type-safe codes\n *   type Err =\n *     'unknown' |\n *     'object-not-found'\n *     ;\n *\n *   // Closure enum for type-safe error codes\n *   // at-enum {string}\n *   var Err = {\n *     UNKNOWN: 'unknown',\n *     OBJECT_NOT_FOUND: 'object-not-found',\n *   }\n *\n *   let errors: Map<Err, string> = {\n *     'generic-error': \"Unknown error\",\n *     'file-not-found': \"Could not find file: {$file}\",\n *   };\n *\n *   // Type-safe function - must pass a valid error code as param.\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\n *\n *   ...\n *   throw error.create(Err.GENERIC);\n *   ...\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\n *   ...\n *   // Service: Could not file file: foo.txt (service/file-not-found).\n *\n *   catch (e) {\n *     assert(e.message === \"Could not find file: foo.txt.\");\n *     if ((e as FirebaseError)?.code === 'service/file-not-found') {\n *       console.log(\"Could not read file: \" + e['file']);\n *     }\n *   }\n */\n\nexport type ErrorMap<ErrorCode extends string> = {\n  readonly [K in ErrorCode]: string;\n};\n\nconst ERROR_NAME = 'FirebaseError';\n\nexport interface StringLike {\n  toString(): string;\n}\n\nexport interface ErrorData {\n  [key: string]: unknown;\n}\n\n// Based on code from:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\nexport class FirebaseError extends Error {\n  /** The custom name for all FirebaseErrors. */\n  readonly name: string = ERROR_NAME;\n\n  constructor(\n    /** The error code for this error. */\n    readonly code: string,\n    message: string,\n    /** Custom data for this error. */\n    public customData?: Record<string, unknown>\n  ) {\n    super(message);\n\n    // Fix For ES5\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, FirebaseError.prototype);\n\n    // Maintains proper stack trace for where our error was thrown.\n    // Only available on V8.\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ErrorFactory.prototype.create);\n    }\n  }\n}\n\nexport class ErrorFactory<\n  ErrorCode extends string,\n  ErrorParams extends { readonly [K in ErrorCode]?: ErrorData } = {}\n> {\n  constructor(\n    private readonly service: string,\n    private readonly serviceName: string,\n    private readonly errors: ErrorMap<ErrorCode>\n  ) {}\n\n  create<K extends ErrorCode>(\n    code: K,\n    ...data: K extends keyof ErrorParams ? [ErrorParams[K]] : []\n  ): FirebaseError {\n    const customData = (data[0] as ErrorData) || {};\n    const fullCode = `${this.service}/${code}`;\n    const template = this.errors[code];\n\n    const message = template ? replaceTemplate(template, customData) : 'Error';\n    // Service Name: Error message (service/code).\n    const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\n\n    const error = new FirebaseError(fullCode, fullMessage, customData);\n\n    return error;\n  }\n}\n\nfunction replaceTemplate(template: string, data: ErrorData): string {\n  return template.replace(PATTERN, (_, key) => {\n    const value = data[key];\n    return value != null ? String(value) : `<${key}?>`;\n  });\n}\n\nconst PATTERN = /\\{\\$([^}]+)}/g;\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Evaluates a JSON string into a javascript object.\n *\n * @param {string} str A string containing JSON.\n * @return {*} The javascript object representing the specified JSON.\n */\nexport function jsonEval(str: string): unknown {\n  return JSON.parse(str);\n}\n\n/**\n * Returns JSON representing a javascript object.\n * @param {*} data Javascript object to be stringified.\n * @return {string} The JSON contents of the object.\n */\nexport function stringify(data: unknown): string {\n  return JSON.stringify(data);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Decode } from './crypt';\nimport { jsonEval } from './json';\n\ninterface Claims {\n  [key: string]: {};\n}\n\ninterface DecodedToken {\n  header: object;\n  claims: Claims;\n  data: object;\n  signature: string;\n}\n\n/**\n * Decodes a Firebase auth. token into constituent parts.\n *\n * Notes:\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const decode = function (token: string): DecodedToken {\n  let header = {},\n    claims: Claims = {},\n    data = {},\n    signature = '';\n\n  try {\n    const parts = token.split('.');\n    header = jsonEval(base64Decode(parts[0]) || '') as object;\n    claims = jsonEval(base64Decode(parts[1]) || '') as Claims;\n    signature = parts[2];\n    data = claims['d'] || {};\n    delete claims['d'];\n  } catch (e) {}\n\n  return {\n    header,\n    claims,\n    data,\n    signature\n  };\n};\n\ninterface DecodedToken {\n  header: object;\n  claims: Claims;\n  data: object;\n  signature: string;\n}\n\n/**\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isValidTimestamp = function (token: string): boolean {\n  const claims: Claims = decode(token).claims;\n  const now: number = Math.floor(new Date().getTime() / 1000);\n  let validSince: number = 0,\n    validUntil: number = 0;\n\n  if (typeof claims === 'object') {\n    if (claims.hasOwnProperty('nbf')) {\n      validSince = claims['nbf'] as number;\n    } else if (claims.hasOwnProperty('iat')) {\n      validSince = claims['iat'] as number;\n    }\n\n    if (claims.hasOwnProperty('exp')) {\n      validUntil = claims['exp'] as number;\n    } else {\n      // token will expire after 24h by default\n      validUntil = validSince + 86400;\n    }\n  }\n\n  return (\n    !!now &&\n    !!validSince &&\n    !!validUntil &&\n    now >= validSince &&\n    now <= validUntil\n  );\n};\n\n/**\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\n *\n * Notes:\n * - May return null if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const issuedAtTime = function (token: string): number | null {\n  const claims: Claims = decode(token).claims;\n  if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\n    return claims['iat'] as number;\n  }\n  return null;\n};\n\n/**\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isValidFormat = function (token: string): boolean {\n  const decoded = decode(token),\n    claims = decoded.claims;\n\n  return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');\n};\n\n/**\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isAdmin = function (token: string): boolean {\n  const claims: Claims = decode(token).claims;\n  return typeof claims === 'object' && claims['admin'] === true;\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function contains<T extends object>(obj: T, key: string): boolean {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexport function safeGet<T extends object, K extends keyof T>(\n  obj: T,\n  key: K\n): T[K] | undefined {\n  if (Object.prototype.hasOwnProperty.call(obj, key)) {\n    return obj[key];\n  } else {\n    return undefined;\n  }\n}\n\nexport function isEmpty(obj: object): obj is {} {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function map<K extends string, V, U>(\n  obj: { [key in K]: V },\n  fn: (value: V, key: K, obj: { [key in K]: V }) => U,\n  contextObj?: unknown\n): { [key in K]: U } {\n  const res: Partial<{ [key in K]: U }> = {};\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      res[key] = fn.call(contextObj, obj[key], key, obj);\n    }\n  }\n  return res as { [key in K]: U };\n}\n\n/**\n * Deep equal two objects. Support Arrays and Objects.\n */\nexport function deepEqual(a: object, b: object): boolean {\n  if (a === b) {\n    return true;\n  }\n\n  const aKeys = Object.keys(a);\n  const bKeys = Object.keys(b);\n  for (const k of aKeys) {\n    if (!bKeys.includes(k)) {\n      return false;\n    }\n\n    const aProp = (a as Record<string, unknown>)[k];\n    const bProp = (b as Record<string, unknown>)[k];\n    if (isObject(aProp) && isObject(bProp)) {\n      if (!deepEqual(aProp, bProp)) {\n        return false;\n      }\n    } else if (aProp !== bProp) {\n      return false;\n    }\n  }\n\n  for (const k of bKeys) {\n    if (!aKeys.includes(k)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction isObject(thing: unknown): thing is object {\n  return thing !== null && typeof thing === 'object';\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a\n * params object (e.g. {arg: 'val', arg2: 'val2'})\n * Note: You must prepend it with ? when adding it to a URL.\n */\nexport function querystring(querystringParams: {\n  [key: string]: string | number;\n}): string {\n  const params = [];\n  for (const [key, value] of Object.entries(querystringParams)) {\n    if (Array.isArray(value)) {\n      value.forEach(arrayVal => {\n        params.push(\n          encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal)\n        );\n      });\n    } else {\n      params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n    }\n  }\n  return params.length ? '&' + params.join('&') : '';\n}\n\n/**\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object\n * (e.g. {arg: 'val', arg2: 'val2'})\n */\nexport function querystringDecode(querystring: string): Record<string, string> {\n  const obj: Record<string, string> = {};\n  const tokens = querystring.replace(/^\\?/, '').split('&');\n\n  tokens.forEach(token => {\n    if (token) {\n      const [key, value] = token.split('=');\n      obj[decodeURIComponent(key)] = decodeURIComponent(value);\n    }\n  });\n  return obj;\n}\n\n/**\n * Extract the query string part of a URL, including the leading question mark (if present).\n */\nexport function extractQuerystring(url: string): string {\n  const queryStart = url.indexOf('?');\n  if (!queryStart) {\n    return '';\n  }\n  const fragmentStart = url.indexOf('#', queryStart);\n  return url.substring(\n    queryStart,\n    fragmentStart > 0 ? fragmentStart : undefined\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview SHA-1 cryptographic hash.\n * Variable names follow the notation in FIPS PUB 180-3:\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\n *\n * Usage:\n *   var sha1 = new sha1();\n *   sha1.update(bytes);\n *   var hash = sha1.digest();\n *\n * Performance:\n *   Chrome 23:   ~400 Mbit/s\n *   Firefox 16:  ~250 Mbit/s\n *\n */\n\n/**\n * SHA-1 cryptographic hash constructor.\n *\n * The properties declared here are discussed in the above algorithm document.\n * @constructor\n * @final\n * @struct\n */\nexport class Sha1 {\n  /**\n   * Holds the previous values of accumulated variables a-e in the compress_\n   * function.\n   * @private\n   */\n  private chain_: number[] = [];\n\n  /**\n   * A buffer holding the partially computed hash result.\n   * @private\n   */\n  private buf_: number[] = [];\n\n  /**\n   * An array of 80 bytes, each a part of the message to be hashed.  Referred to\n   * as the message schedule in the docs.\n   * @private\n   */\n  private W_: number[] = [];\n\n  /**\n   * Contains data needed to pad messages less than 64 bytes.\n   * @private\n   */\n  private pad_: number[] = [];\n\n  /**\n   * @private {number}\n   */\n  private inbuf_: number = 0;\n\n  /**\n   * @private {number}\n   */\n  private total_: number = 0;\n\n  blockSize: number;\n\n  constructor() {\n    this.blockSize = 512 / 8;\n\n    this.pad_[0] = 128;\n    for (let i = 1; i < this.blockSize; ++i) {\n      this.pad_[i] = 0;\n    }\n\n    this.reset();\n  }\n\n  reset(): void {\n    this.chain_[0] = 0x67452301;\n    this.chain_[1] = 0xefcdab89;\n    this.chain_[2] = 0x98badcfe;\n    this.chain_[3] = 0x10325476;\n    this.chain_[4] = 0xc3d2e1f0;\n\n    this.inbuf_ = 0;\n    this.total_ = 0;\n  }\n\n  /**\n   * Internal compress helper function.\n   * @param buf Block to compress.\n   * @param offset Offset of the block in the buffer.\n   * @private\n   */\n  compress_(buf: number[] | Uint8Array | string, offset?: number): void {\n    if (!offset) {\n      offset = 0;\n    }\n\n    const W = this.W_;\n\n    // get 16 big endian words\n    if (typeof buf === 'string') {\n      for (let i = 0; i < 16; i++) {\n        // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\n        // have a bug that turns the post-increment ++ operator into pre-increment\n        // during JIT compilation.  We have code that depends heavily on SHA-1 for\n        // correctness and which is affected by this bug, so I've removed all uses\n        // of post-increment ++ in which the result value is used.  We can revert\n        // this change once the Safari bug\n        // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\n        // most clients have been updated.\n        W[i] =\n          (buf.charCodeAt(offset) << 24) |\n          (buf.charCodeAt(offset + 1) << 16) |\n          (buf.charCodeAt(offset + 2) << 8) |\n          buf.charCodeAt(offset + 3);\n        offset += 4;\n      }\n    } else {\n      for (let i = 0; i < 16; i++) {\n        W[i] =\n          (buf[offset] << 24) |\n          (buf[offset + 1] << 16) |\n          (buf[offset + 2] << 8) |\n          buf[offset + 3];\n        offset += 4;\n      }\n    }\n\n    // expand to 80 words\n    for (let i = 16; i < 80; i++) {\n      const t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n      W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\n    }\n\n    let a = this.chain_[0];\n    let b = this.chain_[1];\n    let c = this.chain_[2];\n    let d = this.chain_[3];\n    let e = this.chain_[4];\n    let f, k;\n\n    // TODO(user): Try to unroll this loop to speed up the computation.\n    for (let i = 0; i < 80; i++) {\n      if (i < 40) {\n        if (i < 20) {\n          f = d ^ (b & (c ^ d));\n          k = 0x5a827999;\n        } else {\n          f = b ^ c ^ d;\n          k = 0x6ed9eba1;\n        }\n      } else {\n        if (i < 60) {\n          f = (b & c) | (d & (b | c));\n          k = 0x8f1bbcdc;\n        } else {\n          f = b ^ c ^ d;\n          k = 0xca62c1d6;\n        }\n      }\n\n      const t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\n      e = d;\n      d = c;\n      c = ((b << 30) | (b >>> 2)) & 0xffffffff;\n      b = a;\n      a = t;\n    }\n\n    this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\n    this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\n    this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\n    this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\n    this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\n  }\n\n  update(bytes?: number[] | Uint8Array | string, length?: number): void {\n    // TODO(johnlenz): tighten the function signature and remove this check\n    if (bytes == null) {\n      return;\n    }\n\n    if (length === undefined) {\n      length = bytes.length;\n    }\n\n    const lengthMinusBlock = length - this.blockSize;\n    let n = 0;\n    // Using local instead of member variables gives ~5% speedup on Firefox 16.\n    const buf = this.buf_;\n    let inbuf = this.inbuf_;\n\n    // The outer while loop should execute at most twice.\n    while (n < length) {\n      // When we have no data in the block to top up, we can directly process the\n      // input buffer (assuming it contains sufficient data). This gives ~25%\n      // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\n      // the data is provided in large chunks (or in multiples of 64 bytes).\n      if (inbuf === 0) {\n        while (n <= lengthMinusBlock) {\n          this.compress_(bytes, n);\n          n += this.blockSize;\n        }\n      }\n\n      if (typeof bytes === 'string') {\n        while (n < length) {\n          buf[inbuf] = bytes.charCodeAt(n);\n          ++inbuf;\n          ++n;\n          if (inbuf === this.blockSize) {\n            this.compress_(buf);\n            inbuf = 0;\n            // Jump to the outer loop so we use the full-block optimization.\n            break;\n          }\n        }\n      } else {\n        while (n < length) {\n          buf[inbuf] = bytes[n];\n          ++inbuf;\n          ++n;\n          if (inbuf === this.blockSize) {\n            this.compress_(buf);\n            inbuf = 0;\n            // Jump to the outer loop so we use the full-block optimization.\n            break;\n          }\n        }\n      }\n    }\n\n    this.inbuf_ = inbuf;\n    this.total_ += length;\n  }\n\n  /** @override */\n  digest(): number[] {\n    const digest: number[] = [];\n    let totalBits = this.total_ * 8;\n\n    // Add pad 0x80 0x00*.\n    if (this.inbuf_ < 56) {\n      this.update(this.pad_, 56 - this.inbuf_);\n    } else {\n      this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\n    }\n\n    // Add # bits.\n    for (let i = this.blockSize - 1; i >= 56; i--) {\n      this.buf_[i] = totalBits & 255;\n      totalBits /= 256; // Don't use bit-shifting here!\n    }\n\n    this.compress_(this.buf_);\n\n    let n = 0;\n    for (let i = 0; i < 5; i++) {\n      for (let j = 24; j >= 0; j -= 8) {\n        digest[n] = (this.chain_[i] >> j) & 255;\n        ++n;\n      }\n    }\n    return digest;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Check to make sure the appropriate number of arguments are provided for a public function.\n * Throws an error if it fails.\n *\n * @param fnName The function name\n * @param minCount The minimum number of arguments to allow for the function call\n * @param maxCount The maximum number of argument to allow for the function call\n * @param argCount The actual number of arguments provided.\n */\nexport const validateArgCount = function (\n  fnName: string,\n  minCount: number,\n  maxCount: number,\n  argCount: number\n): void {\n  let argError;\n  if (argCount < minCount) {\n    argError = 'at least ' + minCount;\n  } else if (argCount > maxCount) {\n    argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\n  }\n  if (argError) {\n    const error =\n      fnName +\n      ' failed: Was called with ' +\n      argCount +\n      (argCount === 1 ? ' argument.' : ' arguments.') +\n      ' Expects ' +\n      argError +\n      '.';\n    throw new Error(error);\n  }\n};\n\n/**\n * Generates a string to prefix an error message about failed argument validation\n *\n * @param fnName The function name\n * @param argName The name of the argument\n * @return The prefix to add to the error thrown for validation.\n */\nexport function errorPrefix(fnName: string, argName: string): string {\n  return `${fnName} failed: ${argName} argument `;\n}\n\n/**\n * @param fnName\n * @param argumentNumber\n * @param namespace\n * @param optional\n */\nexport function validateNamespace(\n  fnName: string,\n  namespace: string,\n  optional: boolean\n): void {\n  if (optional && !namespace) {\n    return;\n  }\n  if (typeof namespace !== 'string') {\n    //TODO: I should do more validation here. We only allow certain chars in namespaces.\n    throw new Error(\n      errorPrefix(fnName, 'namespace') + 'must be a valid firebase namespace.'\n    );\n  }\n}\n\nexport function validateCallback(\n  fnName: string,\n  argumentName: string,\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback: Function,\n  optional: boolean\n): void {\n  if (optional && !callback) {\n    return;\n  }\n  if (typeof callback !== 'function') {\n    throw new Error(\n      errorPrefix(fnName, argumentName) + 'must be a valid function.'\n    );\n  }\n}\n\nexport function validateContextObject(\n  fnName: string,\n  argumentName: string,\n  context: unknown,\n  optional: boolean\n): void {\n  if (optional && !context) {\n    return;\n  }\n  if (typeof context !== 'object' || context === null) {\n    throw new Error(\n      errorPrefix(fnName, argumentName) + 'must be a valid context object.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from './assert';\n\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\n// so it's been modified.\n\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\n// pair).\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\n\n/**\n * @param {string} str\n * @return {Array}\n */\nexport const stringToByteArray = function (str: string): number[] {\n  const out: number[] = [];\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charCodeAt(i);\n\n    // Is this the lead surrogate in a surrogate pair?\n    if (c >= 0xd800 && c <= 0xdbff) {\n      const high = c - 0xd800; // the high 10 bits.\n      i++;\n      assert(i < str.length, 'Surrogate pair missing trail surrogate.');\n      const low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\n      c = 0x10000 + (high << 10) + low;\n    }\n\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = (c >> 6) | 192;\n      out[p++] = (c & 63) | 128;\n    } else if (c < 65536) {\n      out[p++] = (c >> 12) | 224;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    } else {\n      out[p++] = (c >> 18) | 240;\n      out[p++] = ((c >> 12) & 63) | 128;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    }\n  }\n  return out;\n};\n\n/**\n * Calculate length without actually converting; useful for doing cheaper validation.\n * @param {string} str\n * @return {number}\n */\nexport const stringLength = function (str: string): number {\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    const c = str.charCodeAt(i);\n    if (c < 128) {\n      p++;\n    } else if (c < 2048) {\n      p += 2;\n    } else if (c >= 0xd800 && c <= 0xdbff) {\n      // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\n      p += 4;\n      i++; // skip trail surrogate.\n    } else {\n      p += 3;\n    }\n  }\n  return p;\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface Compat<T> {\n  _delegate: T;\n}\n\nexport function getModularInstance<ExpService>(\n  service: Compat<ExpService> | ExpService\n): ExpService {\n  if (service && (service as Compat<ExpService>)._delegate) {\n    return (service as Compat<ExpService>)._delegate;\n  } else {\n    return service as ExpService;\n  }\n}\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);\n        });\n    }\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event.newVersion, event));\n    }\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking) {\n            db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));\n        }\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event));\n    }\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ComponentContainer,\n  ComponentType,\n  Provider,\n  Name\n} from '@firebase/component';\nimport { PlatformLoggerService, VersionService } from './types';\n\nexport class PlatformLoggerServiceImpl implements PlatformLoggerService {\n  constructor(private readonly container: ComponentContainer) {}\n  // In initial implementation, this will be called by installations on\n  // auth token refresh, and installations will send this string.\n  getPlatformInfoString(): string {\n    const providers = this.container.getProviders();\n    // Loop through providers and get library/version pairs from any that are\n    // version components.\n    return providers\n      .map(provider => {\n        if (isVersionServiceProvider(provider)) {\n          const service = provider.getImmediate() as VersionService;\n          return `${service.library}/${service.version}`;\n        } else {\n          return null;\n        }\n      })\n      .filter(logString => logString)\n      .join(' ');\n  }\n}\n/**\n *\n * @param provider check if this provider provides a VersionService\n *\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\n * provides VersionService. The provider is not necessarily a 'app-version'\n * provider.\n */\nfunction isVersionServiceProvider(provider: Provider<Name>): boolean {\n  const component = provider.getComponent();\n  return component?.type === ComponentType.VERSION;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/app');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { name as appName } from '../package.json';\nimport { name as appCompatName } from '../../app-compat/package.json';\nimport { name as analyticsCompatName } from '../../../packages/analytics-compat/package.json';\nimport { name as analyticsName } from '../../../packages/analytics/package.json';\nimport { name as appCheckCompatName } from '../../../packages/app-check-compat/package.json';\nimport { name as appCheckName } from '../../../packages/app-check/package.json';\nimport { name as authName } from '../../../packages/auth/package.json';\nimport { name as authCompatName } from '../../../packages/auth-compat/package.json';\nimport { name as databaseName } from '../../../packages/database/package.json';\nimport { name as databaseCompatName } from '../../../packages/database-compat/package.json';\nimport { name as functionsName } from '../../../packages/functions/package.json';\nimport { name as functionsCompatName } from '../../../packages/functions-compat/package.json';\nimport { name as installationsName } from '../../../packages/installations/package.json';\nimport { name as installationsCompatName } from '../../../packages/installations-compat/package.json';\nimport { name as messagingName } from '../../../packages/messaging/package.json';\nimport { name as messagingCompatName } from '../../../packages/messaging-compat/package.json';\nimport { name as performanceName } from '../../../packages/performance/package.json';\nimport { name as performanceCompatName } from '../../../packages/performance-compat/package.json';\nimport { name as remoteConfigName } from '../../../packages/remote-config/package.json';\nimport { name as remoteConfigCompatName } from '../../../packages/remote-config-compat/package.json';\nimport { name as storageName } from '../../../packages/storage/package.json';\nimport { name as storageCompatName } from '../../../packages/storage-compat/package.json';\nimport { name as firestoreName } from '../../../packages/firestore/package.json';\nimport { name as firestoreCompatName } from '../../../packages/firestore-compat/package.json';\nimport { name as packageName } from '../../../packages/firebase/package.json';\n\n/**\n * The default app name\n *\n * @internal\n */\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\nexport const PLATFORM_LOG_STRING = {\n  [appName]: 'fire-core',\n  [appCompatName]: 'fire-core-compat',\n  [analyticsName]: 'fire-analytics',\n  [analyticsCompatName]: 'fire-analytics-compat',\n  [appCheckName]: 'fire-app-check',\n  [appCheckCompatName]: 'fire-app-check-compat',\n  [authName]: 'fire-auth',\n  [authCompatName]: 'fire-auth-compat',\n  [databaseName]: 'fire-rtdb',\n  [databaseCompatName]: 'fire-rtdb-compat',\n  [functionsName]: 'fire-fn',\n  [functionsCompatName]: 'fire-fn-compat',\n  [installationsName]: 'fire-iid',\n  [installationsCompatName]: 'fire-iid-compat',\n  [messagingName]: 'fire-fcm',\n  [messagingCompatName]: 'fire-fcm-compat',\n  [performanceName]: 'fire-perf',\n  [performanceCompatName]: 'fire-perf-compat',\n  [remoteConfigName]: 'fire-rc',\n  [remoteConfigCompatName]: 'fire-rc-compat',\n  [storageName]: 'fire-gcs',\n  [storageCompatName]: 'fire-gcs-compat',\n  [firestoreName]: 'fire-fst',\n  [firestoreCompatName]: 'fire-fst-compat',\n  'fire-js': 'fire-js', // Platform identifier for JS SDK.\n  [packageName]: 'fire-js-all'\n} as const;\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from './public-types';\nimport { Component, Provider, Name } from '@firebase/component';\nimport { logger } from './logger';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport { FirebaseAppImpl } from './firebaseApp';\n\n/**\n * @internal\n */\nexport const _apps = new Map<string, FirebaseApp>();\n\n/**\n * Registered components.\n *\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const _components = new Map<string, Component<any>>();\n\n/**\n * @param component - the component being added to this app's container\n *\n * @internal\n */\nexport function _addComponent<T extends Name>(\n  app: FirebaseApp,\n  component: Component<T>\n): void {\n  try {\n    (app as FirebaseAppImpl).container.addComponent(component);\n  } catch (e) {\n    logger.debug(\n      `Component ${component.name} failed to register with FirebaseApp ${app.name}`,\n      e\n    );\n  }\n}\n\n/**\n *\n * @internal\n */\nexport function _addOrOverwriteComponent(\n  app: FirebaseApp,\n  component: Component\n): void {\n  (app as FirebaseAppImpl).container.addOrOverwriteComponent(component);\n}\n\n/**\n *\n * @param component - the component to register\n * @returns whether or not the component is registered successfully\n *\n * @internal\n */\nexport function _registerComponent<T extends Name>(\n  component: Component<T>\n): boolean {\n  const componentName = component.name;\n  if (_components.has(componentName)) {\n    logger.debug(\n      `There were multiple attempts to register component ${componentName}.`\n    );\n\n    return false;\n  }\n\n  _components.set(componentName, component);\n\n  // add the component to existing app instances\n  for (const app of _apps.values()) {\n    _addComponent(app as FirebaseAppImpl, component);\n  }\n\n  return true;\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n *\n * @returns the provider for the service with the matching name\n *\n * @internal\n */\nexport function _getProvider<T extends Name>(\n  app: FirebaseApp,\n  name: T\n): Provider<T> {\n  const heartbeatController = (app as FirebaseAppImpl).container\n    .getProvider('heartbeat')\n    .getImmediate({ optional: true });\n  if (heartbeatController) {\n    void heartbeatController.triggerHeartbeat();\n  }\n  return (app as FirebaseAppImpl).container.getProvider(name);\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\n *\n * @internal\n */\nexport function _removeServiceInstance<T extends Name>(\n  app: FirebaseApp,\n  name: T,\n  instanceIdentifier: string = DEFAULT_ENTRY_NAME\n): void {\n  _getProvider(app, name).clearInstance(instanceIdentifier);\n}\n\n/**\n * Test only\n *\n * @internal\n */\nexport function _clearComponents(): void {\n  _components.clear();\n}\n\n/**\n * Exported in order to be used in app-compat package\n */\nexport { DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME };\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AppError {\n  NO_APP = 'no-app',\n  BAD_APP_NAME = 'bad-app-name',\n  DUPLICATE_APP = 'duplicate-app',\n  APP_DELETED = 'app-deleted',\n  NO_OPTIONS = 'no-options',\n  INVALID_APP_ARGUMENT = 'invalid-app-argument',\n  INVALID_LOG_ARGUMENT = 'invalid-log-argument',\n  IDB_OPEN = 'idb-open',\n  IDB_GET = 'idb-get',\n  IDB_WRITE = 'idb-set',\n  IDB_DELETE = 'idb-delete'\n}\n\nconst ERRORS: ErrorMap<AppError> = {\n  [AppError.NO_APP]:\n    \"No Firebase App '{$appName}' has been created - \" +\n    'call initializeApp() first',\n  [AppError.BAD_APP_NAME]: \"Illegal App name: '{$appName}\",\n  [AppError.DUPLICATE_APP]:\n    \"Firebase App named '{$appName}' already exists with different options or config\",\n  [AppError.APP_DELETED]: \"Firebase App named '{$appName}' already deleted\",\n  [AppError.NO_OPTIONS]:\n    'Need to provide options, when not being deployed to hosting via source.',\n  [AppError.INVALID_APP_ARGUMENT]:\n    'firebase.{$appName}() takes either no argument or a ' +\n    'Firebase App instance.',\n  [AppError.INVALID_LOG_ARGUMENT]:\n    'First argument to `onLog` must be null or a function.',\n  [AppError.IDB_OPEN]:\n    'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_GET]:\n    'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_WRITE]:\n    'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_DELETE]:\n    'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.'\n};\n\ninterface ErrorParams {\n  [AppError.NO_APP]: { appName: string };\n  [AppError.BAD_APP_NAME]: { appName: string };\n  [AppError.DUPLICATE_APP]: { appName: string };\n  [AppError.APP_DELETED]: { appName: string };\n  [AppError.INVALID_APP_ARGUMENT]: { appName: string };\n  [AppError.IDB_OPEN]: { originalErrorMessage?: string };\n  [AppError.IDB_GET]: { originalErrorMessage?: string };\n  [AppError.IDB_WRITE]: { originalErrorMessage?: string };\n  [AppError.IDB_DELETE]: { originalErrorMessage?: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AppError, ErrorParams>(\n  'app',\n  'Firebase',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseAppSettings\n} from './public-types';\nimport {\n  ComponentContainer,\n  Component,\n  ComponentType\n} from '@firebase/component';\nimport { ERROR_FACTORY, AppError } from './errors';\n\nexport class FirebaseAppImpl implements FirebaseApp {\n  private readonly _options: FirebaseOptions;\n  private readonly _name: string;\n  /**\n   * Original config values passed in as a constructor parameter.\n   * It is only used to compare with another config object to support idempotent initializeApp().\n   *\n   * Updating automaticDataCollectionEnabled on the App instance will not change its value in _config.\n   */\n  private readonly _config: Required<FirebaseAppSettings>;\n  private _automaticDataCollectionEnabled: boolean;\n  private _isDeleted = false;\n  private readonly _container: ComponentContainer;\n\n  constructor(\n    options: FirebaseOptions,\n    config: Required<FirebaseAppSettings>,\n    container: ComponentContainer\n  ) {\n    this._options = { ...options };\n    this._config = { ...config };\n    this._name = config.name;\n    this._automaticDataCollectionEnabled =\n      config.automaticDataCollectionEnabled;\n    this._container = container;\n    this.container.addComponent(\n      new Component('app', () => this, ComponentType.PUBLIC)\n    );\n  }\n\n  get automaticDataCollectionEnabled(): boolean {\n    this.checkDestroyed();\n    return this._automaticDataCollectionEnabled;\n  }\n\n  set automaticDataCollectionEnabled(val: boolean) {\n    this.checkDestroyed();\n    this._automaticDataCollectionEnabled = val;\n  }\n\n  get name(): string {\n    this.checkDestroyed();\n    return this._name;\n  }\n\n  get options(): FirebaseOptions {\n    this.checkDestroyed();\n    return this._options;\n  }\n\n  get config(): Required<FirebaseAppSettings> {\n    this.checkDestroyed();\n    return this._config;\n  }\n\n  get container(): ComponentContainer {\n    return this._container;\n  }\n\n  get isDeleted(): boolean {\n    return this._isDeleted;\n  }\n\n  set isDeleted(val: boolean) {\n    this._isDeleted = val;\n  }\n\n  /**\n   * This function will throw an Error if the App has already been deleted -\n   * use before performing API actions on the App.\n   */\n  private checkDestroyed(): void {\n    if (this.isDeleted) {\n      throw ERROR_FACTORY.create(AppError.APP_DELETED, { appName: this._name });\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseAppSettings\n} from './public-types';\nimport { DEFAULT_ENTRY_NAME, PLATFORM_LOG_STRING } from './constants';\nimport { ERROR_FACTORY, AppError } from './errors';\nimport {\n  ComponentContainer,\n  Component,\n  Name,\n  ComponentType\n} from '@firebase/component';\nimport { version } from '../../firebase/package.json';\nimport { FirebaseAppImpl } from './firebaseApp';\nimport { _apps, _components, _registerComponent } from './internal';\nimport { logger } from './logger';\nimport {\n  LogLevelString,\n  setLogLevel as setLogLevelImpl,\n  LogCallback,\n  LogOptions,\n  setUserLogHandler\n} from '@firebase/logger';\nimport { deepEqual, getDefaultAppConfig } from '@firebase/util';\n\nexport { FirebaseError } from '@firebase/util';\n\n/**\n * The current SDK version.\n *\n * @public\n */\nexport const SDK_VERSION = version;\n\n/**\n * Creates and initializes a {@link @firebase/app#FirebaseApp} instance.\n *\n * See\n * {@link\n *   https://firebase.google.com/docs/web/setup#add_firebase_to_your_app\n *   | Add Firebase to your app} and\n * {@link\n *   https://firebase.google.com/docs/web/setup#multiple-projects\n *   | Initialize multiple projects} for detailed documentation.\n *\n * @example\n * ```javascript\n *\n * // Initialize default app\n * // Retrieve your own options values by adding a web app on\n * // https://console.firebase.google.com\n * initializeApp({\n *   apiKey: \"AIza....\",                             // Auth / General Use\n *   authDomain: \"YOUR_APP.firebaseapp.com\",         // Auth with popup/redirect\n *   databaseURL: \"https://YOUR_APP.firebaseio.com\", // Realtime Database\n *   storageBucket: \"YOUR_APP.appspot.com\",          // Storage\n *   messagingSenderId: \"123456789\"                  // Cloud Messaging\n * });\n * ```\n *\n * @example\n * ```javascript\n *\n * // Initialize another app\n * const otherApp = initializeApp({\n *   databaseURL: \"https://<OTHER_DATABASE_NAME>.firebaseio.com\",\n *   storageBucket: \"<OTHER_STORAGE_BUCKET>.appspot.com\"\n * }, \"otherApp\");\n * ```\n *\n * @param options - Options to configure the app's services.\n * @param name - Optional name of the app to initialize. If no name\n *   is provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The initialized app.\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  name?: string\n): FirebaseApp;\n/**\n * Creates and initializes a FirebaseApp instance.\n *\n * @param options - Options to configure the app's services.\n * @param config - FirebaseApp Configuration\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  config?: FirebaseAppSettings\n): FirebaseApp;\n/**\n * Creates and initializes a FirebaseApp instance.\n *\n * @public\n */\nexport function initializeApp(): FirebaseApp;\nexport function initializeApp(\n  _options?: FirebaseOptions,\n  rawConfig = {}\n): FirebaseApp {\n  let options = _options;\n\n  if (typeof rawConfig !== 'object') {\n    const name = rawConfig;\n    rawConfig = { name };\n  }\n\n  const config: Required<FirebaseAppSettings> = {\n    name: DEFAULT_ENTRY_NAME,\n    automaticDataCollectionEnabled: false,\n    ...rawConfig\n  };\n  const name = config.name;\n\n  if (typeof name !== 'string' || !name) {\n    throw ERROR_FACTORY.create(AppError.BAD_APP_NAME, {\n      appName: String(name)\n    });\n  }\n\n  options ||= getDefaultAppConfig();\n\n  if (!options) {\n    throw ERROR_FACTORY.create(AppError.NO_OPTIONS);\n  }\n\n  const existingApp = _apps.get(name) as FirebaseAppImpl;\n  if (existingApp) {\n    // return the existing app if options and config deep equal the ones in the existing app.\n    if (\n      deepEqual(options, existingApp.options) &&\n      deepEqual(config, existingApp.config)\n    ) {\n      return existingApp;\n    } else {\n      throw ERROR_FACTORY.create(AppError.DUPLICATE_APP, { appName: name });\n    }\n  }\n\n  const container = new ComponentContainer(name);\n  for (const component of _components.values()) {\n    container.addComponent(component);\n  }\n\n  const newApp = new FirebaseAppImpl(options, config, container);\n\n  _apps.set(name, newApp);\n\n  return newApp;\n}\n\n/**\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\n *\n * When called with no arguments, the default app is returned. When an app name\n * is provided, the app corresponding to that name is returned.\n *\n * An exception is thrown if the app being retrieved has not yet been\n * initialized.\n *\n * @example\n * ```javascript\n * // Return the default app\n * const app = getApp();\n * ```\n *\n * @example\n * ```javascript\n * // Return a named app\n * const otherApp = getApp(\"otherApp\");\n * ```\n *\n * @param name - Optional name of the app to return. If no name is\n *   provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The app corresponding to the provided app name.\n *   If no app name is provided, the default app is returned.\n *\n * @public\n */\nexport function getApp(name: string = DEFAULT_ENTRY_NAME): FirebaseApp {\n  const app = _apps.get(name);\n  if (!app && name === DEFAULT_ENTRY_NAME && getDefaultAppConfig()) {\n    return initializeApp();\n  }\n  if (!app) {\n    throw ERROR_FACTORY.create(AppError.NO_APP, { appName: name });\n  }\n\n  return app;\n}\n\n/**\n * A (read-only) array of all initialized apps.\n * @public\n */\nexport function getApps(): FirebaseApp[] {\n  return Array.from(_apps.values());\n}\n\n/**\n * Renders this app unusable and frees the resources of all associated\n * services.\n *\n * @example\n * ```javascript\n * deleteApp(app)\n *   .then(function() {\n *     console.log(\"App deleted successfully\");\n *   })\n *   .catch(function(error) {\n *     console.log(\"Error deleting app:\", error);\n *   });\n * ```\n *\n * @public\n */\nexport async function deleteApp(app: FirebaseApp): Promise<void> {\n  const name = app.name;\n  if (_apps.has(name)) {\n    _apps.delete(name);\n    await Promise.all(\n      (app as FirebaseAppImpl).container\n        .getProviders()\n        .map(provider => provider.delete())\n    );\n    (app as FirebaseAppImpl).isDeleted = true;\n  }\n}\n\n/**\n * Registers a library's name and version for platform logging purposes.\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\n * @param version - Current version of that library.\n * @param variant - Bundle variant, e.g., node, rn, etc.\n *\n * @public\n */\nexport function registerVersion(\n  libraryKeyOrName: string,\n  version: string,\n  variant?: string\n): void {\n  // TODO: We can use this check to whitelist strings when/if we set up\n  // a good whitelist system.\n  let library = PLATFORM_LOG_STRING[libraryKeyOrName] ?? libraryKeyOrName;\n  if (variant) {\n    library += `-${variant}`;\n  }\n  const libraryMismatch = library.match(/\\s|\\//);\n  const versionMismatch = version.match(/\\s|\\//);\n  if (libraryMismatch || versionMismatch) {\n    const warning = [\n      `Unable to register library \"${library}\" with version \"${version}\":`\n    ];\n    if (libraryMismatch) {\n      warning.push(\n        `library name \"${library}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    if (libraryMismatch && versionMismatch) {\n      warning.push('and');\n    }\n    if (versionMismatch) {\n      warning.push(\n        `version name \"${version}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    logger.warn(warning.join(' '));\n    return;\n  }\n  _registerComponent(\n    new Component(\n      `${library}-version` as Name,\n      () => ({ library, version }),\n      ComponentType.VERSION\n    )\n  );\n}\n\n/**\n * Sets log handler for all Firebase SDKs.\n * @param logCallback - An optional custom log handler that executes user code whenever\n * the Firebase SDK makes a logging call.\n *\n * @public\n */\nexport function onLog(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  if (logCallback !== null && typeof logCallback !== 'function') {\n    throw ERROR_FACTORY.create(AppError.INVALID_LOG_ARGUMENT);\n  }\n  setUserLogHandler(logCallback, options);\n}\n\n/**\n * Sets log level for all Firebase SDKs.\n *\n * All of the log types above the current log level are captured (i.e. if\n * you set the log level to `info`, errors are logged, but `debug` and\n * `verbose` logs are not).\n *\n * @public\n */\nexport function setLogLevel(logLevel: LogLevelString): void {\n  setLogLevelImpl(logLevel);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { DBSchema, openDB, IDBPDatabase } from 'idb';\nimport { AppError, ERROR_FACTORY } from './errors';\nimport { FirebaseApp } from './public-types';\nimport { HeartbeatsInIndexedDB } from './types';\nimport { logger } from './logger';\n\nconst DB_NAME = 'firebase-heartbeat-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-heartbeat-store';\n\ninterface AppDB extends DBSchema {\n  'firebase-heartbeat-store': {\n    key: string;\n    value: HeartbeatsInIndexedDB;\n  };\n}\n\nlet dbPromise: Promise<IDBPDatabase<AppDB>> | null = null;\nfunction getDbPromise(): Promise<IDBPDatabase<AppDB>> {\n  if (!dbPromise) {\n    dbPromise = openDB<AppDB>(DB_NAME, DB_VERSION, {\n      upgrade: (db, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            try {\n              db.createObjectStore(STORE_NAME);\n            } catch (e) {\n              // Safari/iOS browsers throw occasional exceptions on\n              // db.createObjectStore() that may be a bug. Avoid blocking\n              // the rest of the app functionality.\n              console.warn(e);\n            }\n        }\n      }\n    }).catch(e => {\n      throw ERROR_FACTORY.create(AppError.IDB_OPEN, {\n        originalErrorMessage: e.message\n      });\n    });\n  }\n  return dbPromise;\n}\n\nexport async function readHeartbeatsFromIndexedDB(\n  app: FirebaseApp\n): Promise<HeartbeatsInIndexedDB | undefined> {\n  try {\n    const db = await getDbPromise();\n    const result = await db\n      .transaction(STORE_NAME)\n      .objectStore(STORE_NAME)\n      .get(computeKey(app));\n    return result;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(AppError.IDB_GET, {\n        originalErrorMessage: (e as Error)?.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nexport async function writeHeartbeatsToIndexedDB(\n  app: FirebaseApp,\n  heartbeatObject: HeartbeatsInIndexedDB\n): Promise<void> {\n  try {\n    const db = await getDbPromise();\n    const tx = db.transaction(STORE_NAME, 'readwrite');\n    const objectStore = tx.objectStore(STORE_NAME);\n    await objectStore.put(heartbeatObject, computeKey(app));\n    await tx.done;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(AppError.IDB_WRITE, {\n        originalErrorMessage: (e as Error)?.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nfunction computeKey(app: FirebaseApp): string {\n  return `${app.name}!${app.options.appId}`;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ComponentContainer } from '@firebase/component';\nimport {\n  base64urlEncodeWithoutPadding,\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\nimport {\n  readHeartbeatsFromIndexedDB,\n  writeHeartbeatsToIndexedDB\n} from './indexeddb';\nimport { FirebaseApp } from './public-types';\nimport {\n  HeartbeatsByUserAgent,\n  HeartbeatService,\n  HeartbeatsInIndexedDB,\n  HeartbeatStorage,\n  SingleDateHeartbeat\n} from './types';\n\nconst MAX_HEADER_BYTES = 1024;\n// 30 days\nconst STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\n\nexport class HeartbeatServiceImpl implements HeartbeatService {\n  /**\n   * The persistence layer for heartbeats\n   * Leave public for easier testing.\n   */\n  _storage: HeartbeatStorageImpl;\n\n  /**\n   * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\n   * the header string.\n   * Stores one record per date. This will be consolidated into the standard\n   * format of one record per user agent string before being sent as a header.\n   * Populated from indexedDB when the controller is instantiated and should\n   * be kept in sync with indexedDB.\n   * Leave public for easier testing.\n   */\n  _heartbeatsCache: HeartbeatsInIndexedDB | null = null;\n\n  /**\n   * the initialization promise for populating heartbeatCache.\n   * If getHeartbeatsHeader() is called before the promise resolves\n   * (hearbeatsCache == null), it should wait for this promise\n   * Leave public for easier testing.\n   */\n  _heartbeatsCachePromise: Promise<HeartbeatsInIndexedDB>;\n  constructor(private readonly container: ComponentContainer) {\n    const app = this.container.getProvider('app').getImmediate();\n    this._storage = new HeartbeatStorageImpl(app);\n    this._heartbeatsCachePromise = this._storage.read().then(result => {\n      this._heartbeatsCache = result;\n      return result;\n    });\n  }\n\n  /**\n   * Called to report a heartbeat. The function will generate\n   * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\n   * to IndexedDB.\n   * Note that we only store one heartbeat per day. So if a heartbeat for today is\n   * already logged, subsequent calls to this function in the same day will be ignored.\n   */\n  async triggerHeartbeat(): Promise<void> {\n    const platformLogger = this.container\n      .getProvider('platform-logger')\n      .getImmediate();\n\n    // This is the \"Firebase user agent\" string from the platform logger\n    // service, not the browser user agent.\n    const agent = platformLogger.getPlatformInfoString();\n    const date = getUTCDateString();\n    if (this._heartbeatsCache?.heartbeats == null) {\n      this._heartbeatsCache = await this._heartbeatsCachePromise;\n      // If we failed to construct a heartbeats cache, then return immediately.\n      if (this._heartbeatsCache?.heartbeats == null) {\n        return;\n      }\n    }\n    // Do not store a heartbeat if one is already stored for this day\n    // or if a header has already been sent today.\n    if (\n      this._heartbeatsCache.lastSentHeartbeatDate === date ||\n      this._heartbeatsCache.heartbeats.some(\n        singleDateHeartbeat => singleDateHeartbeat.date === date\n      )\n    ) {\n      return;\n    } else {\n      // There is no entry for this date. Create one.\n      this._heartbeatsCache.heartbeats.push({ date, agent });\n    }\n    // Remove entries older than 30 days.\n    this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(\n      singleDateHeartbeat => {\n        const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\n        const now = Date.now();\n        return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\n      }\n    );\n    return this._storage.overwrite(this._heartbeatsCache);\n  }\n\n  /**\n   * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\n   * It also clears all heartbeats from memory as well as in IndexedDB.\n   *\n   * NOTE: Consuming product SDKs should not send the header if this method\n   * returns an empty string.\n   */\n  async getHeartbeatsHeader(): Promise<string> {\n    if (this._heartbeatsCache === null) {\n      await this._heartbeatsCachePromise;\n    }\n    // If it's still null or the array is empty, there is no data to send.\n    if (\n      this._heartbeatsCache?.heartbeats == null ||\n      this._heartbeatsCache.heartbeats.length === 0\n    ) {\n      return '';\n    }\n    const date = getUTCDateString();\n    // Extract as many heartbeats from the cache as will fit under the size limit.\n    const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(\n      this._heartbeatsCache.heartbeats\n    );\n    const headerString = base64urlEncodeWithoutPadding(\n      JSON.stringify({ version: 2, heartbeats: heartbeatsToSend })\n    );\n    // Store last sent date to prevent another being logged/sent for the same day.\n    this._heartbeatsCache.lastSentHeartbeatDate = date;\n    if (unsentEntries.length > 0) {\n      // Store any unsent entries if they exist.\n      this._heartbeatsCache.heartbeats = unsentEntries;\n      // This seems more likely than emptying the array (below) to lead to some odd state\n      // since the cache isn't empty and this will be called again on the next request,\n      // and is probably safest if we await it.\n      await this._storage.overwrite(this._heartbeatsCache);\n    } else {\n      this._heartbeatsCache.heartbeats = [];\n      // Do not wait for this, to reduce latency.\n      void this._storage.overwrite(this._heartbeatsCache);\n    }\n    return headerString;\n  }\n}\n\nfunction getUTCDateString(): string {\n  const today = new Date();\n  // Returns date format 'YYYY-MM-DD'\n  return today.toISOString().substring(0, 10);\n}\n\nexport function extractHeartbeatsForHeader(\n  heartbeatsCache: SingleDateHeartbeat[],\n  maxSize = MAX_HEADER_BYTES\n): {\n  heartbeatsToSend: HeartbeatsByUserAgent[];\n  unsentEntries: SingleDateHeartbeat[];\n} {\n  // Heartbeats grouped by user agent in the standard format to be sent in\n  // the header.\n  const heartbeatsToSend: HeartbeatsByUserAgent[] = [];\n  // Single date format heartbeats that are not sent.\n  let unsentEntries = heartbeatsCache.slice();\n  for (const singleDateHeartbeat of heartbeatsCache) {\n    // Look for an existing entry with the same user agent.\n    const heartbeatEntry = heartbeatsToSend.find(\n      hb => hb.agent === singleDateHeartbeat.agent\n    );\n    if (!heartbeatEntry) {\n      // If no entry for this user agent exists, create one.\n      heartbeatsToSend.push({\n        agent: singleDateHeartbeat.agent,\n        dates: [singleDateHeartbeat.date]\n      });\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        // If the header would exceed max size, remove the added heartbeat\n        // entry and stop adding to the header.\n        heartbeatsToSend.pop();\n        break;\n      }\n    } else {\n      heartbeatEntry.dates.push(singleDateHeartbeat.date);\n      // If the header would exceed max size, remove the added date\n      // and stop adding to the header.\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        heartbeatEntry.dates.pop();\n        break;\n      }\n    }\n    // Pop unsent entry from queue. (Skipped if adding the entry exceeded\n    // quota and the loop breaks early.)\n    unsentEntries = unsentEntries.slice(1);\n  }\n  return {\n    heartbeatsToSend,\n    unsentEntries\n  };\n}\n\nexport class HeartbeatStorageImpl implements HeartbeatStorage {\n  private _canUseIndexedDBPromise: Promise<boolean>;\n  constructor(public app: FirebaseApp) {\n    this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\n  }\n  async runIndexedDBEnvironmentCheck(): Promise<boolean> {\n    if (!isIndexedDBAvailable()) {\n      return false;\n    } else {\n      return validateIndexedDBOpenable()\n        .then(() => true)\n        .catch(() => false);\n    }\n  }\n  /**\n   * Read all heartbeats.\n   */\n  async read(): Promise<HeartbeatsInIndexedDB> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return { heartbeats: [] };\n    } else {\n      const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\n      if (idbHeartbeatObject?.heartbeats) {\n        return idbHeartbeatObject;\n      } else {\n        return { heartbeats: [] };\n      }\n    }\n  }\n  // overwrite the storage with the provided heartbeats\n  async overwrite(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: heartbeatsObject.heartbeats\n      });\n    }\n  }\n  // add heartbeats\n  async add(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: [\n          ...existingHeartbeatsObject.heartbeats,\n          ...heartbeatsObject.heartbeats\n        ]\n      });\n    }\n  }\n}\n\n/**\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\n * in a platform logging header JSON object, stringified, and converted\n * to base 64.\n */\nexport function countBytes(heartbeatsCache: HeartbeatsByUserAgent[]): number {\n  // base64 has a restricted set of characters, all of which should be 1 byte.\n  return base64urlEncodeWithoutPadding(\n    // heartbeatsCache wrapper properties\n    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })\n  ).length;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ComponentType } from '@firebase/component';\nimport { PlatformLoggerServiceImpl } from './platformLoggerService';\nimport { name, version } from '../package.json';\nimport { _registerComponent } from './internal';\nimport { registerVersion } from './api';\nimport { HeartbeatServiceImpl } from './heartbeatService';\n\nexport function registerCoreComponents(variant?: string): void {\n  _registerComponent(\n    new Component(\n      'platform-logger',\n      container => new PlatformLoggerServiceImpl(container),\n      ComponentType.PRIVATE\n    )\n  );\n  _registerComponent(\n    new Component(\n      'heartbeat',\n      container => new HeartbeatServiceImpl(container),\n      ComponentType.PRIVATE\n    )\n  );\n\n  // Register `app` package.\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n  // Register platform SDK identifier (no version).\n  registerVersion('fire-js', '');\n}\n","/**\n * Firebase App\n *\n * @remarks This package coordinates the communication between the different Firebase components\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerCoreComponents } from './registerCoreComponents';\n\nexport * from './api';\nexport * from './internal';\nexport * from './public-types';\n\nregisterCoreComponents('__RUNTIME_ENV__');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  InstantiationMode,\n  InstanceFactory,\n  ComponentType,\n  Dictionary,\n  Name,\n  onInstanceCreatedCallback\n} from './types';\n\n/**\n * Component for service name T, e.g. `auth`, `auth-internal`\n */\nexport class Component<T extends Name = Name> {\n  multipleInstances = false;\n  /**\n   * Properties to be added to the service namespace\n   */\n  serviceProps: Dictionary = {};\n\n  instantiationMode = InstantiationMode.LAZY;\n\n  onInstanceCreated: onInstanceCreatedCallback<T> | null = null;\n\n  /**\n   *\n   * @param name The public service name, e.g. app, auth, firestore, database\n   * @param instanceFactory Service factory responsible for creating the public interface\n   * @param type whether the service provided by the component is public or private\n   */\n  constructor(\n    readonly name: T,\n    readonly instanceFactory: InstanceFactory<T>,\n    readonly type: ComponentType\n  ) {}\n\n  setInstantiationMode(mode: InstantiationMode): this {\n    this.instantiationMode = mode;\n    return this;\n  }\n\n  setMultipleInstances(multipleInstances: boolean): this {\n    this.multipleInstances = multipleInstances;\n    return this;\n  }\n\n  setServiceProps(props: Dictionary): this {\n    this.serviceProps = props;\n    return this;\n  }\n\n  setInstanceCreatedCallback(callback: onInstanceCreatedCallback<T>): this {\n    this.onInstanceCreated = callback;\n    return this;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\nimport { ComponentContainer } from './component_container';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport {\n  InitializeOptions,\n  InstantiationMode,\n  Name,\n  NameServiceMapping,\n  OnInitCallBack\n} from './types';\nimport { Component } from './component';\n\n/**\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\n * NameServiceMapping[T] is an alias for the type of the instance\n */\nexport class Provider<T extends Name> {\n  private component: Component<T> | null = null;\n  private readonly instances: Map<string, NameServiceMapping[T]> = new Map();\n  private readonly instancesDeferred: Map<\n    string,\n    Deferred<NameServiceMapping[T]>\n  > = new Map();\n  private readonly instancesOptions: Map<string, Record<string, unknown>> =\n    new Map();\n  private onInitCallbacks: Map<string, Set<OnInitCallBack<T>>> = new Map();\n\n  constructor(\n    private readonly name: T,\n    private readonly container: ComponentContainer\n  ) {}\n\n  /**\n   * @param identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   */\n  get(identifier?: string): Promise<NameServiceMapping[T]> {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n\n    if (!this.instancesDeferred.has(normalizedIdentifier)) {\n      const deferred = new Deferred<NameServiceMapping[T]>();\n      this.instancesDeferred.set(normalizedIdentifier, deferred);\n\n      if (\n        this.isInitialized(normalizedIdentifier) ||\n        this.shouldAutoInitialize()\n      ) {\n        // initialize the service if it can be auto-initialized\n        try {\n          const instance = this.getOrInitializeService({\n            instanceIdentifier: normalizedIdentifier\n          });\n          if (instance) {\n            deferred.resolve(instance);\n          }\n        } catch (e) {\n          // when the instance factory throws an exception during get(), it should not cause\n          // a fatal error. We just return the unresolved promise in this case.\n        }\n      }\n    }\n\n    return this.instancesDeferred.get(normalizedIdentifier)!.promise;\n  }\n\n  /**\n   *\n   * @param options.identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   * @param options.optional If optional is false or not provided, the method throws an error when\n   * the service is not immediately available.\n   * If optional is true, the method returns null if the service is not immediately available.\n   */\n  getImmediate(options: {\n    identifier?: string;\n    optional: true;\n  }): NameServiceMapping[T] | null;\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: false;\n  }): NameServiceMapping[T];\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: boolean;\n  }): NameServiceMapping[T] | null {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      options?.identifier\n    );\n    const optional = options?.optional ?? false;\n\n    if (\n      this.isInitialized(normalizedIdentifier) ||\n      this.shouldAutoInitialize()\n    ) {\n      try {\n        return this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        });\n      } catch (e) {\n        if (optional) {\n          return null;\n        } else {\n          throw e;\n        }\n      }\n    } else {\n      // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\n      if (optional) {\n        return null;\n      } else {\n        throw Error(`Service ${this.name} is not available`);\n      }\n    }\n  }\n\n  getComponent(): Component<T> | null {\n    return this.component;\n  }\n\n  setComponent(component: Component<T>): void {\n    if (component.name !== this.name) {\n      throw Error(\n        `Mismatching Component ${component.name} for Provider ${this.name}.`\n      );\n    }\n\n    if (this.component) {\n      throw Error(`Component for ${this.name} has already been provided`);\n    }\n\n    this.component = component;\n\n    // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\n    if (!this.shouldAutoInitialize()) {\n      return;\n    }\n\n    // if the service is eager, initialize the default instance\n    if (isComponentEager(component)) {\n      try {\n        this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\n      } catch (e) {\n        // when the instance factory for an eager Component throws an exception during the eager\n        // initialization, it should not cause a fatal error.\n        // TODO: Investigate if we need to make it configurable, because some component may want to cause\n        // a fatal error in this case?\n      }\n    }\n\n    // Create service instances for the pending promises and resolve them\n    // NOTE: if this.multipleInstances is false, only the default instance will be created\n    // and all promises with resolve with it regardless of the identifier.\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n\n      try {\n        // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n        const instance = this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        })!;\n        instanceDeferred.resolve(instance);\n      } catch (e) {\n        // when the instance factory throws an exception, it should not cause\n        // a fatal error. We just leave the promise unresolved.\n      }\n    }\n  }\n\n  clearInstance(identifier: string = DEFAULT_ENTRY_NAME): void {\n    this.instancesDeferred.delete(identifier);\n    this.instancesOptions.delete(identifier);\n    this.instances.delete(identifier);\n  }\n\n  // app.delete() will call this method on every provider to delete the services\n  // TODO: should we mark the provider as deleted?\n  async delete(): Promise<void> {\n    const services = Array.from(this.instances.values());\n\n    await Promise.all([\n      ...services\n        .filter(service => 'INTERNAL' in service) // legacy services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any).INTERNAL!.delete()),\n      ...services\n        .filter(service => '_delete' in service) // modularized services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any)._delete())\n    ]);\n  }\n\n  isComponentSet(): boolean {\n    return this.component != null;\n  }\n\n  isInitialized(identifier: string = DEFAULT_ENTRY_NAME): boolean {\n    return this.instances.has(identifier);\n  }\n\n  getOptions(identifier: string = DEFAULT_ENTRY_NAME): Record<string, unknown> {\n    return this.instancesOptions.get(identifier) || {};\n  }\n\n  initialize(opts: InitializeOptions = {}): NameServiceMapping[T] {\n    const { options = {} } = opts;\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      opts.instanceIdentifier\n    );\n    if (this.isInitialized(normalizedIdentifier)) {\n      throw Error(\n        `${this.name}(${normalizedIdentifier}) has already been initialized`\n      );\n    }\n\n    if (!this.isComponentSet()) {\n      throw Error(`Component ${this.name} has not been registered yet`);\n    }\n\n    const instance = this.getOrInitializeService({\n      instanceIdentifier: normalizedIdentifier,\n      options\n    })!;\n\n    // resolve any pending promise waiting for the service instance\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedDeferredIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n      if (normalizedIdentifier === normalizedDeferredIdentifier) {\n        instanceDeferred.resolve(instance);\n      }\n    }\n\n    return instance;\n  }\n\n  /**\n   *\n   * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\n   * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\n   *\n   * @param identifier An optional instance identifier\n   * @returns a function to unregister the callback\n   */\n  onInit(callback: OnInitCallBack<T>, identifier?: string): () => void {\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n    const existingCallbacks =\n      this.onInitCallbacks.get(normalizedIdentifier) ??\n      new Set<OnInitCallBack<T>>();\n    existingCallbacks.add(callback);\n    this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\n\n    const existingInstance = this.instances.get(normalizedIdentifier);\n    if (existingInstance) {\n      callback(existingInstance, normalizedIdentifier);\n    }\n\n    return () => {\n      existingCallbacks.delete(callback);\n    };\n  }\n\n  /**\n   * Invoke onInit callbacks synchronously\n   * @param instance the service instance`\n   */\n  private invokeOnInitCallbacks(\n    instance: NameServiceMapping[T],\n    identifier: string\n  ): void {\n    const callbacks = this.onInitCallbacks.get(identifier);\n    if (!callbacks) {\n      return;\n    }\n    for (const callback of callbacks) {\n      try {\n        callback(instance, identifier);\n      } catch {\n        // ignore errors in the onInit callback\n      }\n    }\n  }\n\n  private getOrInitializeService({\n    instanceIdentifier,\n    options = {}\n  }: {\n    instanceIdentifier: string;\n    options?: Record<string, unknown>;\n  }): NameServiceMapping[T] | null {\n    let instance = this.instances.get(instanceIdentifier);\n    if (!instance && this.component) {\n      instance = this.component.instanceFactory(this.container, {\n        instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\n        options\n      });\n      this.instances.set(instanceIdentifier, instance);\n      this.instancesOptions.set(instanceIdentifier, options);\n\n      /**\n       * Invoke onInit listeners.\n       * Note this.component.onInstanceCreated is different, which is used by the component creator,\n       * while onInit listeners are registered by consumers of the provider.\n       */\n      this.invokeOnInitCallbacks(instance, instanceIdentifier);\n\n      /**\n       * Order is important\n       * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\n       * makes `isInitialized()` return true.\n       */\n      if (this.component.onInstanceCreated) {\n        try {\n          this.component.onInstanceCreated(\n            this.container,\n            instanceIdentifier,\n            instance\n          );\n        } catch {\n          // ignore errors in the onInstanceCreatedCallback\n        }\n      }\n    }\n\n    return instance || null;\n  }\n\n  private normalizeInstanceIdentifier(\n    identifier: string = DEFAULT_ENTRY_NAME\n  ): string {\n    if (this.component) {\n      return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\n    } else {\n      return identifier; // assume multiple instances are supported before the component is provided.\n    }\n  }\n\n  private shouldAutoInitialize(): boolean {\n    return (\n      !!this.component &&\n      this.component.instantiationMode !== InstantiationMode.EXPLICIT\n    );\n  }\n}\n\n// undefined should be passed to the service factory for the default instance\nfunction normalizeIdentifierForFactory(identifier: string): string | undefined {\n  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\n}\n\nfunction isComponentEager<T extends Name>(component: Component<T>): boolean {\n  return component.instantiationMode === InstantiationMode.EAGER;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Provider } from './provider';\nimport { Component } from './component';\nimport { Name } from './types';\n\n/**\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\n */\nexport class ComponentContainer {\n  private readonly providers = new Map<string, Provider<Name>>();\n\n  constructor(private readonly name: string) {}\n\n  /**\n   *\n   * @param component Component being added\n   * @param overwrite When a component with the same name has already been registered,\n   * if overwrite is true: overwrite the existing component with the new component and create a new\n   * provider with the new component. It can be useful in tests where you want to use different mocks\n   * for different tests.\n   * if overwrite is false: throw an exception\n   */\n  addComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      throw new Error(\n        `Component ${component.name} has already been registered with ${this.name}`\n      );\n    }\n\n    provider.setComponent(component);\n  }\n\n  addOrOverwriteComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      // delete the existing provider from the container, so we can register the new component\n      this.providers.delete(component.name);\n    }\n\n    this.addComponent(component);\n  }\n\n  /**\n   * getProvider provides a type safe interface where it can only be called with a field name\n   * present in NameServiceMapping interface.\n   *\n   * Firebase SDKs providing services should extend NameServiceMapping interface to register\n   * themselves.\n   */\n  getProvider<T extends Name>(name: T): Provider<T> {\n    if (this.providers.has(name)) {\n      return this.providers.get(name) as unknown as Provider<T>;\n    }\n\n    // create a Provider for a service that hasn't registered with Firebase\n    const provider = new Provider<T>(name, this);\n    this.providers.set(name, provider as unknown as Provider<Name>);\n\n    return provider as Provider<T>;\n  }\n\n  getProviders(): Array<Provider<Name>> {\n    return Array.from(this.providers.values());\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type LogLevelString =\n  | 'debug'\n  | 'verbose'\n  | 'info'\n  | 'warn'\n  | 'error'\n  | 'silent';\n\nexport interface LogOptions {\n  level: LogLevelString;\n}\n\nexport type LogCallback = (callbackParams: LogCallbackParams) => void;\n\nexport interface LogCallbackParams {\n  level: LogLevelString;\n  message: string;\n  args: unknown[];\n  type: string;\n}\n\n/**\n * A container for all of the Logger instances\n */\nexport const instances: Logger[] = [];\n\n/**\n * The JS SDK supports 5 log levels and also allows a user the ability to\n * silence the logs altogether.\n *\n * The order is a follows:\n * DEBUG < VERBOSE < INFO < WARN < ERROR\n *\n * All of the log types above the current log level will be captured (i.e. if\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\n * `VERBOSE` logs will not)\n */\nexport enum LogLevel {\n  DEBUG,\n  VERBOSE,\n  INFO,\n  WARN,\n  ERROR,\n  SILENT\n}\n\nconst levelStringToEnum: { [key in LogLevelString]: LogLevel } = {\n  'debug': LogLevel.DEBUG,\n  'verbose': LogLevel.VERBOSE,\n  'info': LogLevel.INFO,\n  'warn': LogLevel.WARN,\n  'error': LogLevel.ERROR,\n  'silent': LogLevel.SILENT\n};\n\n/**\n * The default log level\n */\nconst defaultLogLevel: LogLevel = LogLevel.INFO;\n\n/**\n * We allow users the ability to pass their own log handler. We will pass the\n * type of log, the current log level, and any other arguments passed (i.e. the\n * messages that the user wants to log) to this function.\n */\nexport type LogHandler = (\n  loggerInstance: Logger,\n  logType: LogLevel,\n  ...args: unknown[]\n) => void;\n\n/**\n * By default, `console.debug` is not displayed in the developer console (in\n * chrome). To avoid forcing users to have to opt-in to these logs twice\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\n * logs to the `console.log` function.\n */\nconst ConsoleMethod = {\n  [LogLevel.DEBUG]: 'log',\n  [LogLevel.VERBOSE]: 'log',\n  [LogLevel.INFO]: 'info',\n  [LogLevel.WARN]: 'warn',\n  [LogLevel.ERROR]: 'error'\n};\n\n/**\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\n * messages on to their corresponding console counterparts (if the log method\n * is supported by the current log level)\n */\nconst defaultLogHandler: LogHandler = (instance, logType, ...args): void => {\n  if (logType < instance.logLevel) {\n    return;\n  }\n  const now = new Date().toISOString();\n  const method = ConsoleMethod[logType as keyof typeof ConsoleMethod];\n  if (method) {\n    console[method as 'log' | 'info' | 'warn' | 'error'](\n      `[${now}]  ${instance.name}:`,\n      ...args\n    );\n  } else {\n    throw new Error(\n      `Attempted to log a message with an invalid logType (value: ${logType})`\n    );\n  }\n};\n\nexport class Logger {\n  /**\n   * Gives you an instance of a Logger to capture messages according to\n   * Firebase's logging scheme.\n   *\n   * @param name The name that the logs will be associated with\n   */\n  constructor(public name: string) {\n    /**\n     * Capture the current instance for later use\n     */\n    instances.push(this);\n  }\n\n  /**\n   * The log level of the given Logger instance.\n   */\n  private _logLevel = defaultLogLevel;\n\n  get logLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  set logLevel(val: LogLevel) {\n    if (!(val in LogLevel)) {\n      throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\n    }\n    this._logLevel = val;\n  }\n\n  // Workaround for setter/getter having to be the same type.\n  setLogLevel(val: LogLevel | LogLevelString): void {\n    this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\n  }\n\n  /**\n   * The main (internal) log handler for the Logger instance.\n   * Can be set to a new function in internal package code but not by user.\n   */\n  private _logHandler: LogHandler = defaultLogHandler;\n  get logHandler(): LogHandler {\n    return this._logHandler;\n  }\n  set logHandler(val: LogHandler) {\n    if (typeof val !== 'function') {\n      throw new TypeError('Value assigned to `logHandler` must be a function');\n    }\n    this._logHandler = val;\n  }\n\n  /**\n   * The optional, additional, user-defined log handler for the Logger instance.\n   */\n  private _userLogHandler: LogHandler | null = null;\n  get userLogHandler(): LogHandler | null {\n    return this._userLogHandler;\n  }\n  set userLogHandler(val: LogHandler | null) {\n    this._userLogHandler = val;\n  }\n\n  /**\n   * The functions below are all based on the `console` interface\n   */\n\n  debug(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\n    this._logHandler(this, LogLevel.DEBUG, ...args);\n  }\n  log(...args: unknown[]): void {\n    this._userLogHandler &&\n      this._userLogHandler(this, LogLevel.VERBOSE, ...args);\n    this._logHandler(this, LogLevel.VERBOSE, ...args);\n  }\n  info(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\n    this._logHandler(this, LogLevel.INFO, ...args);\n  }\n  warn(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\n    this._logHandler(this, LogLevel.WARN, ...args);\n  }\n  error(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\n    this._logHandler(this, LogLevel.ERROR, ...args);\n  }\n}\n\nexport function setLogLevel(level: LogLevelString | LogLevel): void {\n  instances.forEach(inst => {\n    inst.setLogLevel(level);\n  });\n}\n\nexport function setUserLogHandler(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  for (const instance of instances) {\n    let customLogLevel: LogLevel | null = null;\n    if (options && options.level) {\n      customLogLevel = levelStringToEnum[options.level];\n    }\n    if (logCallback === null) {\n      instance.userLogHandler = null;\n    } else {\n      instance.userLogHandler = (\n        instance: Logger,\n        level: LogLevel,\n        ...args: unknown[]\n      ) => {\n        const message = args\n          .map(arg => {\n            if (arg == null) {\n              return null;\n            } else if (typeof arg === 'string') {\n              return arg;\n            } else if (typeof arg === 'number' || typeof arg === 'boolean') {\n              return arg.toString();\n            } else if (arg instanceof Error) {\n              return arg.message;\n            } else {\n              try {\n                return JSON.stringify(arg);\n              } catch (ignored) {\n                return null;\n              }\n            }\n          })\n          .filter(arg => arg)\n          .join(' ');\n        if (level >= (customLogLevel ?? instance.logLevel)) {\n          logCallback({\n            level: LogLevel[level].toLowerCase() as LogLevelString,\n            message,\n            args,\n            type: instance.name\n          });\n        }\n      };\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { registerVersion } from '@firebase/app';\nimport { name, version } from '../package.json';\n\nregisterVersion(name, version, 'app');\nexport * from '@firebase/app';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The semver (www.semver.org) version of the SDK. */\nexport let SDK_VERSION = '';\n\n/**\n * SDK_VERSION should be set before any database instance is created\n * @internal\n */\nexport function setSDKVersion(version: string): void {\n  SDK_VERSION = version;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { jsonEval, stringify } from '@firebase/util';\n\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n */\nexport class DOMStorageWrapper {\n  // Use a prefix to avoid collisions with other stuff saved by the app.\n  private prefix_ = 'firebase:';\n\n  /**\n   * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\n   */\n  constructor(private domStorage_: Storage) {}\n\n  /**\n   * @param key - The key to save the value under\n   * @param value - The value being stored, or null to remove the key.\n   */\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n\n  /**\n   * @returns The value that was stored under this key, or null\n   */\n  get(key: string): unknown {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n\n  remove(key: string) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n\n  isInMemoryStorage: boolean;\n\n  prefixedName_(name: string): string {\n    return this.prefix_ + name;\n  }\n\n  toString(): string {\n    return this.domStorage_.toString();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n */\nexport class MemoryStorage {\n  private cache_: { [k: string]: unknown } = {};\n\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n\n  get(key: string): unknown {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n\n  remove(key: string) {\n    delete this.cache_[key];\n  }\n\n  isInMemoryStorage = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DOMStorageWrapper } from './DOMStorageWrapper';\nimport { MemoryStorage } from './MemoryStorage';\n\ndeclare const window: Window;\n\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param domStorageName - Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @returns Turning off type information until a common interface is defined.\n */\nconst createStoragefor = function (\n  domStorageName: string\n): DOMStorageWrapper | MemoryStorage {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window[domStorageName] !== 'undefined'\n    ) {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n\n/** A storage object that lasts across sessions */\nexport const PersistentStorage = createStoragefor('localStorage');\n\n/** A storage object that only lasts one session */\nexport const SessionStorage = createStoragefor('sessionStorage');\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport {\n  assert,\n  base64,\n  Sha1,\n  stringToByteArray,\n  stringify,\n  isNodeSdk\n} from '@firebase/util';\n\nimport { SessionStorage } from '../storage/storage';\nimport { QueryContext } from '../view/EventRegistration';\n\ndeclare const window: Window;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const Windows: any;\n\nconst logClient = new Logger('@firebase/database');\n\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n */\nexport const LUIDGenerator: () => number = (function () {\n  let id = 1;\n  return function () {\n    return id++;\n  };\n})();\n\n/**\n * Sha1 hash of the input string\n * @param str - The string to hash\n * @returns {!string} The resulting hash\n */\nexport const sha1 = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n\nconst buildLogMessage_ = function (...varArgs: unknown[]): string {\n  let message = '';\n  for (let i = 0; i < varArgs.length; i++) {\n    const arg = varArgs[i];\n    if (\n      Array.isArray(arg) ||\n      (arg &&\n        typeof arg === 'object' &&\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        typeof (arg as any).length === 'number')\n    ) {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n    message += ' ';\n  }\n\n  return message;\n};\n\n/**\n * Use this for all debug messages in Firebase.\n */\nexport let logger: ((a: string) => void) | null = null;\n\n/**\n * Flag to check for log availability on first log message\n */\nlet firstLog_ = true;\n\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param logger_ - A flag to turn on logging, or a custom logger\n * @param persistent - Whether or not to persist logging settings across refreshes\n */\nexport const enableLogging = function (\n  logger_?: boolean | ((a: string) => void) | null,\n  persistent?: boolean\n) {\n  assert(\n    !persistent || logger_ === true || logger_ === false,\n    \"Can't turn on custom loggers persistently.\"\n  );\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n\nexport const log = function (...varArgs: unknown[]) {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging(true);\n    }\n  }\n\n  if (logger) {\n    const message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\n\nexport const logWrapper = function (\n  prefix: string\n): (...varArgs: unknown[]) => void {\n  return function (...varArgs: unknown[]) {\n    log(prefix, ...varArgs);\n  };\n};\n\nexport const error = function (...varArgs: string[]) {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\n  logClient.error(message);\n};\n\nexport const fatal = function (...varArgs: string[]) {\n  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\n\nexport const warn = function (...varArgs: unknown[]) {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\n  logClient.warn(message);\n};\n\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nexport const warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (\n    typeof window !== 'undefined' &&\n    window.location &&\n    window.location.protocol &&\n    window.location.protocol.indexOf('https:') !== -1\n  ) {\n    warn(\n      'Insecure Firebase access from a secure page. ' +\n        'Please use https in calls to new Firebase().'\n    );\n  }\n};\n\nexport const warnAboutUnsupportedMethod = function (methodName: string) {\n  warn(\n    methodName +\n      ' is unsupported and will likely change soon.  ' +\n      'Please do not use.'\n  );\n};\n\n/**\n * Returns true if data is NaN, or +/- Infinity.\n */\nexport const isInvalidJSONNumber = function (data: unknown): boolean {\n  return (\n    typeof data === 'number' &&\n    (data !== data || // NaN\n      data === Number.POSITIVE_INFINITY ||\n      data === Number.NEGATIVE_INFINITY)\n  );\n};\n\nexport const executeWhenDOMReady = function (fn: () => void) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n\n    let called = false;\n    const wrappedFn = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((document as any).attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (document as any).attachEvent('onreadystatechange', () => {\n        if (document.readyState === 'complete') {\n          wrappedFn();\n        }\n      });\n      // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (window as any).attachEvent('onload', wrappedFn);\n\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n */\nexport const MIN_NAME = '[MIN_NAME]';\n\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n */\nexport const MAX_NAME = '[MAX_NAME]';\n\n/**\n * Compares valid Firebase key names, plus min and max name\n */\nexport const nameCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n\n/**\n * @returns {!number} comparison result.\n */\nexport const stringCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\nexport const requireKey = function (\n  key: string,\n  obj: { [k: string]: unknown }\n): unknown {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error(\n      'Missing required key (' + key + ') in object: ' + stringify(obj)\n    );\n  }\n};\n\nexport const ObjectToUniqueKey = function (obj: unknown): string {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n\n  const keys = [];\n  // eslint-disable-next-line guard-for-in\n  for (const k in obj) {\n    keys.push(k);\n  }\n\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '{';\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param str - The string\n * @param segsize - The maximum number of chars in the string.\n * @returns The string, split into appropriately-sized chunks\n */\nexport const splitStringBySize = function (\n  str: string,\n  segsize: number\n): string[] {\n  const len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param obj - The object or array to iterate over\n * @param fn - The function to apply\n */\nexport function each(obj: object, fn: (k: string, v: unknown) => void) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\n/**\n * Like goog.bind, but doesn't bother to create a closure if opt_context is null/undefined.\n * @param callback - Callback function.\n * @param context - Optional context to bind to.\n *\n */\nexport const bindCallback = function (\n  callback: (a: unknown) => void,\n  context?: object | null\n): (a: unknown) => void {\n  return context ? callback.bind(context) : callback;\n};\n\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param v - A double\n *\n */\nexport const doubleToIEEE754String = function (v: number): string {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  const ebits = 11,\n    fbits = 52;\n  const bias = (1 << (ebits - 1)) - 1;\n  let s, e, f, ln, i;\n\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n\n  // Pack sign, exponent, fraction\n  const bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  const str = bits.join('');\n\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n */\nexport const isChromeExtensionContentScript = function (): boolean {\n  return !!(\n    typeof window === 'object' &&\n    window['chrome'] &&\n    window['chrome']['extension'] &&\n    !/^chrome/.test(window.location.href)\n  );\n};\n\n/**\n * Used to detect if we're in a Windows 8 Store app.\n */\nexport const isWindowsStoreApp = function (): boolean {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n\n/**\n * Converts a server error code to a Javascript Error\n */\nexport function errorForServerCode(code: string, query: QueryContext): Error {\n  let reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason =\n      'The data requested exceeds the maximum size ' +\n      'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  const error = new Error(\n    code + ' at ' + query._path.toString() + ': ' + reason\n  );\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (error as any).code = code.toUpperCase();\n  return error;\n}\n\n/**\n * Used to test for integer-looking strings\n */\nexport const INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n\n/**\n * For use in keys, the minimum possible 32-bit integer.\n */\nexport const INTEGER_32_MIN = -2147483648;\n\n/**\n * For use in kyes, the maximum possible 32-bit integer.\n */\nexport const INTEGER_32_MAX = 2147483647;\n\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n */\nexport const tryParseInt = function (str: string): number | null {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n    if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n      return intVal;\n    }\n  }\n  return null;\n};\n\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param fn - The code to guard.\n */\nexport const exceptionGuard = function (fn: () => void) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(() => {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n\n/**\n * Helper function to safely call opt_callback with the specified arguments.  It:\n * 1. Turns into a no-op if opt_callback is null or undefined.\n * 2. Wraps the call inside exceptionGuard to prevent exceptions from breaking our state.\n *\n * @param callback - Optional onComplete callback.\n * @param varArgs - Arbitrary args to be passed to opt_onComplete\n */\nexport const callUserCallback = function (\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback?: Function | null,\n  ...varArgs: unknown[]\n) {\n  if (typeof callback === 'function') {\n    exceptionGuard(() => {\n      callback(...varArgs);\n    });\n  }\n};\n\n/**\n * @returns {boolean} true if we think we're currently being crawled.\n */\nexport const beingCrawled = function (): boolean {\n  const userAgent =\n    (typeof window === 'object' &&\n      window['navigator'] &&\n      window['navigator']['userAgent']) ||\n    '';\n\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return (\n    userAgent.search(\n      /googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i\n    ) >= 0\n  );\n};\n\n/**\n * Export a property of an object using a getter function.\n */\nexport const exportPropGetter = function (\n  object: object,\n  name: string,\n  fnGet: () => unknown\n) {\n  Object.defineProperty(object, name, { get: fnGet });\n};\n\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param fn - Function to run.\n * @param time - Milliseconds to wait before running.\n * @returns The setTimeout() return value.\n */\nexport const setTimeoutNonBlocking = function (\n  fn: () => void,\n  time: number\n): number | object {\n  const timeout: number | object = setTimeout(fn, time);\n  // Note: at the time of this comment, unrefTimer is under the unstable set of APIs. Run with --unstable to enable the API.\n  if (\n    typeof timeout === 'number' &&\n    // @ts-ignore Is only defined in Deno environments.\n    typeof Deno !== 'undefined' &&\n    // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n    Deno['unrefTimer']\n  ) {\n    // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n    Deno.unrefTimer(timeout);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } else if (typeof timeout === 'object' && (timeout as any)['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (timeout as any)['unref']();\n  }\n\n  return timeout;\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AppCheckInternalComponentName,\n  AppCheckTokenListener,\n  AppCheckTokenResult,\n  FirebaseAppCheckInternal\n} from '@firebase/app-check-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { warn } from './util/util';\n\n/**\n * Abstraction around AppCheck's token fetching capabilities.\n */\nexport class AppCheckTokenProvider {\n  private appCheck?: FirebaseAppCheckInternal;\n  constructor(\n    private appName_: string,\n    private appCheckProvider?: Provider<AppCheckInternalComponentName>\n  ) {\n    this.appCheck = appCheckProvider?.getImmediate({ optional: true });\n    if (!this.appCheck) {\n      appCheckProvider?.get().then(appCheck => (this.appCheck = appCheck));\n    }\n  }\n\n  getToken(forceRefresh?: boolean): Promise<AppCheckTokenResult> {\n    if (!this.appCheck) {\n      return new Promise<AppCheckTokenResult>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAppCheck. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // AppCheck and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.appCheck) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n    return this.appCheck.getToken(forceRefresh);\n  }\n\n  addTokenChangeListener(listener: AppCheckTokenListener) {\n    this.appCheckProvider\n      ?.get()\n      .then(appCheck => appCheck.addTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    warn(\n      `Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\n        'are invalid. This usually indicates your app was not initialized correctly.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseAuthTokenData } from '@firebase/app-types/private';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { log, warn } from './util/util';\n\nexport interface AuthTokenProvider {\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData>;\n  addTokenChangeListener(listener: (token: string | null) => void): void;\n  removeTokenChangeListener(listener: (token: string | null) => void): void;\n  notifyForInvalidToken(): void;\n}\n\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nexport class FirebaseAuthTokenProvider implements AuthTokenProvider {\n  private auth_: FirebaseAuthInternal | null = null;\n\n  constructor(\n    private appName_: string,\n    private firebaseOptions_: object,\n    private authProvider_: Provider<FirebaseAuthInternalName>\n  ) {\n    this.auth_ = authProvider_.getImmediate({ optional: true });\n    if (!this.auth_) {\n      authProvider_.onInit(auth => (this.auth_ = auth));\n    }\n  }\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    if (!this.auth_) {\n      return new Promise<FirebaseAuthTokenData>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAuth. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // Auth and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.auth_) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n\n    return this.auth_.getToken(forceRefresh).catch(error => {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      this.authProvider_\n        .get()\n        .then(auth => auth.addAuthTokenListener(listener));\n    }\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {\n    this.authProvider_\n      .get()\n      .then(auth => auth.removeAuthTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    let errorMessage =\n      'Provided authentication credentials for the app named \"' +\n      this.appName_ +\n      '\" are invalid. This usually indicates your app was not ' +\n      'initialized correctly. ';\n    if ('credential' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"credential\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else if ('serviceAccount' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else {\n      errorMessage +=\n        'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n        'initializeApp() match the values provided for your app at ' +\n        'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\nexport class EmulatorTokenProvider implements AuthTokenProvider {\n  /** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\n  static OWNER = 'owner';\n\n  constructor(private accessToken: string) {}\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    return Promise.resolve({\n      accessToken: this.accessToken\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // Invoke the listener immediately to match the behavior in Firebase Auth\n    // (see packages/auth/src/auth.js#L1807)\n    listener(this.accessToken);\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {}\n\n  notifyForInvalidToken(): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const PROTOCOL_VERSION = '5';\n\nexport const VERSION_PARAM = 'v';\n\nexport const TRANSPORT_SESSION_PARAM = 's';\n\nexport const REFERER_PARAM = 'r';\n\nexport const FORGE_REF = 'f';\n\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\nexport const FORGE_DOMAIN_RE =\n  /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\n\nexport const LAST_SESSION_PARAM = 'ls';\n\nexport const APPLICATION_ID_PARAM = 'p';\n\nexport const APP_CHECK_TOKEN_PARAM = 'ac';\n\nexport const WEBSOCKET = 'websocket';\n\nexport const LONG_POLLING = 'long_polling';\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { LONG_POLLING, WEBSOCKET } from '../realtime/Constants';\n\nimport { PersistentStorage } from './storage/storage';\nimport { each } from './util/util';\n\n/**\n * A class that holds metadata about a Repo object\n */\nexport class RepoInfo {\n  private _host: string;\n  private _domain: string;\n  internalHost: string;\n\n  /**\n   * @param host - Hostname portion of the url for the repo\n   * @param secure - Whether or not this repo is accessed over ssl\n   * @param namespace - The namespace represented by the repo\n   * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\n   * @param nodeAdmin - Whether this instance uses Admin SDK credentials\n   * @param persistenceKey - Override the default session persistence storage key\n   */\n  constructor(\n    host: string,\n    public readonly secure: boolean,\n    public readonly namespace: string,\n    public readonly webSocketOnly: boolean,\n    public readonly nodeAdmin: boolean = false,\n    public readonly persistenceKey: string = '',\n    public readonly includeNamespaceInQueryParams: boolean = false,\n    public readonly isUsingEmulator: boolean = false\n  ) {\n    this._host = host.toLowerCase();\n    this._domain = this._host.substr(this._host.indexOf('.') + 1);\n    this.internalHost =\n      (PersistentStorage.get('host:' + host) as string) || this._host;\n  }\n\n  isCacheableHost(): boolean {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n\n  isCustomHost() {\n    return (\n      this._domain !== 'firebaseio.com' &&\n      this._domain !== 'firebaseio-demo.com'\n    );\n  }\n\n  get host() {\n    return this._host;\n  }\n\n  set host(newHost: string) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this._host, this.internalHost);\n      }\n    }\n  }\n\n  toString(): string {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n\n  toURLString(): string {\n    const protocol = this.secure ? 'https://' : 'http://';\n    const query = this.includeNamespaceInQueryParams\n      ? `?ns=${this.namespace}`\n      : '';\n    return `${protocol}${this.host}/${query}`;\n  }\n}\n\nfunction repoInfoNeedsQueryParam(repoInfo: RepoInfo): boolean {\n  return (\n    repoInfo.host !== repoInfo.internalHost ||\n    repoInfo.isCustomHost() ||\n    repoInfo.includeNamespaceInQueryParams\n  );\n}\n\n/**\n * Returns the websocket URL for this repo\n * @param repoInfo - RepoInfo object\n * @param type - of connection\n * @param params - list\n * @returns The URL for this repo\n */\nexport function repoInfoConnectionURL(\n  repoInfo: RepoInfo,\n  type: string,\n  params: { [k: string]: string }\n): string {\n  assert(typeof type === 'string', 'typeof type must == string');\n  assert(typeof params === 'object', 'typeof params must == object');\n\n  let connURL: string;\n  if (type === WEBSOCKET) {\n    connURL =\n      (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\n  } else if (type === LONG_POLLING) {\n    connURL =\n      (repoInfo.secure ? 'https://' : 'http://') +\n      repoInfo.internalHost +\n      '/.lp?';\n  } else {\n    throw new Error('Unknown connection type: ' + type);\n  }\n  if (repoInfoNeedsQueryParam(repoInfo)) {\n    params['ns'] = repoInfo.namespace;\n  }\n\n  const pairs: string[] = [];\n\n  each(params, (key: string, value: string) => {\n    pairs.push(key + '=' + value);\n  });\n\n  return connURL + pairs.join('&');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deepCopy, contains } from '@firebase/util';\n\n/**\n * Tracks a collection of stats.\n */\nexport class StatsCollection {\n  private counters_: { [k: string]: number } = {};\n\n  incrementCounter(name: string, amount: number = 1) {\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n\n    this.counters_[name] += amount;\n  }\n\n  get() {\n    return deepCopy(this.counters_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport { StatsCollection } from './StatsCollection';\n\nconst collections: { [k: string]: StatsCollection } = {};\nconst reporters: { [k: string]: unknown } = {};\n\nexport function statsManagerGetCollection(repoInfo: RepoInfo): StatsCollection {\n  const hashString = repoInfo.toString();\n\n  if (!collections[hashString]) {\n    collections[hashString] = new StatsCollection();\n  }\n\n  return collections[hashString];\n}\n\nexport function statsManagerGetOrCreateReporter<T>(\n  repoInfo: RepoInfo,\n  creatorFunction: () => T\n): T {\n  const hashString = repoInfo.toString();\n\n  if (!reporters[hashString]) {\n    reporters[hashString] = creatorFunction();\n  }\n\n  return reporters[hashString] as T;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { exceptionGuard } from '../../core/util/util';\n\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n */\nexport class PacketReceiver {\n  pendingResponses: unknown[] = [];\n  currentResponseNum = 0;\n  closeAfterResponse = -1;\n  onClose: (() => void) | null = null;\n\n  /**\n   * @param onMessage_\n   */\n  constructor(private onMessage_: (a: {}) => void) {}\n\n  closeAfter(responseNum: number, callback: () => void) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   */\n  handleResponse(requestNum: number, data: unknown[]) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[\n        this.currentResponseNum\n      ] as unknown[];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Encode, isNodeSdk, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport {\n  executeWhenDOMReady,\n  isChromeExtensionContentScript,\n  isWindowsStoreApp,\n  log,\n  logWrapper,\n  LUIDGenerator,\n  splitStringBySize\n} from '../core/util/util';\n\nimport {\n  APP_CHECK_TOKEN_PARAM,\n  APPLICATION_ID_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  LONG_POLLING,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM\n} from './Constants';\nimport { PacketReceiver } from './polling/PacketReceiver';\nimport { Transport } from './Transport';\n\n// URL query parameters associated with longpolling\nexport const FIREBASE_LONGPOLL_START_PARAM = 'start';\nexport const FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nexport const FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nexport const FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nexport const FIREBASE_LONGPOLL_ID_PARAM = 'id';\nexport const FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nexport const FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nexport const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nexport const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nexport const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nexport const FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n\n/**\n * How long to wait before aborting a long-polling connection attempt.\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n\n/**\n * This class manages a single long-polling connection.\n */\nexport class BrowserPollConnection implements Transport {\n  bytesSent = 0;\n  bytesReceived = 0;\n  urlFn: (params: object) => string;\n  scriptTagHolder: FirebaseIFrameScriptHolder;\n  myDisconnFrame: HTMLIFrameElement;\n  curSegmentNum: number;\n  myPacketOrderer: PacketReceiver;\n  id: string;\n  password: string;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_ = false;\n  private isClosed_: boolean;\n  private connectTimeoutTimer_: number | null;\n  private onDisconnect_: ((a?: boolean) => void) | null;\n\n  /**\n   * @param connId An identifier for this connection, used for logging\n   * @param repoInfo The info for the endpoint to send data to.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The AppCheck token for this client.\n   * @param authToken The AuthToken to use for this connection.\n   * @param transportSessionId Optional transportSessionid if we are\n   * reconnecting for an existing transport session\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has\n   * already created a connection previously\n   */\n  constructor(\n    public connId: string,\n    public repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    public transportSessionId?: string,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.urlFn = (params: { [k: string]: string }) => {\n      // Always add the token if we have one.\n      if (this.appCheckToken) {\n        params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\n    };\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT)) as any;\n\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) {\n        return;\n      }\n\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(\n        (...args) => {\n          const [command, arg1, arg2, arg3, arg4] = args;\n          this.incrementIncomingBytes_(args);\n          if (!this.scriptTagHolder) {\n            return; // we closed the connection.\n          }\n\n          if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n          }\n          this.everConnected_ = true;\n          if (command === FIREBASE_LONGPOLL_START_PARAM) {\n            this.id = arg1 as string;\n            this.password = arg2 as string;\n          } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n            // Don't clear the host cache. We got a response from the server, so we know it's reachable\n            if (arg1) {\n              // We aren't expecting any more data (other than what the server's already in the process of sending us\n              // through our already open polls), so don't send any more.\n              this.scriptTagHolder.sendNewPolls = false;\n\n              // arg1 in this case is the last response number sent by the server. We should try to receive\n              // all of the responses up to this one before closing\n              this.myPacketOrderer.closeAfter(arg1 as number, () => {\n                this.onClosed_();\n              });\n            } else {\n              this.onClosed_();\n            }\n          } else {\n            throw new Error('Unrecognized command received: ' + command);\n          }\n        },\n        (...args) => {\n          const [pN, data] = args;\n          this.incrementIncomingBytes_(args);\n          this.myPacketOrderer.handleResponse(pN as number, data as unknown[]);\n        },\n        () => {\n          this.onClosed_();\n        },\n        this.urlFn\n      );\n\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(\n        Math.random() * 100000000\n      );\n      if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\n          this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n      if (this.applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n      }\n      if (this.appCheckToken) {\n        urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      if (\n        typeof location !== 'undefined' &&\n        location.hostname &&\n        FORGE_DOMAIN_RE.test(location.hostname)\n      ) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n\n  /**\n   * Call this when a handshake has completed successfully and we want to consider the connection established\n   */\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n\n  static forceAllow_: boolean;\n\n  /**\n   * Forces long polling to be considered as a potential transport\n   */\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n\n  static forceDisallow_: boolean;\n\n  /**\n   * Forces longpolling to not be considered as a potential transport\n   */\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  }\n\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return (\n        !BrowserPollConnection.forceDisallow_ &&\n        typeof document !== 'undefined' &&\n        document.createElement != null &&\n        !isChromeExtensionContentScript() &&\n        !isWindowsStoreApp()\n      );\n    }\n  }\n\n  /**\n   * No-op for polling\n   */\n  markConnectionHealthy() {}\n\n  /**\n   * Stops polling and cleans up the iframe\n   */\n  private shutdown_() {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n\n  /**\n   * Triggered when this transport is closed\n   */\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n   * that we've left.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n   * broken into chunks (since URLs have a small maximum length).\n   * @param data - The JSON data to transmit.\n   */\n  send(data: {}) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(\n        this.curSegmentNum,\n        dataSegs.length,\n        dataSegs[i]\n      );\n      this.curSegmentNum++;\n    }\n  }\n\n  /**\n   * This is how we notify the server that we're leaving.\n   * We aren't able to send requests with DHTML on a window close event, but we can\n   * trigger XHR requests in some browsers (everything but Opera basically).\n   */\n  addDisconnectPingFrame(id: string, pw: string) {\n    if (isNodeSdk()) {\n      return;\n    }\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams: { [k: string]: string } = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n\n    document.body.appendChild(this.myDisconnFrame);\n  }\n\n  /**\n   * Used to track the bytes received by this client\n   */\n  private incrementIncomingBytes_(args: unknown) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface IFrameElement extends HTMLIFrameElement {\n  doc: Document;\n}\n\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n *********************************************************************************************/\nexport class FirebaseIFrameScriptHolder {\n  //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n  //problems in some browsers.\n  outstandingRequests = new Set<number>();\n\n  //A queue of the pending segments waiting for transmission to the server.\n  pendingSegs: Array<{ seg: number; ts: number; d: unknown }> = [];\n\n  //A serial number. We use this for two things:\n  // 1) A way to ensure the browser doesn't cache responses to polls\n  // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n  //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n  //    JSONP code in the order it was added to the iframe.\n  currentSerial = Math.floor(Math.random() * 100000000);\n\n  // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n  // incoming data from the server that we're waiting for).\n  sendNewPolls = true;\n\n  uniqueCallbackIdentifier: number;\n  myIFrame: IFrameElement;\n  alive: boolean;\n  myID: string;\n  myPW: string;\n  commandCB: (command: string, ...args: unknown[]) => void;\n  onMessageCB: (...args: unknown[]) => void;\n\n  /**\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\n   */\n  constructor(\n    commandCB: (command: string, ...args: unknown[]) => void,\n    onMessageCB: (...args: unknown[]) => void,\n    public onDisconnect: () => void,\n    public urlFn: (a: object) => string\n  ) {\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[\n        FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier\n      ] = commandCB;\n      window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\n        onMessageCB;\n\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (\n        this.myIFrame.src &&\n        this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:'\n      ) {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n\n  /**\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n   * actually use.\n   */\n  private static createIFrame_(): IFrameElement {\n    const iframe = document.createElement('iframe') as IFrameElement;\n    iframe.style.display = 'none';\n\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src =\n          \"javascript:void((function(){document.open();document.domain='\" +\n          domain +\n          \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((iframe as any).document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = (iframe as any).document; //others?\n    }\n\n    return iframe;\n  }\n\n  /**\n   * Cancel all outstanding queries and remove the frame.\n   */\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting textContent seems to be the safest way to do this.\n      this.myIFrame.doc.body.textContent = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n\n  /**\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n   * @param id - The ID of this connection\n   * @param pw - The password for this connection\n   */\n  startLongPoll(id: string, pw: string) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  }\n\n  /**\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n   * too many outstanding requests and we are still alive.\n   *\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n   * needed.\n   */\n  private newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (\n      this.alive &&\n      this.sendNewPolls &&\n      this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)\n    ) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (\n          (nextSeg.d as unknown[]).length +\n            SEG_HEADER_SIZE +\n            curDataString.length <=\n          MAX_URL_DATA_SIZE\n        ) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString =\n            curDataString +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n            i +\n            '=' +\n            theSeg.seg +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n            i +\n            '=' +\n            theSeg.ts +\n            '&' +\n            FIREBASE_LONGPOLL_DATA_PARAM +\n            i +\n            '=' +\n            theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Queue a packet for transmission to the server.\n   * @param segnum - A sequential id for this packet segment used for reassembly\n   * @param totalsegs - The total number of segments in this packet\n   * @param data - The data for this segment.\n   */\n  enqueueSegment(segnum: number, totalsegs: number, data: unknown) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n\n  /**\n   * Add a script tag for a regular long-poll request.\n   * @param url - The URL of the script tag.\n   * @param serial - The serial number of the request.\n   */\n  private addLongPollTag_(url: string, serial: number) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n\n    const doNewRequest = () => {\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n    };\n\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(\n      doNewRequest,\n      Math.floor(KEEPALIVE_REQUEST_INTERVAL)\n    );\n\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  }\n\n  /**\n   * Add an arbitrary script tag to the iframe.\n   * @param url - The URL for the script tag source.\n   * @param loadCB - A callback to be triggered once the script has loaded.\n   */\n  addTag(url: string, loadCB: () => void) {\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this as any).doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) {\n            return;\n          }\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          newScript.onload = (newScript as any).onreadystatechange =\n            function () {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              const rstate = (newScript as any).readyState;\n              if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                newScript.onload = (newScript as any).onreadystatechange = null;\n                if (newScript.parentNode) {\n                  newScript.parentNode.removeChild(newScript);\n                }\n                loadCB();\n              }\n            };\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isNodeSdk, jsonEval, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { logWrapper, splitStringBySize } from '../core/util/util';\nimport { SDK_VERSION } from '../core/version';\n\nimport {\n  APPLICATION_ID_PARAM,\n  APP_CHECK_TOKEN_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM,\n  WEBSOCKET\n} from './Constants';\nimport { Transport } from './Transport';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const MozWebSocket: any;\n\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\n\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n\nexport function setWebSocketImpl(impl) {\n  WebSocketImpl = impl;\n}\n\n/**\n * Create a new websocket connection with the given callbacks.\n */\nexport class WebSocketConnection implements Transport {\n  keepaliveTimer: number | null = null;\n  frames: string[] | null = null;\n  totalFrames = 0;\n  bytesSent = 0;\n  bytesReceived = 0;\n  connURL: string;\n  onDisconnect: (a?: boolean) => void;\n  onMessage: (msg: {}) => void;\n  mySock: WebSocket | null;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_: boolean;\n  private isClosed_: boolean;\n  private nodeAdmin: boolean;\n\n  /**\n   * @param connId identifier for this transport\n   * @param repoInfo The info for the websocket endpoint.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The App Check Token for this client.\n   * @param authToken The Auth Token for this client.\n   * @param transportSessionId Optional transportSessionId if this is connecting\n   * to an existing transport session\n   * @param lastSessionId Optional lastSessionId if there was a previous\n   * connection\n   */\n  constructor(\n    public connId: string,\n    repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(\n      repoInfo,\n      transportSessionId,\n      lastSessionId,\n      appCheckToken,\n      applicationId\n    );\n    this.nodeAdmin = repoInfo.nodeAdmin;\n  }\n\n  /**\n   * @param repoInfo - The info for the websocket endpoint.\n   * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param lastSessionId - Optional lastSessionId if there was a previous connection\n   * @returns connection url\n   */\n  private static connectionURL_(\n    repoInfo: RepoInfo,\n    transportSessionId?: string,\n    lastSessionId?: string,\n    appCheckToken?: string,\n    applicationId?: string\n  ): string {\n    const urlParams: { [k: string]: string } = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (\n      !isNodeSdk() &&\n      typeof location !== 'undefined' &&\n      location.hostname &&\n      FORGE_DOMAIN_RE.test(location.hostname)\n    ) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n    if (appCheckToken) {\n      urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\n    }\n    if (applicationId) {\n      urlParams[APPLICATION_ID_PARAM] = applicationId;\n    }\n\n    return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n\n    this.log_('Websocket connecting to ' + this.connURL);\n\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      let options: { [k: string]: object };\n      if (isNodeSdk()) {\n        const device = this.nodeAdmin ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        options = {\n          headers: {\n            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n\n        // If using Node with admin creds, AppCheck-related checks are unnecessary.\n        // Note that we send the credentials here even if they aren't admin credentials, which is\n        // not a problem.\n        // Note that this header is just used to bypass appcheck, and the token should still be sent\n        // through the websocket connection once it is established.\n        if (this.authToken) {\n          options.headers['Authorization'] = `Bearer ${this.authToken}`;\n        }\n        if (this.appCheckToken) {\n          options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\n        }\n\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        const env = process['env'];\n        const proxy =\n          this.connURL.indexOf('wss://') === 0\n            ? env['HTTPS_PROXY'] || env['https_proxy']\n            : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = { origin: proxy };\n        }\n      }\n      this.mySock = new WebSocketImpl(this.connURL, [], options);\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n\n    this.mySock.onmessage = m => {\n      this.handleIncomingFrame(m as {});\n    };\n\n    this.mySock.onerror = e => {\n      this.log_('WebSocket error.  Closing connection.');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const error = (e as any).message || (e as any).data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n    };\n  }\n\n  /**\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n   */\n  start() {}\n\n  static forceDisallow_: boolean;\n\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n\n  static isAvailable(): boolean {\n    let isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return (\n      !isOldAndroid &&\n      WebSocketImpl !== null &&\n      !WebSocketConnection.forceDisallow_\n    );\n  }\n\n  /**\n   * Number of response before we consider the connection \"healthy.\"\n   */\n  static responsesRequiredToBeHealthy = 2;\n\n  /**\n   * Time to wait for the connection te become healthy before giving up.\n   */\n  static healthyTimeout = 30000;\n\n  /**\n   * Returns true if we previously failed to connect with this transport.\n   */\n  static previouslyFailed(): boolean {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return (\n      PersistentStorage.isInMemoryStorage ||\n      PersistentStorage.get('previous_websocket_failure') === true\n    );\n  }\n\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n\n  private appendFrame_(data: string) {\n    this.frames.push(data);\n    if (this.frames.length === this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess) as object;\n\n      //handle the message\n      this.onMessage(jsonMess);\n    }\n  }\n\n  /**\n   * @param frameCount - The number of frames we are expecting from the server\n   */\n  private handleNewFrameCount_(frameCount: number) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n\n  /**\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n   * @returns Any remaining data to be process, or null if there is none\n   */\n  private extractFrameCount_(data: string): string | null {\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n\n  /**\n   * Process a websocket frame that has arrived from the server.\n   * @param mess - The frame data\n   */\n  handleIncomingFrame(mess: { [k: string]: unknown }) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n    const data = mess['data'] as string;\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n\n  /**\n   * Send a message to the server\n   * @param data - The JSON object to transmit\n   */\n  send(data: {}) {\n    this.resetKeepAlive();\n\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n\n    //Send the length header\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    }\n\n    //Send the actual data in segments.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n\n  private shutdown_() {\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler.\n   * Close the websocket and kill the connection.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n   * the last activity.\n   */\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n      this.resetKeepAlive();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL)) as any;\n  }\n\n  /**\n   * Send a string over the websocket.\n   *\n   * @param str - String to send.\n   */\n  private sendString_(str: string) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_(\n        'Exception thrown from WebSocket.send():',\n        e.message || e.data,\n        'Closing connection.'\n      );\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { warn } from '../core/util/util';\n\nimport { BrowserPollConnection } from './BrowserPollConnection';\nimport { TransportConstructor } from './Transport';\nimport { WebSocketConnection } from './WebSocketConnection';\n\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n */\nexport class TransportManager {\n  private transports_: TransportConstructor[];\n\n  // Keeps track of whether the TransportManager has already chosen a transport to use\n  static globalTransportInitialized_ = false;\n\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n\n  /**\n   * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after\n   * TransportManager has already set up transports_\n   */\n  static get IS_TRANSPORT_INITIALIZED() {\n    return this.globalTransportInitialized_;\n  }\n\n  /**\n   * @param repoInfo - Metadata around the namespace we're connecting to\n   */\n  constructor(repoInfo: RepoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  private initTransports_(repoInfo: RepoInfo) {\n    const isWebSocketsAvailable: boolean =\n      WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection =\n      isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\n          \"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\"\n        );\n      }\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = (this.transports_ = [] as TransportConstructor[]);\n      for (const transport of TransportManager.ALL_TRANSPORTS) {\n        if (transport && transport['isAvailable']()) {\n          transports.push(transport);\n        }\n      }\n      TransportManager.globalTransportInitialized_ = true;\n    }\n  }\n\n  /**\n   * @returns The constructor for the initial transport to use\n   */\n  initialTransport(): TransportConstructor {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n\n  /**\n   * @returns The constructor for the next transport, or null\n   */\n  upgradeTransport(): TransportConstructor | null {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { Indexable } from '../core/util/misc';\nimport {\n  error,\n  logWrapper,\n  requireKey,\n  setTimeoutNonBlocking,\n  warn\n} from '../core/util/util';\n\nimport { PROTOCOL_VERSION } from './Constants';\nimport { Transport, TransportConstructor } from './Transport';\nimport { TransportManager } from './TransportManager';\n\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\n\nconst enum RealtimeState {\n  CONNECTING,\n  CONNECTED,\n  DISCONNECTED\n}\n\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\n\nconst SERVER_HELLO = 'h';\n\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n */\nexport class Connection {\n  connectionCount = 0;\n  pendingDataMessages: unknown[] = [];\n  sessionId: string;\n\n  private conn_: Transport;\n  private healthyTimeout_: number;\n  private isHealthy_: boolean;\n  private log_: (...args: unknown[]) => void;\n  private primaryResponsesRequired_: number;\n  private rx_: Transport;\n  private secondaryConn_: Transport;\n  private secondaryResponsesRequired_: number;\n  private state_ = RealtimeState.CONNECTING;\n  private transportManager_: TransportManager;\n  private tx_: Transport;\n\n  /**\n   * @param id - an id for this connection\n   * @param repoInfo_ - the info for the endpoint to connect to\n   * @param applicationId_ - the Firebase App ID for this project\n   * @param appCheckToken_ - The App Check Token for this device.\n   * @param authToken_ - The auth token for this session.\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n   */\n  constructor(\n    public id: string,\n    private repoInfo_: RepoInfo,\n    private applicationId_: string | undefined,\n    private appCheckToken_: string | undefined,\n    private authToken_: string | undefined,\n    private onMessage_: (a: {}) => void,\n    private onReady_: (a: number, b: string) => void,\n    private onDisconnect_: () => void,\n    private onKill_: (a: string) => void,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n\n  /**\n   * Starts a connection attempt\n   */\n  private start_(): void {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      null,\n      this.lastSessionId\n    );\n\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n\n    /*\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n     * still have the context of your originating frame.\n     */\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n\n    const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n        if (!this.isHealthy_) {\n          if (\n            this.conn_ &&\n            this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has received ' +\n                this.conn_.bytesReceived +\n                ' bytes.  Marking connection healthy.'\n            );\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (\n            this.conn_ &&\n            this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has sent ' +\n                this.conn_.bytesSent +\n                ' bytes.  Leaving connection alive.'\n            );\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, Math.floor(healthyTimeoutMS)) as any;\n    }\n  }\n\n  private nextTransportId_(): string {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n\n  private disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n\n  private connReceiver_(conn: Transport) {\n    return (message: Indexable) => {\n      if (this.state_ !== RealtimeState.DISCONNECTED) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n\n  /**\n   * @param dataMsg - An arbitrary data message to be sent to the server\n   */\n  sendRequest(dataMsg: object) {\n    // wrap in a data message envelope and send it on\n    const msg = { t: 'd', d: dataMsg };\n    this.sendData_(msg);\n  }\n\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_(\n        'cleaning up and promoting a connection: ' + this.secondaryConn_.connId\n      );\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  }\n\n  private onSecondaryControl_(controlData: { [k: string]: unknown }) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE] as string;\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (\n          this.tx_ === this.secondaryConn_ ||\n          this.rx_ === this.secondaryConn_\n        ) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n\n  private onSecondaryMessageReceived_(parsedData: Indexable) {\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onSecondaryControl_(data as Indexable);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n\n  private upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\n\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\n    this.tx_ = this.secondaryConn_;\n\n    this.tryCleanupConnection();\n  }\n\n  private onPrimaryMessageReceived_(parsedData: { [k: string]: unknown }) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onControl_(data as { [k: string]: unknown });\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n\n  private onDataMessage_(message: unknown) {\n    this.onPrimaryResponse_();\n\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  }\n\n  private onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n\n  private onControl_(controlData: { [k: string]: unknown }) {\n    const cmd: string = requireKey(MESSAGE_TYPE, controlData) as string;\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        const handshakePayload = {\n          ...(payload as {\n            ts: number;\n            v: string;\n            h: string;\n            s: string;\n          })\n        };\n        if (this.repoInfo_.isUsingEmulator) {\n          // Upon connecting, the emulator will pass the hostname that it's aware of, but we prefer the user's set hostname via `connectDatabaseEmulator` over what the emulator passes.\n          handshakePayload.h = this.repoInfo_.host;\n        }\n        this.onHandshake_(handshakePayload);\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload as string);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload as string);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n\n  /**\n   * @param handshake - The handshake data returned from the server\n   */\n  private onHandshake_(handshake: {\n    ts: number;\n    v: string;\n    h: string;\n    s: string;\n  }): void {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.host = host;\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ === RealtimeState.CONNECTING) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  }\n\n  private tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n\n  private startUpgrade_(conn: TransportConstructor) {\n    this.secondaryConn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      this.sessionId\n    );\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ =\n      conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n\n  private onReset_(host: string) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.host = host;\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === RealtimeState.CONNECTED) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n\n  private onConnectionEstablished_(conn: Transport, timestamp: number) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = RealtimeState.CONNECTED;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n\n  private sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === RealtimeState.CONNECTED) {\n      this.log_('sending ping on primary.');\n      this.sendData_({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n\n  /**\n   * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\n   * we should flush the host cache\n   */\n  private onConnectionLost_(everConnected: boolean) {\n    this.conn_ = null;\n\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === RealtimeState.CONNECTING) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === RealtimeState.CONNECTED) {\n      this.log_('Realtime connection lost.');\n    }\n\n    this.close();\n  }\n\n  private onConnectionShutdown_(reason: string) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n\n    this.close();\n  }\n\n  private sendData_(data: object) {\n    if (this.state_ !== RealtimeState.CONNECTED) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n\n  /**\n   * Cleans up this connection, calling the appropriate callbacks\n   */\n  close() {\n    if (this.state_ !== RealtimeState.DISCONNECTED) {\n      this.log_('Closing realtime connection.');\n      this.state_ = RealtimeState.DISCONNECTED;\n\n      this.closeConnections_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  private closeConnections_() {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { QueryContext } from './view/EventRegistration';\n\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nexport abstract class ServerActions {\n  abstract listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ): void;\n\n  /**\n   * Remove a listen.\n   */\n  abstract unlisten(query: QueryContext, tag: number | null): void;\n\n  /**\n   * Get the server value satisfying this query.\n   */\n  abstract get(query: QueryContext): Promise<string>;\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {}\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * Refreshes the auth token for the current connection.\n   * @param token - The authentication token\n   */\n  refreshAuthToken(token: string) {}\n\n  /**\n   * Refreshes the app check token for the current connection.\n   * @param token The app check token\n   */\n  refreshAppCheckToken(token: string) {}\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  reportStats(stats: { [k: string]: unknown }) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nexport abstract class EventEmitter {\n  private listeners_: {\n    [eventType: string]: Array<{\n      callback(...args: unknown[]): void;\n      context: unknown;\n    }>;\n  } = {};\n\n  constructor(private allowedEvents_: string[]) {\n    assert(\n      Array.isArray(allowedEvents_) && allowedEvents_.length > 0,\n      'Requires a non-empty array'\n    );\n  }\n\n  /**\n   * To be overridden by derived classes in order to fire an initial event when\n   * somebody subscribes for data.\n   *\n   * @returns {Array.<*>} Array of parameters to trigger initial event with.\n   */\n  abstract getInitialEvent(eventType: string): unknown[];\n\n  /**\n   * To be called by derived classes to trigger events.\n   */\n  protected trigger(eventType: string, ...varArgs: unknown[]) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  }\n\n  on(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({ callback, context });\n\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n\n  off(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (\n        listeners[i].callback === callback &&\n        (!context || context === listeners[i].context)\n      ) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  private validateEventType_(eventType: string) {\n    assert(\n      this.allowedEvents_.find(et => {\n        return et === eventType;\n      }),\n      'Unknown event: ' + eventType\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isMobileCordova } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n */\nexport class OnlineMonitor extends EventEmitter {\n  private online_ = true;\n\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n\n  constructor() {\n    super(['online']);\n\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window.addEventListener !== 'undefined' &&\n      !isMobileCordova()\n    ) {\n      window.addEventListener(\n        'online',\n        () => {\n          if (!this.online_) {\n            this.online_ = true;\n            this.trigger('online', true);\n          }\n        },\n        false\n      );\n\n      window.addEventListener(\n        'offline',\n        () => {\n          if (this.online_) {\n            this.online_ = false;\n            this.trigger('online', false);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n\n  currentlyOnline(): boolean {\n    return this.online_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringLength } from '@firebase/util';\n\nimport { nameCompare } from './util';\n\n/** Maximum key depth. */\nconst MAX_PATH_DEPTH = 32;\n\n/** Maximum number of (UTF8) bytes in a Firebase path. */\nconst MAX_PATH_LENGTH_BYTES = 768;\n\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\n\nexport class Path {\n  pieces_: string[];\n  pieceNum_: number;\n\n  /**\n   * @param pathOrString - Path string to parse, or another path, or the raw\n   * tokens array\n   */\n  constructor(pathOrString: string | string[], pieceNum?: number) {\n    if (pieceNum === void 0) {\n      this.pieces_ = (pathOrString as string).split('/');\n\n      // Remove empty pieces.\n      let copyTo = 0;\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString as string[];\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  toString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n\n    return pathString || '/';\n  }\n}\n\nexport function newEmptyPath(): Path {\n  return new Path('');\n}\n\nexport function pathGetFront(path: Path): string | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  return path.pieces_[path.pieceNum_];\n}\n\n/**\n * @returns The number of segments in this path\n */\nexport function pathGetLength(path: Path): number {\n  return path.pieces_.length - path.pieceNum_;\n}\n\nexport function pathPopFront(path: Path): Path {\n  let pieceNum = path.pieceNum_;\n  if (pieceNum < path.pieces_.length) {\n    pieceNum++;\n  }\n  return new Path(path.pieces_, pieceNum);\n}\n\nexport function pathGetBack(path: Path): string | null {\n  if (path.pieceNum_ < path.pieces_.length) {\n    return path.pieces_[path.pieces_.length - 1];\n  }\n\n  return null;\n}\n\nexport function pathToUrlEncodedString(path: Path): string {\n  let pathString = '';\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    if (path.pieces_[i] !== '') {\n      pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\n    }\n  }\n\n  return pathString || '/';\n}\n\n/**\n * Shallow copy of the parts of the path.\n *\n */\nexport function pathSlice(path: Path, begin: number = 0): string[] {\n  return path.pieces_.slice(path.pieceNum_ + begin);\n}\n\nexport function pathParent(path: Path): Path | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  return new Path(pieces, 0);\n}\n\nexport function pathChild(path: Path, childPathObj: string | Path): Path {\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  if (childPathObj instanceof Path) {\n    for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n      pieces.push(childPathObj.pieces_[i]);\n    }\n  } else {\n    const childPieces = childPathObj.split('/');\n    for (let i = 0; i < childPieces.length; i++) {\n      if (childPieces[i].length > 0) {\n        pieces.push(childPieces[i]);\n      }\n    }\n  }\n\n  return new Path(pieces, 0);\n}\n\n/**\n * @returns True if there are no segments in this path\n */\nexport function pathIsEmpty(path: Path): boolean {\n  return path.pieceNum_ >= path.pieces_.length;\n}\n\n/**\n * @returns The path from outerPath to innerPath\n */\nexport function newRelativePath(outerPath: Path, innerPath: Path): Path {\n  const outer = pathGetFront(outerPath),\n    inner = pathGetFront(innerPath);\n  if (outer === null) {\n    return innerPath;\n  } else if (outer === inner) {\n    return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\n  } else {\n    throw new Error(\n      'INTERNAL ERROR: innerPath (' +\n        innerPath +\n        ') is not within ' +\n        'outerPath (' +\n        outerPath +\n        ')'\n    );\n  }\n}\n\n/**\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\n */\nexport function pathCompare(left: Path, right: Path): number {\n  const leftKeys = pathSlice(left, 0);\n  const rightKeys = pathSlice(right, 0);\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n    const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n  if (leftKeys.length === rightKeys.length) {\n    return 0;\n  }\n  return leftKeys.length < rightKeys.length ? -1 : 1;\n}\n\n/**\n * @returns true if paths are the same.\n */\nexport function pathEquals(path: Path, other: Path): boolean {\n  if (pathGetLength(path) !== pathGetLength(other)) {\n    return false;\n  }\n\n  for (\n    let i = path.pieceNum_, j = other.pieceNum_;\n    i <= path.pieces_.length;\n    i++, j++\n  ) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * @returns True if this path is a parent of (or the same as) other\n */\nexport function pathContains(path: Path, other: Path): boolean {\n  let i = path.pieceNum_;\n  let j = other.pieceNum_;\n  if (pathGetLength(path) > pathGetLength(other)) {\n    return false;\n  }\n  while (i < path.pieces_.length) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n    ++i;\n    ++j;\n  }\n  return true;\n}\n\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nexport class ValidationPath {\n  parts_: string[];\n  /** Initialize to number of '/' chars needed in path. */\n  byteLength_: number;\n\n  /**\n   * @param path - Initial Path.\n   * @param errorPrefix_ - Prefix for any error messages.\n   */\n  constructor(path: Path, public errorPrefix_: string) {\n    this.parts_ = pathSlice(path, 0);\n    /** Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    validationPathCheckValid(this);\n  }\n}\n\nexport function validationPathPush(\n  validationPath: ValidationPath,\n  child: string\n): void {\n  // Count the needed '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ += 1;\n  }\n  validationPath.parts_.push(child);\n  validationPath.byteLength_ += stringLength(child);\n  validationPathCheckValid(validationPath);\n}\n\nexport function validationPathPop(validationPath: ValidationPath): void {\n  const last = validationPath.parts_.pop();\n  validationPath.byteLength_ -= stringLength(last);\n  // Un-count the previous '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ -= 1;\n  }\n}\n\nfunction validationPathCheckValid(validationPath: ValidationPath): void {\n  if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'has a key path longer than ' +\n        MAX_PATH_LENGTH_BYTES +\n        ' bytes (' +\n        validationPath.byteLength_ +\n        ').'\n    );\n  }\n  if (validationPath.parts_.length > MAX_PATH_DEPTH) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'path specified exceeds the maximum depth that can be written (' +\n        MAX_PATH_DEPTH +\n        ') or object contains a cycle ' +\n        validationPathToErrorString(validationPath)\n    );\n  }\n}\n\n/**\n * String for use in error messages - uses '.' notation for path.\n */\nexport function validationPathToErrorString(\n  validationPath: ValidationPath\n): string {\n  if (validationPath.parts_.length === 0) {\n    return '';\n  }\n  return \"in property '\" + validationPath.parts_.join('.') + \"'\";\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\ndeclare const document: Document;\n\nexport class VisibilityMonitor extends EventEmitter {\n  private visible_: boolean;\n\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n\n  constructor() {\n    super(['visible']);\n    let hidden: string;\n    let visibilityChange: string;\n    if (\n      typeof document !== 'undefined' &&\n      typeof document.addEventListener !== 'undefined'\n    ) {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(\n        visibilityChange,\n        () => {\n          const visible = !document[hidden];\n          if (visible !== this.visible_) {\n            this.visible_ = visible;\n            this.trigger('visible', visible);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  Deferred,\n  isEmpty,\n  isMobileCordova,\n  isNodeSdk,\n  isReactNative,\n  isValidFormat,\n  safeGet,\n  stringify,\n  isAdmin\n} from '@firebase/util';\n\nimport { Connection } from '../realtime/Connection';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { OnlineMonitor } from './util/OnlineMonitor';\nimport { Path } from './util/Path';\nimport { error, log, logWrapper, warn, ObjectToUniqueKey } from './util/util';\nimport { VisibilityMonitor } from './util/VisibilityMonitor';\nimport { SDK_VERSION } from './version';\nimport { QueryContext } from './view/EventRegistration';\n\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_TOKEN_THRESHOLD = 3;\n\ninterface ListenSpec {\n  onComplete(s: string, p?: unknown): void;\n\n  hashFn(): string;\n\n  query: QueryContext;\n  tag: number | null;\n}\n\ninterface OnDisconnectRequest {\n  pathString: string;\n  action: string;\n  data: unknown;\n  onComplete?: (a: string, b: string) => void;\n}\n\ninterface OutstandingPut {\n  action: string;\n  request: object;\n  queued?: boolean;\n  onComplete: (a: string, b?: string) => void;\n}\n\ninterface OutstandingGet {\n  request: object;\n  onComplete: (response: { [k: string]: unknown }) => void;\n}\n\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nexport class PersistentConnection extends ServerActions {\n  // Used for diagnostic logging.\n  id = PersistentConnection.nextPersistentConnectionId_++;\n  private log_ = logWrapper('p:' + this.id + ':');\n\n  private interruptReasons_: { [reason: string]: boolean } = {};\n  private readonly listens: Map<\n    /* path */ string,\n    Map</* queryId */ string, ListenSpec>\n  > = new Map();\n  private outstandingPuts_: OutstandingPut[] = [];\n  private outstandingGets_: OutstandingGet[] = [];\n  private outstandingPutCount_ = 0;\n  private outstandingGetCount_ = 0;\n  private onDisconnectRequestQueue_: OnDisconnectRequest[] = [];\n  private connected_ = false;\n  private reconnectDelay_ = RECONNECT_MIN_DELAY;\n  private maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n  private securityDebugCallback_: ((a: object) => void) | null = null;\n  lastSessionId: string | null = null;\n\n  private establishConnectionTimer_: number | null = null;\n\n  private visible_: boolean = false;\n\n  // Before we get connected, we keep a queue of pending messages to send.\n  private requestCBHash_: { [k: number]: (a: unknown) => void } = {};\n  private requestNumber_ = 0;\n\n  private realtime_: {\n    sendRequest(a: object): void;\n    close(): void;\n  } | null = null;\n\n  private authToken_: string | null = null;\n  private appCheckToken_: string | null = null;\n  private forceTokenRefresh_ = false;\n  private invalidAuthTokenCount_ = 0;\n  private invalidAppCheckTokenCount_ = 0;\n\n  private firstConnection_ = true;\n  private lastConnectionAttemptTime_: number | null = null;\n  private lastConnectionEstablishedTime_: number | null = null;\n\n  private static nextPersistentConnectionId_ = 0;\n\n  /**\n   * Counter for number of connections created. Mainly used for tagging in the logs\n   */\n  private static nextConnectionId_ = 0;\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param applicationId_ - The Firebase App ID for this project\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private applicationId_: string,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private onConnectStatus_: (a: boolean) => void,\n    private onServerInfoUpdate_: (a: unknown) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider,\n    private authOverride_?: object | null\n  ) {\n    super();\n\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error(\n        'Auth override specified in options, but not supported on non Node.js platforms'\n      );\n    }\n\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n\n  protected sendRequest(\n    action: string,\n    body: unknown,\n    onResponse?: (a: unknown) => void\n  ) {\n    const curReqNum = ++this.requestNumber_;\n\n    const msg = { r: curReqNum, a: action, b: body };\n    this.log_(stringify(msg));\n    assert(\n      this.connected_,\n      \"sendRequest call when we're not connected not allowed.\"\n    );\n    this.realtime_.sendRequest(msg);\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n\n  get(query: QueryContext): Promise<string> {\n    this.initConnection_();\n\n    const deferred = new Deferred<string>();\n    const request = {\n      p: query._path.toString(),\n      q: query._queryObject\n    };\n    const outstandingGet = {\n      action: 'g',\n      request,\n      onComplete: (message: { [k: string]: unknown }) => {\n        const payload = message['d'] as string;\n        if (message['s'] === 'ok') {\n          deferred.resolve(payload);\n        } else {\n          deferred.reject(payload);\n        }\n      }\n    };\n    this.outstandingGets_.push(outstandingGet);\n    this.outstandingGetCount_++;\n    const index = this.outstandingGets_.length - 1;\n\n    if (this.connected_) {\n      this.sendGet_(index);\n    }\n\n    return deferred.promise;\n  }\n\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    this.initConnection_();\n\n    const queryId = query._queryIdentifier;\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'listen() called for non-default but complete query'\n    );\n    assert(\n      !this.listens.get(pathString)!.has(queryId),\n      `listen() called twice for same path/queryId.`\n    );\n    const listenSpec: ListenSpec = {\n      onComplete,\n      hashFn: currentHashFn,\n      query,\n      tag\n    };\n    this.listens.get(pathString)!.set(queryId, listenSpec);\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n\n  private sendGet_(index: number) {\n    const get = this.outstandingGets_[index];\n    this.sendRequest('g', get.request, (message: { [k: string]: unknown }) => {\n      delete this.outstandingGets_[index];\n      this.outstandingGetCount_--;\n      if (this.outstandingGetCount_ === 0) {\n        this.outstandingGets_ = [];\n      }\n      if (get.onComplete) {\n        get.onComplete(message);\n      }\n    });\n  }\n\n  private sendListen_(listenSpec: ListenSpec) {\n    const query = listenSpec.query;\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n\n    const action = 'q';\n\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) {\n      req['q'] = query._queryObject;\n      req['t'] = listenSpec.tag;\n    }\n\n    req[/*hash*/ 'h'] = listenSpec.hashFn();\n\n    this.sendRequest(action, req, (message: { [k: string]: unknown }) => {\n      const payload: unknown = message[/*data*/ 'd'];\n      const status = message[/*status*/ 's'] as string;\n\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n\n      const currentListenSpec =\n        this.listens.get(pathString) &&\n        this.listens.get(pathString)!.get(queryId);\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n\n  private static warnOnListenWarnings_(payload: unknown, query: QueryContext) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const warnings = safeGet(payload as any, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec =\n          '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\n        const indexPath = query._path.toString();\n        warn(\n          `Using an unspecified index. Your data will be downloaded and ` +\n            `filtered on the client. Consider adding ${indexSpec} at ` +\n            `${indexPath} to your security rules for better performance.`\n        );\n      }\n    }\n  }\n\n  refreshAuthToken(token: string) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n\n  private reduceReconnectDelayIfAdminCredential_(credential: string) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_(\n        'Admin auth credential detected.  Reducing max reconnect time.'\n      );\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n\n  refreshAppCheckToken(token: string | null) {\n    this.appCheckToken_ = token;\n    this.log_('App check token refreshed');\n    if (this.appCheckToken_) {\n      this.tryAppCheck();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us.\n      //If we're not connected, simply delete the credential so we dont become\n      // authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unappeck', {}, () => {});\n      }\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n   * a auth revoked (the connection is closed).\n   */\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData: { [k: string]: unknown } = { cred: token };\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n      this.sendRequest(\n        authMethod,\n        requestData,\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n\n          if (this.authToken_ === token) {\n            if (status === 'ok') {\n              this.invalidAuthTokenCount_ = 0;\n            } else {\n              // Triggers reconnect and force refresh for auth token\n              this.onAuthRevoked_(status, data);\n            }\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given token. If the authentication\n   * attempt fails, it's triggered like the token was revoked (the connection is\n   * closed).\n   */\n  tryAppCheck() {\n    if (this.connected_ && this.appCheckToken_) {\n      this.sendRequest(\n        'appcheck',\n        { 'token': this.appCheckToken_ },\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n          if (status === 'ok') {\n            this.invalidAppCheckTokenCount_ = 0;\n          } else {\n            this.onAppCheckRevoked_(status, data);\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  unlisten(query: QueryContext, tag: number | null) {\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'unlisten() called for non-default but complete query'\n    );\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\n    }\n  }\n\n  private sendUnlisten_(\n    pathString: string,\n    queryId: string,\n    queryObj: object,\n    tag: number | null\n  ) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n    const action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  }\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n\n  private sendOnDisconnect_(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string) => void\n  ) {\n    const request = { /*path*/ p: pathString, /*data*/ d: data };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, (response: { [k: string]: unknown }) => {\n      if (onComplete) {\n        setTimeout(() => {\n          onComplete(\n            response[/*status*/ 's'] as string,\n            response[/* data */ 'd'] as string\n          );\n        }, Math.floor(0));\n      }\n    });\n  }\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n\n  putInternal(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.initConnection_();\n\n    const request: { [k: string]: unknown } = {\n      /*path*/ p: pathString,\n      /*data*/ d: data\n    };\n\n    if (hash !== undefined) {\n      request[/*hash*/ 'h'] = hash;\n    }\n\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n\n  private sendPut_(index: number) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n\n    this.sendRequest(action, request, (message: { [k: string]: unknown }) => {\n      this.log_(action + ' response', message);\n\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--;\n\n      // Clean up array occasionally.\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n\n      if (onComplete) {\n        onComplete(\n          message[/*status*/ 's'] as string,\n          message[/* data */ 'd'] as string\n        );\n      }\n    });\n  }\n\n  reportStats(stats: { [k: string]: unknown }) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = { /*counters*/ c: stats };\n      this.log_('reportStats', request);\n\n      this.sendRequest(/*stats*/ 's', request, result => {\n        const status = result[/*status*/ 's'];\n        if (status !== 'ok') {\n          const errorReason = result[/* data */ 'd'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n\n  private onDataMessage_(message: { [k: string]: unknown }) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'] as string;\n      const onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/ 'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'] as string, message['b'] as {});\n    }\n  }\n\n  private onDataPush_(action: string, body: { [k: string]: unknown }) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge*/ false,\n        body['t'] as number\n      );\n    } else if (action === 'm') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge=*/ true,\n        body['t'] as number\n      );\n    } else if (action === 'c') {\n      this.onListenRevoked_(\n        body[/*path*/ 'p'] as string,\n        body[/*query*/ 'q'] as unknown[]\n      );\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'apc') {\n      this.onAppCheckRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error(\n        'Unrecognized action received from server: ' +\n          stringify(action) +\n          '\\nAre you using the latest client?'\n      );\n    }\n  }\n\n  private onReady_(timestamp: number, sessionId: string) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n\n  private scheduleConnect_(timeout: number) {\n    assert(\n      !this.realtime_,\n      \"Scheduling a connect when we're already connected/ing?\"\n    );\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    }\n\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(timeout)) as any;\n  }\n\n  private initConnection_() {\n    if (!this.realtime_ && this.firstConnection_) {\n      this.scheduleConnect_(0);\n    }\n  }\n\n  private onVisible_(visible: boolean) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (\n      visible &&\n      !this.visible_ &&\n      this.reconnectDelay_ === this.maxReconnectDelay_\n    ) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    this.visible_ = visible;\n  }\n\n  private onOnline_(online: boolean) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n\n  private onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n\n    // Clear out the pending requests.\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded =\n          new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      const timeSinceLastConnectAttempt =\n        new Date().getTime() - this.lastConnectionAttemptTime_;\n      let reconnectDelay = Math.max(\n        0,\n        this.reconnectDelay_ - timeSinceLastConnectAttempt\n      );\n      reconnectDelay = Math.random() * reconnectDelay;\n\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(\n        this.maxReconnectDelay_,\n        this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER\n      );\n    }\n    this.onConnectStatus_(false);\n  }\n\n  private async establishConnection_() {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection: Connection | null = null;\n      const closeFn = function () {\n        if (connection) {\n          connection.close();\n        } else {\n          canceled = true;\n          onDisconnect();\n        }\n      };\n      const sendRequestFn = function (msg: object) {\n        assert(\n          connection,\n          \"sendRequest call when we're not connected not allowed.\"\n        );\n        connection.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn,\n        sendRequest: sendRequestFn\n      };\n\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n\n      try {\n        // First fetch auth and app check token, and establish connection after\n        // fetching the token was successful\n        const [authToken, appCheckToken] = await Promise.all([\n          this.authTokenProvider_.getToken(forceRefresh),\n          this.appCheckTokenProvider_.getToken(forceRefresh)\n        ]);\n\n        if (!canceled) {\n          log('getToken() completed. Creating connection.');\n          this.authToken_ = authToken && authToken.accessToken;\n          this.appCheckToken_ = appCheckToken && appCheckToken.token;\n          connection = new Connection(\n            connId,\n            this.repoInfo_,\n            this.applicationId_,\n            this.appCheckToken_,\n            this.authToken_,\n            onDataMessage,\n            onReady,\n            onDisconnect,\n            /* onKill= */ reason => {\n              warn(reason + ' (' + this.repoInfo_.toString() + ')');\n              this.interrupt(SERVER_KILL_INTERRUPT_REASON);\n            },\n            lastSessionId\n          );\n        } else {\n          log('getToken() completed but was canceled');\n        }\n      } catch (error) {\n        this.log_('Failed to get token: ' + error);\n        if (!canceled) {\n          if (this.repoInfo_.nodeAdmin) {\n            // This may be a critical error for the Admin Node.js SDK, so log a warning.\n            // But getToken() may also just have temporarily failed, so we still want to\n            // continue retrying.\n            warn(error);\n          }\n          closeFn();\n        }\n      }\n    }\n  }\n\n  interrupt(reason: string) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n\n  resume(reason: string) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n\n  private handleTimestamp_(timestamp: number) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({ serverTimeOffset: delta });\n  }\n\n  private cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n      if (put && /*hash*/ 'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    }\n\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  }\n\n  private onListenRevoked_(pathString: string, query?: unknown[]) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  }\n\n  private removeListen_(pathString: string, queryId: string): ListenSpec {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n    let listen;\n    if (this.listens.has(normalizedPathString)) {\n      const map = this.listens.get(normalizedPathString)!;\n      listen = map.get(queryId);\n      map.delete(queryId);\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n    return listen;\n  }\n\n  private onAuthRevoked_(statusCode: string, explanation: string) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onAppCheckRevoked_(statusCode: string, explanation: string) {\n    log('App check token revoked: ' + statusCode + '/' + explanation);\n    this.appCheckToken_ = null;\n    this.forceTokenRefresh_ = true;\n    // Note: We don't close the connection as the developer may not have\n    // enforcement enabled. The backend closes connections with enforcements.\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAppCheckTokenCount_++;\n      if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        this.appCheckTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onSecurityDebugPacket_(body: { [k: string]: unknown }) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log(\n          'FIREBASE: ' + (body['msg'] as string).replace('\\n', '\\nFIREBASE: ')\n        );\n      }\n    }\n  }\n\n  private restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n    this.tryAppCheck();\n\n    // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n    for (const queries of this.listens.values()) {\n      for (const listenSpec of queries.values()) {\n        this.sendListen_(listenSpec);\n      }\n    }\n\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(\n        request.action,\n        request.pathString,\n        request.data,\n        request.onComplete\n      );\n    }\n\n    for (let i = 0; i < this.outstandingGets_.length; i++) {\n      if (this.outstandingGets_[i]) {\n        this.sendGet_(i);\n      }\n    }\n  }\n\n  /**\n   * Sends client stats for first connection\n   */\n  private sendConnectStats_() {\n    const stats: { [k: string]: number } = {};\n\n    let clientName = 'js';\n    if (isNodeSdk()) {\n      if (this.repoInfo_.nodeAdmin) {\n        clientName = 'admin_node';\n      } else {\n        clientName = 'node';\n      }\n    }\n\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n    this.reportStats(stats);\n  }\n\n  private shouldReconnect_(): boolean {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\nimport { Index } from './indexes/Index';\n\n/**\n * Node is an interface defining the common functionality for nodes in\n * a DataSnapshot.\n *\n * @interface\n */\nexport interface Node {\n  /**\n   * Whether this node is a leaf node.\n   * @returns Whether this is a leaf node.\n   */\n  isLeafNode(): boolean;\n\n  /**\n   * Gets the priority of the node.\n   * @returns The priority of the node.\n   */\n  getPriority(): Node;\n\n  /**\n   * Returns a duplicate node with the new priority.\n   * @param newPriorityNode - New priority to set for the node.\n   * @returns Node with new priority.\n   */\n  updatePriority(newPriorityNode: Node): Node;\n\n  /**\n   * Returns the specified immediate child, or null if it doesn't exist.\n   * @param childName - The name of the child to retrieve.\n   * @returns The retrieved child, or an empty node.\n   */\n  getImmediateChild(childName: string): Node;\n\n  /**\n   * Returns a child by path, or null if it doesn't exist.\n   * @param path - The path of the child to retrieve.\n   * @returns The retrieved child or an empty node.\n   */\n  getChild(path: Path): Node;\n\n  /**\n   * Returns the name of the child immediately prior to the specified childNode, or null.\n   * @param childName - The name of the child to find the predecessor of.\n   * @param childNode - The node to find the predecessor of.\n   * @param index - The index to use to determine the predecessor\n   * @returns The name of the predecessor child, or null if childNode is the first child.\n   */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string | null;\n\n  /**\n   * Returns a duplicate node, with the specified immediate child updated.\n   * Any value in the node will be removed.\n   * @param childName - The name of the child to update.\n   * @param newChildNode - The new child node\n   * @returns The updated node.\n   */\n  updateImmediateChild(childName: string, newChildNode: Node): Node;\n\n  /**\n   * Returns a duplicate node, with the specified child updated.  Any value will\n   * be removed.\n   * @param path - The path of the child to update.\n   * @param newChildNode - The new child node, which may be an empty node\n   * @returns The updated node.\n   */\n  updateChild(path: Path, newChildNode: Node): Node;\n\n  /**\n   * True if the immediate child specified exists\n   */\n  hasChild(childName: string): boolean;\n\n  /**\n   * @returns True if this node has no value or children.\n   */\n  isEmpty(): boolean;\n\n  /**\n   * @returns The number of children of this node.\n   */\n  numChildren(): number;\n\n  /**\n   * Calls action for each child.\n   * @param action - Action to be called for\n   * each child.  It's passed the child name and the child node.\n   * @returns The first truthy value return by action, or the last falsey one\n   */\n  forEachChild(index: Index, action: (a: string, b: Node) => void): unknown;\n\n  /**\n   * @param exportFormat - True for export format (also wire protocol format).\n   * @returns Value of this node as JSON.\n   */\n  val(exportFormat?: boolean): unknown;\n\n  /**\n   * @returns hash representing the node contents.\n   */\n  hash(): string;\n\n  /**\n   * @param other - Another node\n   * @returns -1 for less than, 0 for equal, 1 for greater than other\n   */\n  compareTo(other: Node): number;\n\n  /**\n   * @returns Whether or not this snapshot equals other\n   */\n  equals(other: Node): boolean;\n\n  /**\n   * @returns This node, with the specified index now available\n   */\n  withIndex(indexDefinition: Index): Node;\n\n  isIndexed(indexDefinition: Index): boolean;\n}\n\nexport class NamedNode {\n  constructor(public name: string, public node: Node) {}\n\n  static Wrap(name: string, node: Node) {\n    return new NamedNode(name, node);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { ChildrenNode } from '../ChildrenNode';\nimport { Node, NamedNode } from '../Node';\n\nimport { Index } from './Index';\n\nlet __EMPTY_NODE: ChildrenNode;\n\nexport class KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    return nameCompare(a.name, b.name);\n  }\n  isDefinedOn(node: Node): boolean {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return false; // The key for a node never changes.\n  }\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n\n  makePost(indexValue: string, name: string): NamedNode {\n    assert(\n      typeof indexValue === 'string',\n      'KeyIndex indexValue must always be a string.'\n    );\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.key';\n  }\n}\n\nexport const KEY_INDEX = new KeyIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Comparator } from '../../util/SortedMap';\nimport { MIN_NAME } from '../../util/util';\nimport { Node, NamedNode } from '../Node';\n\nexport abstract class Index {\n  abstract compare(a: NamedNode, b: NamedNode): number;\n\n  abstract isDefinedOn(node: Node): boolean;\n\n  /**\n   * @returns A standalone comparison function for\n   * this index\n   */\n  getCompare(): Comparator<NamedNode> {\n    return this.compare.bind(this);\n  }\n\n  /**\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n   *\n   *\n   * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n\n  /**\n   * @returns a node wrapper that will sort equal to or less than\n   * any other node wrapper, using this index\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @returns a node wrapper that will sort greater than or equal to\n   * any other node wrapper, using this index\n   */\n  abstract maxPost(): NamedNode;\n\n  abstract makePost(indexValue: unknown, name: string): NamedNode;\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  abstract toString(): string;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379\\@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\n// TODO: There are some improvements I'd like to make to improve memory / perf:\n//  * Create two prototypes, LLRedNode and LLBlackNode, instead of storing a\n//    color property in every node.\n// TODO: It would also be good (and possibly necessary) to create a base\n// interface for LLRBNode and LLRBEmptyNode.\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\n/**\n * An iterator over an LLRBNode.\n */\nexport class SortedMapIterator<K, V, T> {\n  private nodeStack_: Array<LLRBNode<K, V> | LLRBEmptyNode<K, V>> = [];\n\n  /**\n   * @param node - Node to iterate.\n   * @param isReverse_ - Whether or not to iterate in reverse\n   */\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    private isReverse_: boolean,\n    private resultGenerator_: ((k: K, v: V) => T) | null = null\n  ) {\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      node = node as LLRBNode<K, V>;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    let node = this.nodeStack_.pop();\n    let result: T;\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = { key: node.key, value: node.value } as unknown as T;\n    }\n\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack_.length > 0;\n  }\n\n  peek(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return { key: node.key, value: node.value } as unknown as T;\n    }\n  }\n}\n\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nexport class LLRBNode<K, V> {\n  color: boolean;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  /**\n   * @param key - Key associated with this node.\n   * @param value - Value associated with this node.\n   * @param color - Whether this node is red.\n   * @param left - Left child.\n   * @param right - Right child.\n   */\n  constructor(\n    public key: K,\n    public value: V,\n    color: boolean | null,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left =\n      left != null ? left : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n    this.right =\n      right != null ? right : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n  }\n\n  static RED = true;\n  static BLACK = false;\n\n  /**\n   * Returns a copy of the current node, optionally replacing pieces of it.\n   *\n   * @param key - New key for the node, or null.\n   * @param value - New value for the node, or null.\n   * @param color - New color for the node, or null.\n   * @param left - New left child for the node, or null.\n   * @param right - New right child for the node, or null.\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return this.left.count() + 1 + this.right.count();\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   *   node.  If it returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return (\n      this.left.inorderTraversal(action) ||\n      !!action(this.key, this.value) ||\n      this.right.inorderTraversal(action)\n    );\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return (\n      this.right.reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      this.left.reverseTraversal(action)\n    );\n  }\n\n  /**\n   * @returns The minimum node in the tree.\n   */\n  private min_(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min_();\n    }\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  minKey(): K {\n    return this.min_().key;\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  maxKey(): K {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  /**\n   * @param key - Key to insert.\n   * @param value - Value to insert.\n   * @param comparator - Comparator.\n   * @returns New tree, with the key/value added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns New tree, with the minimum key removed.\n   */\n  private removeMin_(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin_(), null);\n    return n.fixUp_();\n  }\n\n  /**\n   * @param key - The key of the item to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with the specified item removed.\n   */\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min_();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin_()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns Whether this is a RED node.\n   */\n  isRed_(): boolean {\n    return this.color;\n  }\n\n  /**\n   * @returns New tree after performing any needed rotations.\n   */\n  private fixUp_(): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedLeft.\n   */\n  private moveRedLeft_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight_()\n      );\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedRight.\n   */\n  private moveRedRight_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after rotateLeft.\n   */\n  private rotateLeft_(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns New tree, after rotateRight.\n   */\n  private rotateRight_(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns Newt ree, after colorFlip.\n   */\n  private colorFlip_(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  /**\n   * For testing.\n   *\n   * @returns True if all is well.\n   */\n  private checkMaxDepth_(): boolean {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n\n  check_(): number {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error(\n        'Red node has red child(' + this.key + ',' + this.value + ')'\n      );\n    }\n    if (this.right.isRed_()) {\n      throw new Error(\n        'Right child of (' + this.key + ',' + this.value + ') is red'\n      );\n    }\n    const blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n}\n\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nexport class LLRBEmptyNode<K, V> {\n  key: K;\n  value: V;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  color: boolean;\n\n  /**\n   * Returns a copy of the current node.\n   *\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key/value added.\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @param comparator - Comparator.\n   * @returns New tree, with item added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode(key, value, null);\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with item removed.\n   */\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return 0;\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return true;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return false;\n  }\n\n  minKey(): null {\n    return null;\n  }\n\n  maxKey(): null {\n    return null;\n  }\n\n  check_(): number {\n    return 0;\n  }\n\n  /**\n   * @returns Whether this node is red.\n   */\n  isRed_() {\n    return false;\n  }\n}\n\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nexport class SortedMap<K, V> {\n  /**\n   * Always use the same empty node, to reduce memory.\n   */\n  static EMPTY_NODE = new LLRBEmptyNode();\n\n  /**\n   * @param comparator_ - Key comparator.\n   * @param root_ - Optional root node for the map.\n   */\n  constructor(\n    private comparator_: Comparator<K>,\n    private root_:\n      | LLRBNode<K, V>\n      | LLRBEmptyNode<K, V> = SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>\n  ) {}\n\n  /**\n   * Returns a copy of the map, with the specified key/value added or replaced.\n   * (TODO: We should perhaps rename this method to 'put')\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @returns New map, with item added.\n   */\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .insert(key, value, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns a copy of the map, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @returns New map, with item removed.\n   */\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .remove(key, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns the value of the node with the given key, or null.\n   *\n   * @param key - The key to look up.\n   * @returns The value of the node with the given key, or null if the\n   * key doesn't exist.\n   */\n  get(key: K): V | null {\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\n   * @param key - The key to find the predecessor of\n   * @returns The predecessor key.\n   */\n  getPredecessorKey(key: K): K | null {\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error(\n      'Attempted to find predecessor key for a nonexistent key.  What gives?'\n    );\n  }\n\n  /**\n   * @returns True if the map is empty.\n   */\n  isEmpty(): boolean {\n    return this.root_.isEmpty();\n  }\n\n  /**\n   * @returns The total number of nodes in the map.\n   */\n  count(): number {\n    return this.root_.count();\n  }\n\n  /**\n   * @returns The minimum key in the map.\n   */\n  minKey(): K | null {\n    return this.root_.minKey();\n  }\n\n  /**\n   * @returns The maximum key in the map.\n   */\n  maxKey(): K | null {\n    return this.root_.maxKey();\n  }\n\n  /**\n   * Traverses the map in key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return this.root_.inorderTraversal(action);\n  }\n\n  /**\n   * Traverses the map in reverse key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns True if the traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return this.root_.reverseTraversal(action);\n  }\n\n  /**\n   * Returns an iterator over the SortedMap.\n   * @returns The iterator.\n   */\n  getIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getReverseIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n\n  getReverseIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { doubleToIEEE754String } from '../util/util';\n\nimport { Node } from './Node';\n\nlet MAX_NODE: Node;\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport const priorityHashText = function (priority: string | number): string {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n\n/**\n * Validates that a priority snapshot Node is valid.\n */\nexport const validatePriorityNode = function (priorityNode: Node) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(\n      typeof val === 'string' ||\n        typeof val === 'number' ||\n        (typeof val === 'object' && contains(val as Indexable, '.sv')),\n      'Priority must be a string or number.'\n    );\n  } else {\n    assert(\n      priorityNode === MAX_NODE || priorityNode.isEmpty(),\n      'priority of unexpected type.'\n    );\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(\n    priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(),\n    \"Priority nodes can't have a priority of their own.\"\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../util/util';\n\nimport { NamedNode } from './Node';\n\nexport function NAME_ONLY_COMPARATOR(left: NamedNode, right: NamedNode) {\n  return nameCompare(left.name, right.name);\n}\n\nexport function NAME_COMPARATOR(left: string, right: string) {\n  return nameCompare(left, right);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport {\n  Path,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\nimport { doubleToIEEE754String, sha1 } from '../util/util';\n\nimport { ChildrenNodeConstructor } from './ChildrenNode';\nimport { Index } from './indexes/Index';\nimport { Node } from './Node';\nimport { priorityHashText, validatePriorityNode } from './snap';\n\nlet __childrenNodeConstructor: ChildrenNodeConstructor;\n\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nexport class LeafNode implements Node {\n  static set __childrenNodeConstructor(val: ChildrenNodeConstructor) {\n    __childrenNodeConstructor = val;\n  }\n\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n\n  /**\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n   * the same type, the comparison falls back to their value\n   */\n  static VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n  private lazyHash_: string | null = null;\n\n  /**\n   * @param value_ - The value to store in this leaf node. The object type is\n   * possible in the event of a deferred value\n   * @param priorityNode_ - The priority of this node.\n   */\n  constructor(\n    private readonly value_: string | number | boolean | Indexable,\n    private priorityNode_: Node = LeafNode.__childrenNodeConstructor.EMPTY_NODE\n  ) {\n    assert(\n      this.value_ !== undefined && this.value_ !== null,\n      \"LeafNode shouldn't be created with null/undefined value.\"\n    );\n\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return true;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    if (pathIsEmpty(path)) {\n      return this;\n    } else if (pathGetFront(path) === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n  hasChild(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(childName: string, childNode: Node): null {\n    return null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(\n        childName,\n        newChildNode\n      ).updatePriority(this.priorityNode_);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(\n        front !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n\n      return this.updateImmediateChild(\n        front,\n        LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(\n          pathPopFront(path),\n          newChildNode\n        )\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return 0;\n  }\n\n  /** @inheritDoc */\n  forEachChild(index: Index, action: (s: string, n: Node) => void): boolean {\n    return false;\n  }\n  val(exportFormat?: boolean): {} {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.priorityNode_.isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.priorityNode_.val() as number | string) +\n          ':';\n      }\n\n      const type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_ as number);\n      } else {\n        toHash += this.value_;\n      }\n      this.lazyHash_ = sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /**\n   * Returns the value of the leaf node.\n   * @returns The value of the node.\n   */\n  getValue(): Indexable | string | number | boolean {\n    return this.value_;\n  }\n  compareTo(other: Node): number {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other as LeafNode);\n    }\n  }\n\n  /**\n   * Comparison specifically for two leaf nodes\n   */\n  private compareToLeafNode_(otherLeaf: LeafNode): number {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n  withIndex(): Node {\n    return this;\n  }\n  isIndexed(): boolean {\n    return true;\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other as LeafNode;\n      return (\n        this.value_ === otherLeaf.value_ &&\n        this.priorityNode_.equals(otherLeaf.priorityNode_)\n      );\n    } else {\n      return false;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { LeafNode } from '../LeafNode';\nimport { NamedNode, Node } from '../Node';\n\nimport { Index } from './Index';\n\nlet nodeFromJSON: (a: unknown) => Node;\nlet MAX_NODE: Node;\n\nexport function setNodeFromJSON(val: (a: unknown) => Node) {\n  nodeFromJSON = val;\n}\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport class PriorityIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getPriority().isEmpty();\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE));\n  }\n\n  makePost(indexValue: unknown, name: string): NamedNode {\n    const priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.priority';\n  }\n}\n\nexport const PRIORITY_INDEX = new PriorityIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, map, safeGet } from '@firebase/util';\n\nimport { SortedMap } from '../util/SortedMap';\n\nimport { buildChildSet } from './childSet';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX } from './indexes/KeyIndex';\nimport { PRIORITY_INDEX } from './indexes/PriorityIndex';\nimport { NamedNode, Node } from './Node';\n\nlet _defaultIndexMap: IndexMap;\n\nconst fallbackObject = {};\n\nexport class IndexMap {\n  /**\n   * The default IndexMap for nodes without a priority\n   */\n  static get Default(): IndexMap {\n    assert(\n      fallbackObject && PRIORITY_INDEX,\n      'ChildrenNode.ts has not been loaded'\n    );\n    _defaultIndexMap =\n      _defaultIndexMap ||\n      new IndexMap(\n        { '.priority': fallbackObject },\n        { '.priority': PRIORITY_INDEX }\n      );\n    return _defaultIndexMap;\n  }\n\n  constructor(\n    private indexes_: {\n      [k: string]: SortedMap<NamedNode, Node> | /*FallbackType*/ object;\n    },\n    private indexSet_: { [k: string]: Index }\n  ) {}\n\n  get(indexKey: string): SortedMap<NamedNode, Node> | null {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  }\n\n  hasIndex(indexDefinition: Index): boolean {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n\n  addIndex(\n    indexDefinition: Index,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    assert(\n      indexDefinition !== KEY_INDEX,\n      \"KeyIndex always exists and isn't meant to be added to the IndexMap.\"\n    );\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n    while (next) {\n      sawIndexedValue =\n        sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    let newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    const indexName = indexDefinition.toString();\n    const newIndexSet = { ...this.indexSet_ };\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = { ...this.indexes_ };\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n\n  /**\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\n   */\n  addToIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>, indexName: string) => {\n        const index = safeGet(this.indexSet_, indexName);\n        assert(index, 'Missing index implementation for ' + indexName);\n        if (indexedChildren === fallbackObject) {\n          // Check to see if we need to index everything\n          if (index.isDefinedOn(namedNode.node)) {\n            // We need to build this index\n            const childList = [];\n            const iter = existingChildren.getIterator(NamedNode.Wrap);\n            let next = iter.getNext();\n            while (next) {\n              if (next.name !== namedNode.name) {\n                childList.push(next);\n              }\n              next = iter.getNext();\n            }\n            childList.push(namedNode);\n            return buildChildSet(childList, index.getCompare());\n          } else {\n            // No change, this remains a fallback\n            return fallbackObject;\n          }\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          let newChildren = indexedChildren;\n          if (existingSnap) {\n            newChildren = newChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          }\n          return newChildren.insert(namedNode, namedNode.node);\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n\n  /**\n   * Create a new IndexMap instance with the given value removed\n   */\n  removeFromIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>) => {\n        if (indexedChildren === fallbackObject) {\n          // This is the fallback. Just return it, nothing to do in this case\n          return indexedChildren;\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          if (existingSnap) {\n            return indexedChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          } else {\n            // No record of this child\n            return indexedChildren;\n          }\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathGetLength, pathPopFront } from '../util/Path';\nimport { SortedMap, SortedMapIterator } from '../util/SortedMap';\nimport { MAX_NAME, MIN_NAME, sha1 } from '../util/util';\n\nimport { NAME_COMPARATOR } from './comparators';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX, KeyIndex } from './indexes/KeyIndex';\nimport {\n  PRIORITY_INDEX,\n  setMaxNode as setPriorityMaxNode\n} from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\nimport { priorityHashText, setMaxNode, validatePriorityNode } from './snap';\n\nexport interface ChildrenNodeConstructor {\n  new (\n    children_: SortedMap<string, Node>,\n    priorityNode_: Node | null,\n    indexMap_: IndexMap\n  ): ChildrenNode;\n  EMPTY_NODE: ChildrenNode;\n}\n\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\nlet EMPTY_NODE: ChildrenNode;\n\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n */\nexport class ChildrenNode implements Node {\n  private lazyHash_: string | null = null;\n\n  static get EMPTY_NODE(): ChildrenNode {\n    return (\n      EMPTY_NODE ||\n      (EMPTY_NODE = new ChildrenNode(\n        new SortedMap<string, Node>(NAME_COMPARATOR),\n        null,\n        IndexMap.Default\n      ))\n    );\n  }\n\n  /**\n   * @param children_ - List of children of this node..\n   * @param priorityNode_ - The priority of this node (as a snapshot node).\n   */\n  constructor(\n    private readonly children_: SortedMap<string, Node>,\n    private readonly priorityNode_: Node | null,\n    private indexMap_: IndexMap\n  ) {\n    /**\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n     * class instead of an empty ChildrenNode.\n     */\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      assert(\n        !this.priorityNode_ || this.priorityNode_.isEmpty(),\n        'An empty node cannot have a priority'\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return this;\n    }\n\n    return this.getImmediateChild(front).getChild(pathPopFront(path));\n  }\n\n  /** @inheritDoc */\n  hasChild(childName: string): boolean {\n    return this.children_.get(childName) !== null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap;\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(\n          namedNode,\n          this.children_\n        );\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      const newPriority = newChildren.isEmpty()\n        ? EMPTY_NODE\n        : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(\n        pathGetFront(path) !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n      const newImmediateChild = this.getImmediateChild(front).updateChild(\n        pathPopFront(path),\n        newChildNode\n      );\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return this.children_.isEmpty();\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return this.children_.count();\n  }\n\n  private static INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n\n  /** @inheritDoc */\n  val(exportFormat?: boolean): object {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    const obj: { [k: string]: unknown } = {};\n    let numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, (key: string, childNode: Node) => {\n      obj[key] = childNode.val(exportFormat);\n\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array: unknown[] = [];\n      // eslint-disable-next-line guard-for-in\n      for (const key in obj) {\n        array[key as unknown as number] = obj[key];\n      }\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n      return obj;\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.getPriority().isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.getPriority().val() as string | number) +\n          ':';\n      }\n\n      this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        const childHash = childNode.hash();\n        if (childHash !== '') {\n          toHash += ':' + key + ':' + childHash;\n        }\n      });\n\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(\n        new NamedNode(childName, childNode)\n      );\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n\n  getFirstChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n\n  getFirstChild(indexDefinition: Index): NamedNode | null {\n    const minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Given an index, return the key name of the largest value we have, according to that index\n   */\n  getLastChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n\n  getLastChild(indexDefinition: Index): NamedNode | null {\n    const maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n  forEachChild(\n    index: Index,\n    action: (key: string, node: Node) => boolean | void\n  ): boolean {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      return idx.inorderTraversal(wrappedNode => {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n\n  getIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n\n  getIteratorFrom(\n    startPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(\n        startPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  getReverseIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getReverseIteratorFrom(\n      indexDefinition.maxPost(),\n      indexDefinition\n    );\n  }\n\n  getReverseIteratorFrom(\n    endPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, key => {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(\n        endPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n  compareTo(other: ChildrenNode): number {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n  withIndex(indexDefinition: Index): Node {\n    if (\n      indexDefinition === KEY_INDEX ||\n      this.indexMap_.hasIndex(indexDefinition)\n    ) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(\n        indexDefinition,\n        this.children_\n      );\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n  isIndexed(index: Index): boolean {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other as ChildrenNode;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (\n        this.children_.count() === otherChildrenNode.children_.count()\n      ) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) {\n          if (\n            thisCurrent.name !== otherCurrent.name ||\n            !thisCurrent.node.equals(otherCurrent.node)\n          ) {\n            return false;\n          }\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n   * instead.\n   *\n   */\n  private resolveIndex_(\n    indexDefinition: Index\n  ): SortedMap<NamedNode, Node> | null {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n}\n\nexport class MaxNode extends ChildrenNode {\n  constructor() {\n    super(\n      new SortedMap<string, Node>(NAME_COMPARATOR),\n      ChildrenNode.EMPTY_NODE,\n      IndexMap.Default\n    );\n  }\n\n  compareTo(other: Node): number {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n\n  equals(other: Node): boolean {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n\n  getPriority(): MaxNode {\n    return this;\n  }\n\n  getImmediateChild(childName: string): ChildrenNode {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n}\n\n/**\n * Marker that will sort higher than any other snapshot.\n */\nexport const MAX_NODE = new MaxNode();\n\n/**\n * Document NamedNode extensions\n */\ndeclare module './Node' {\n  interface NamedNode {\n    MIN: NamedNode;\n    MAX: NamedNode;\n  }\n}\n\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE);\nsetPriorityMaxNode(MAX_NODE);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LLRBNode, SortedMap } from '../util/SortedMap';\n\nimport { NamedNode } from './Node';\n\nconst LOG_2 = Math.log(2);\n\nclass Base12Num {\n  count: number;\n  private current_: number;\n  private bits_: number;\n\n  constructor(length: number) {\n    const logBase2 = (num: number) =>\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parseInt((Math.log(num) / LOG_2) as any, 10);\n    const bitMask = (bits: number) => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = (length + 1) & mask;\n  }\n\n  nextBitIsOne(): boolean {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & (0x1 << this.current_));\n    this.current_--;\n    return result;\n  }\n}\n\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @param childList - Unsorted list of children\n * @param cmp - The comparison method to be used\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\n * type is not NamedNode\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\n */\nexport const buildChildSet = function <K, V>(\n  childList: NamedNode[],\n  cmp: (a: NamedNode, b: NamedNode) => number,\n  keyFn?: (a: NamedNode) => K,\n  mapSortFn?: (a: K, b: K) => number\n): SortedMap<K, V> {\n  childList.sort(cmp);\n\n  const buildBalancedTree = function (\n    low: number,\n    high: number\n  ): LLRBNode<K, V> | null {\n    const length = high - low;\n    let namedNode: NamedNode;\n    let key: K;\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        null,\n        null\n      );\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const middle = parseInt((length / 2) as any, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        left,\n        right\n      );\n    }\n  };\n\n  const buildFrom12Array = function (base12: Base12Num): LLRBNode<K, V> {\n    let node: LLRBNode<K, V> = null;\n    let root = null;\n    let index = childList.length;\n\n    const buildPennant = function (chunkSize: number, color: boolean) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key: K = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      attachPennant(\n        new LLRBNode(\n          key,\n          namedNode.node as unknown as V,\n          color,\n          null,\n          childTree\n        )\n      );\n    };\n\n    const attachPennant = function (pennant: LLRBNode<K, V>) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new SortedMap<K, V>(mapSortFn || (cmp as any), root);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { SortedMap } from '../util/SortedMap';\nimport { each } from '../util/util';\n\nimport { ChildrenNode } from './ChildrenNode';\nimport { buildChildSet } from './childSet';\nimport { NAME_COMPARATOR, NAME_ONLY_COMPARATOR } from './comparators';\nimport { PRIORITY_INDEX, setNodeFromJSON } from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\n\nconst USE_HINZE = true;\n\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param json - JSON to create a node for.\n * @param priority - Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n */\nexport function nodeFromJSON(\n  json: unknown | null,\n  priority: unknown = null\n): Node {\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  assert(\n    priority === null ||\n      typeof priority === 'string' ||\n      typeof priority === 'number' ||\n      (typeof priority === 'object' && '.sv' in (priority as object)),\n    'Invalid priority type found: ' + typeof priority\n  );\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json as string | number | boolean | Indexable;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children: NamedNode[] = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj = json;\n    each(hinzeJsonObj, (key, child) => {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority =\n            childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    const childSet = buildChildSet(\n      children,\n      NAME_ONLY_COMPARATOR,\n      namedNode => namedNode.name,\n      NAME_COMPARATOR\n    ) as SortedMap<string, Node>;\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(\n        children,\n        PRIORITY_INDEX.getCompare()\n      );\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        new IndexMap(\n          { '.priority': sortedChildSet },\n          { '.priority': PRIORITY_INDEX }\n        )\n      );\n    } else {\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        IndexMap.Default\n      );\n    }\n  } else {\n    let node: Node = ChildrenNode.EMPTY_NODE;\n    each(json, (key: string, childData: unknown) => {\n      if (contains(json as object, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node = node.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathIsEmpty, pathSlice } from '../../util/Path';\nimport { MAX_NAME, nameCompare } from '../../util/util';\nimport { ChildrenNode, MAX_NODE } from '../ChildrenNode';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class PathIndex extends Index {\n  constructor(private indexPath_: Path) {\n    super();\n\n    assert(\n      !pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority',\n      \"Can't create PathIndex with empty path or .priority key\"\n    );\n  }\n\n  protected extractChild(snap: Node): Node {\n    return snap.getChild(this.indexPath_);\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(\n      this.indexPath_,\n      valueNode\n    );\n    return new NamedNode(name, node);\n  }\n  maxPost(): NamedNode {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n  toString(): string {\n    return pathSlice(this.indexPath_, 0).join('/');\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../../util/util';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class ValueIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return true;\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.equals(newNode);\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MAX;\n  }\n\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.value';\n  }\n}\n\nexport const VALUE_INDEX = new ValueIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nexport const enum ChangeType {\n  /** Event type for a child added */\n  CHILD_ADDED = 'child_added',\n  /** Event type for a child removed */\n  CHILD_REMOVED = 'child_removed',\n  /** Event type for a child changed */\n  CHILD_CHANGED = 'child_changed',\n  /** Event type for a child moved */\n  CHILD_MOVED = 'child_moved',\n  /** Event type for a value change */\n  VALUE = 'value'\n}\n\nexport interface Change {\n  /** @param type - The event type */\n  type: ChangeType;\n  /** @param snapshotNode - The data */\n  snapshotNode: Node;\n  /** @param childName - The name for this child, if it's a child even */\n  childName?: string;\n  /** @param oldSnap - Used for intermediate processing of child changed events */\n  oldSnap?: Node;\n  /**  * @param prevName - The name for the previous child, if applicable */\n  prevName?: string | null;\n}\n\nexport function changeValue(snapshotNode: Node): Change {\n  return { type: ChangeType.VALUE, snapshotNode };\n}\n\nexport function changeChildAdded(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_ADDED, snapshotNode, childName };\n}\n\nexport function changeChildRemoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_REMOVED, snapshotNode, childName };\n}\n\nexport function changeChildChanged(\n  childName: string,\n  snapshotNode: Node,\n  oldSnap: Node\n): Change {\n  return {\n    type: ChangeType.CHILD_CHANGED,\n    snapshotNode,\n    childName,\n    oldSnap\n  };\n}\n\nexport function changeChildMoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_MOVED, snapshotNode, childName };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\n\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n */\nexport class IndexedFilter implements NodeFilter {\n  constructor(private readonly index_: Index) {}\n\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    assert(\n      snap.isIndexed(this.index_),\n      'A node must be indexed if only a child is updated'\n    );\n    const oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (\n      oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))\n    ) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(\n            changeChildRemoved(key, oldChild)\n          );\n        } else {\n          assert(\n            snap.isLeafNode(),\n            'A child remove without an old child only makes sense on a leaf node'\n          );\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\n      } else {\n        optChangeAccumulator.trackChildChange(\n          changeChildChanged(key, newChild, oldChild)\n        );\n      }\n    }\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(\n              changeChildRemoved(key, childNode)\n            );\n          }\n        });\n      }\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(\n                changeChildChanged(key, childNode, oldChild)\n              );\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(\n              changeChildAdded(key, childNode)\n            );\n          }\n        });\n      }\n    }\n    return newSnap.withIndex(this.index_);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n  filtersNodes(): boolean {\n    return false;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NamedNode, Node } from '../../../core/snap/Node';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Path } from '../../util/Path';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\n */\nexport class RangedFilter implements NodeFilter {\n  private indexedFilter_: IndexedFilter;\n\n  private index_: Index;\n\n  private startPost_: NamedNode;\n\n  private endPost_: NamedNode;\n\n  private startIsInclusive_: boolean;\n\n  private endIsInclusive_: boolean;\n\n  constructor(params: QueryParams) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n    this.startIsInclusive_ = !params.startAfterSet_;\n    this.endIsInclusive_ = !params.endBeforeSet_;\n  }\n\n  getStartPost(): NamedNode {\n    return this.startPost_;\n  }\n\n  getEndPost(): NamedNode {\n    return this.endPost_;\n  }\n\n  matches(node: NamedNode): boolean {\n    const isWithinStart = this.startIsInclusive_\n      ? this.index_.compare(this.getStartPost(), node) <= 0\n      : this.index_.compare(this.getStartPost(), node) < 0;\n    const isWithinEnd = this.endIsInclusive_\n      ? this.index_.compare(node, this.getEndPost()) <= 0\n      : this.index_.compare(node, this.getEndPost()) < 0;\n    return isWithinStart && isWithinEnd;\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    return this.indexedFilter_.updateChild(\n      snap,\n      key,\n      newChild,\n      affectedPath,\n      source,\n      optChangeAccumulator\n    );\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n    let filtered = newSnap.withIndex(this.index_);\n    // Don't support priorities on queries\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(\n      oldSnap,\n      filtered,\n      optChangeAccumulator\n    );\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.indexedFilter_;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private static getStartPost_(params: QueryParams): NamedNode {\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  }\n\n  private static getEndPost_(params: QueryParams): NamedNode {\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { NamedNode, Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\nimport { RangedFilter } from './RangedFilter';\n\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n */\nexport class LimitedFilter implements NodeFilter {\n  private readonly rangedFilter_: RangedFilter;\n\n  private readonly index_: Index;\n\n  private readonly limit_: number;\n\n  private readonly reverse_: boolean;\n\n  private readonly startIsInclusive_: boolean;\n\n  private readonly endIsInclusive_: boolean;\n\n  constructor(params: QueryParams) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n    this.startIsInclusive_ = !params.startAfterSet_;\n    this.endIsInclusive_ = !params.endBeforeSet_;\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_\n        .getIndexedFilter()\n        .updateChild(\n          snap,\n          key,\n          newChild,\n          affectedPath,\n          source,\n          optChangeAccumulator\n        );\n    } else {\n      return this.fullLimitUpdateChild_(\n        snap,\n        key,\n        newChild,\n        source,\n        optChangeAccumulator\n      );\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    let filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (\n        this.limit_ * 2 < newSnap.numChildren() &&\n        newSnap.isIndexed(this.index_)\n      ) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        let iterator;\n        if (this.reverse_) {\n          iterator = (newSnap as ChildrenNode).getReverseIteratorFrom(\n            this.rangedFilter_.getEndPost(),\n            this.index_\n          );\n        } else {\n          iterator = (newSnap as ChildrenNode).getIteratorFrom(\n            this.rangedFilter_.getStartPost(),\n            this.index_\n          );\n        }\n        let count = 0;\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n          if (!this.withinDirectionalStart(next)) {\n            // if we have not reached the start, skip to the next element\n            continue;\n          } else if (!this.withinDirectionalEnd(next)) {\n            // if we have reached the end, stop adding elements\n            break;\n          } else {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(\n          ChildrenNode.EMPTY_NODE\n        ) as ChildrenNode;\n\n        let iterator;\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n        }\n\n        let count = 0;\n        while (iterator.hasNext()) {\n          const next = iterator.getNext();\n          const inRange =\n            count < this.limit_ &&\n            this.withinDirectionalStart(next) &&\n            this.withinDirectionalEnd(next);\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(\n              next.name,\n              ChildrenNode.EMPTY_NODE\n            );\n          }\n        }\n      }\n    }\n    return this.rangedFilter_\n      .getIndexedFilter()\n      .updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private fullLimitUpdateChild_(\n    snap: Node,\n    childKey: string,\n    childSnap: Node,\n    source: CompleteChildSource,\n    changeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n      cmp = (a: NamedNode, b: NamedNode) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n    const oldEventCache = snap as ChildrenNode;\n    assert(oldEventCache.numChildren() === this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_\n      ? oldEventCache.getFirstChild(this.index_)\n      : (oldEventCache.getLastChild(this.index_) as NamedNode);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(\n        this.index_,\n        windowBoundary,\n        this.reverse_\n      );\n      while (\n        nextChild != null &&\n        (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))\n      ) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(\n          this.index_,\n          nextChild,\n          this.reverse_\n        );\n      }\n      const compareNext =\n        nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow =\n        inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildChanged(childKey, childSnap, oldChildSnap)\n          );\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(childKey, oldChildSnap)\n          );\n        }\n        const newEventCache = oldEventCache.updateImmediateChild(\n          childKey,\n          ChildrenNode.EMPTY_NODE\n        );\n        const nextChildInRange =\n          nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(\n              changeChildAdded(nextChild.name, nextChild.node)\n            );\n          }\n          return newEventCache.updateImmediateChild(\n            nextChild.name,\n            nextChild.node\n          );\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(windowBoundary.name, windowBoundary.node)\n          );\n          changeAccumulator.trackChildChange(\n            changeChildAdded(childKey, childSnap)\n          );\n        }\n        return oldEventCache\n          .updateImmediateChild(childKey, childSnap)\n          .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n\n  private withinDirectionalStart = (node: NamedNode) =>\n    this.reverse_ ? this.withinEndPost(node) : this.withinStartPost(node);\n\n  private withinDirectionalEnd = (node: NamedNode) =>\n    this.reverse_ ? this.withinStartPost(node) : this.withinEndPost(node);\n\n  private withinStartPost = (node: NamedNode) => {\n    const compareRes = this.index_.compare(\n      this.rangedFilter_.getStartPost(),\n      node\n    );\n    return this.startIsInclusive_ ? compareRes <= 0 : compareRes < 0;\n  };\n\n  private withinEndPost = (node: NamedNode) => {\n    const compareRes = this.index_.compare(\n      node,\n      this.rangedFilter_.getEndPost()\n    );\n    return this.endIsInclusive_ ? compareRes <= 0 : compareRes < 0;\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, stringify } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { PathIndex } from '../snap/indexes/PathIndex';\nimport { PRIORITY_INDEX, PriorityIndex } from '../snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../snap/indexes/ValueIndex';\nimport { MAX_NAME, MIN_NAME } from '../util/util';\n\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { LimitedFilter } from './filter/LimitedFilter';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { RangedFilter } from './filter/RangedFilter';\n\n/**\n * Wire Protocol Constants\n */\nconst enum WIRE_PROTOCOL_CONSTANTS {\n  INDEX_START_VALUE = 'sp',\n  INDEX_START_NAME = 'sn',\n  INDEX_START_IS_INCLUSIVE = 'sin',\n  INDEX_END_VALUE = 'ep',\n  INDEX_END_NAME = 'en',\n  INDEX_END_IS_INCLUSIVE = 'ein',\n  LIMIT = 'l',\n  VIEW_FROM = 'vf',\n  VIEW_FROM_LEFT = 'l',\n  VIEW_FROM_RIGHT = 'r',\n  INDEX = 'i'\n}\n\n/**\n * REST Query Constants\n */\nconst enum REST_QUERY_CONSTANTS {\n  ORDER_BY = 'orderBy',\n  PRIORITY_INDEX = '$priority',\n  VALUE_INDEX = '$value',\n  KEY_INDEX = '$key',\n  START_AFTER = 'startAfter',\n  START_AT = 'startAt',\n  END_AT = 'endAt',\n  END_BEFORE = 'endBefore',\n  LIMIT_TO_FIRST = 'limitToFirst',\n  LIMIT_TO_LAST = 'limitToLast'\n}\n\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n *\n * @internal\n */\nexport class QueryParams {\n  limitSet_ = false;\n  startSet_ = false;\n  startNameSet_ = false;\n  startAfterSet_ = false; // can only be true if startSet_ is true\n  endSet_ = false;\n  endNameSet_ = false;\n  endBeforeSet_ = false; // can only be true if endSet_ is true\n  limit_ = 0;\n  viewFrom_ = '';\n  indexStartValue_: unknown | null = null;\n  indexStartName_ = '';\n  indexEndValue_: unknown | null = null;\n  indexEndName_ = '';\n  index_: PriorityIndex = PRIORITY_INDEX;\n\n  hasStart(): boolean {\n    return this.startSet_;\n  }\n\n  /**\n   * @returns True if it would return from left.\n   */\n  isViewFromLeft(): boolean {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n    }\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true\n   */\n  getIndexStartValue(): unknown {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true.\n   * Returns the starting key name for the range defined by these query parameters\n   */\n  getIndexStartName(): string {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n\n  hasEnd(): boolean {\n    return this.endSet_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   */\n  getIndexEndValue(): unknown {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * Returns the end key name for the range defined by these query parameters\n   */\n  getIndexEndName(): string {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n\n  hasLimit(): boolean {\n    return this.limitSet_;\n  }\n\n  /**\n   * @returns True if a limit has been set and it has been explicitly anchored\n   */\n  hasAnchoredLimit(): boolean {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n\n  /**\n   * Only valid to call if hasLimit() returns true\n   */\n  getLimit(): number {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  loadsAllData(): boolean {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n\n  isDefault(): boolean {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  }\n\n  copy(): QueryParams {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.startAfterSet_ = this.startAfterSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.endBeforeSet_ = this.endBeforeSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n}\n\nexport function queryParamsGetNodeFilter(queryParams: QueryParams): NodeFilter {\n  if (queryParams.loadsAllData()) {\n    return new IndexedFilter(queryParams.getIndex());\n  } else if (queryParams.hasLimit()) {\n    return new LimitedFilter(queryParams);\n  } else {\n    return new RangedFilter(queryParams);\n  }\n}\n\nexport function queryParamsLimit(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = '';\n  return newParams;\n}\n\nexport function queryParamsLimitToFirst(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n  return newParams;\n}\n\nexport function queryParamsLimitToLast(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n  return newParams;\n}\n\nexport function queryParamsStartAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.startSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexStartValue_ = indexValue;\n  if (key != null) {\n    newParams.startNameSet_ = true;\n    newParams.indexStartName_ = key;\n  } else {\n    newParams.startNameSet_ = false;\n    newParams.indexStartName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsStartAfter(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX || !!key) {\n    params = queryParamsStartAt(queryParams, indexValue, key);\n  } else {\n    params = queryParamsStartAt(queryParams, indexValue, MAX_NAME);\n  }\n  params.startAfterSet_ = true;\n  return params;\n}\n\nexport function queryParamsEndAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.endSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexEndValue_ = indexValue;\n  if (key !== undefined) {\n    newParams.endNameSet_ = true;\n    newParams.indexEndName_ = key;\n  } else {\n    newParams.endNameSet_ = false;\n    newParams.indexEndName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsEndBefore(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX || !!key) {\n    params = queryParamsEndAt(queryParams, indexValue, key);\n  } else {\n    params = queryParamsEndAt(queryParams, indexValue, MIN_NAME);\n  }\n  params.endBeforeSet_ = true;\n  return params;\n}\n\nexport function queryParamsOrderBy(\n  queryParams: QueryParams,\n  index: Index\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.index_ = index;\n  return newParams;\n}\n\n/**\n * Returns a set of REST query string parameters representing this query.\n *\n * @returns query string parameters\n */\nexport function queryParamsToRestQueryStringParameters(\n  queryParams: QueryParams\n): Record<string, string | number> {\n  const qs: Record<string, string | number> = {};\n\n  if (queryParams.isDefault()) {\n    return qs;\n  }\n\n  let orderBy;\n  if (queryParams.index_ === PRIORITY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.PRIORITY_INDEX;\n  } else if (queryParams.index_ === VALUE_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.VALUE_INDEX;\n  } else if (queryParams.index_ === KEY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.KEY_INDEX;\n  } else {\n    assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\n    orderBy = queryParams.index_.toString();\n  }\n  qs[REST_QUERY_CONSTANTS.ORDER_BY] = stringify(orderBy);\n\n  if (queryParams.startSet_) {\n    const startParam = queryParams.startAfterSet_\n      ? REST_QUERY_CONSTANTS.START_AFTER\n      : REST_QUERY_CONSTANTS.START_AT;\n    qs[startParam] = stringify(queryParams.indexStartValue_);\n    if (queryParams.startNameSet_) {\n      qs[startParam] += ',' + stringify(queryParams.indexStartName_);\n    }\n  }\n\n  if (queryParams.endSet_) {\n    const endParam = queryParams.endBeforeSet_\n      ? REST_QUERY_CONSTANTS.END_BEFORE\n      : REST_QUERY_CONSTANTS.END_AT;\n    qs[endParam] = stringify(queryParams.indexEndValue_);\n    if (queryParams.endNameSet_) {\n      qs[endParam] += ',' + stringify(queryParams.indexEndName_);\n    }\n  }\n\n  if (queryParams.limitSet_) {\n    if (queryParams.isViewFromLeft()) {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_FIRST] = queryParams.limit_;\n    } else {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_LAST] = queryParams.limit_;\n    }\n  }\n\n  return qs;\n}\n\nexport function queryParamsGetQueryObject(\n  queryParams: QueryParams\n): Record<string, unknown> {\n  const obj: Record<string, unknown> = {};\n  if (queryParams.startSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] =\n      queryParams.indexStartValue_;\n    if (queryParams.startNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] =\n        queryParams.indexStartName_;\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_IS_INCLUSIVE] =\n      !queryParams.startAfterSet_;\n  }\n  if (queryParams.endSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = queryParams.indexEndValue_;\n    if (queryParams.endNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = queryParams.indexEndName_;\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_IS_INCLUSIVE] =\n      !queryParams.endBeforeSet_;\n  }\n  if (queryParams.limitSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = queryParams.limit_;\n    let viewFrom = queryParams.viewFrom_;\n    if (viewFrom === '') {\n      if (queryParams.isViewFromLeft()) {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n      } else {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n      }\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n  }\n  // For now, priority index is the default, so we only specify if it's some other index\n  if (queryParams.index_ !== PRIORITY_INDEX) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = queryParams.index_.toString();\n  }\n  return obj;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  jsonEval,\n  safeGet,\n  querystring,\n  Deferred\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { logWrapper, warn } from './util/util';\nimport { QueryContext } from './view/EventRegistration';\nimport { queryParamsToRestQueryStringParameters } from './view/QueryParams';\n\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nexport class ReadonlyRestClient extends ServerActions {\n  reportStats(stats: { [k: string]: unknown }): void {\n    throw new Error('Method not implemented.');\n  }\n\n  /** @private {function(...[*])} */\n  private log_: (...args: unknown[]) => void = logWrapper('p:rest:');\n\n  /**\n   * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n   * that's been removed. :-/\n   */\n  private listens_: { [k: string]: object } = {};\n\n  static getListenId_(query: QueryContext, tag?: number | null): string {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(\n        query._queryParams.isDefault(),\n        \"should have a tag if it's not a default query.\"\n      );\n      return query._path.toString();\n    }\n  }\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider\n  ) {\n    super();\n  }\n\n  /** @inheritDoc */\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\n\n    // Mark this listener so we can tell if it's removed.\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\n        }\n\n        if (safeGet(this.listens_, listenId) === thisListen) {\n          let status;\n          if (!error) {\n            status = 'ok';\n          } else if (error === 401) {\n            status = 'permission_denied';\n          } else {\n            status = 'rest_error:' + error;\n          }\n\n          onComplete(status, null);\n        }\n      }\n    );\n  }\n\n  /** @inheritDoc */\n  unlisten(query: QueryContext, tag: number | null) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n\n  get(query: QueryContext): Promise<string> {\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    const pathString = query._path.toString();\n\n    const deferred = new Deferred<string>();\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(\n            pathString,\n            data,\n            /*isMerge=*/ false,\n            /*tag=*/ null\n          );\n          deferred.resolve(data as string);\n        } else {\n          deferred.reject(new Error(data as string));\n        }\n      }\n    );\n    return deferred.promise;\n  }\n\n  /** @inheritDoc */\n  refreshAuthToken(token: string) {\n    // no-op since we just always call getToken.\n  }\n\n  /**\n   * Performs a REST request to the given path, with the provided query string parameters,\n   * and any auth credentials we have.\n   */\n  private restRequest_(\n    pathString: string,\n    queryStringParameters: { [k: string]: string | number } = {},\n    callback: ((a: number | null, b?: unknown) => void) | null\n  ) {\n    queryStringParameters['format'] = 'export';\n\n    return Promise.all([\n      this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\n      this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\n    ]).then(([authToken, appCheckToken]) => {\n      if (authToken && authToken.accessToken) {\n        queryStringParameters['auth'] = authToken.accessToken;\n      }\n      if (appCheckToken && appCheckToken.token) {\n        queryStringParameters['ac'] = appCheckToken.token;\n      }\n\n      const url =\n        (this.repoInfo_.secure ? 'https://' : 'http://') +\n        this.repoInfo_.host +\n        pathString +\n        '?' +\n        'ns=' +\n        this.repoInfo_.namespace +\n        querystring(queryStringParameters);\n\n      this.log_('Sending REST request for ' + url);\n      const xhr = new XMLHttpRequest();\n      xhr.onreadystatechange = () => {\n        if (callback && xhr.readyState === 4) {\n          this.log_(\n            'REST Response for ' + url + ' received. status:',\n            xhr.status,\n            'response:',\n            xhr.responseText\n          );\n          let res = null;\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              res = jsonEval(xhr.responseText);\n            } catch (e) {\n              warn(\n                'Failed to parse JSON response for ' +\n                  url +\n                  ': ' +\n                  xhr.responseText\n              );\n            }\n            callback(null, res);\n          } else {\n            // 401 and 404 are expected.\n            if (xhr.status !== 401 && xhr.status !== 404) {\n              warn(\n                'Got unsuccessful REST response for ' +\n                  url +\n                  ' Status: ' +\n                  xhr.status\n              );\n            }\n            callback(xhr.status);\n          }\n          callback = null;\n        }\n      };\n\n      xhr.open('GET', url, /*asynchronous=*/ true);\n      xhr.send();\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\n\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n */\nexport class SnapshotHolder {\n  private rootNode_: Node = ChildrenNode.EMPTY_NODE;\n\n  getNode(path: Path): Node {\n    return this.rootNode_.getChild(path);\n  }\n\n  updateSnapshot(path: Path, newSnapshotNode: Node) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\nimport { Path, pathGetFront, pathIsEmpty, pathPopFront } from './util/Path';\n\n/**\n * Helper class to store a sparse set of snapshots.\n */\nexport interface SparseSnapshotTree {\n  value: Node | null;\n  readonly children: Map<string, SparseSnapshotTree>;\n}\n\nexport function newSparseSnapshotTree(): SparseSnapshotTree {\n  return {\n    value: null,\n    children: new Map()\n  };\n}\n\n/**\n * Gets the node stored at the given path if one exists.\n * Only seems to be used in tests.\n *\n * @param path - Path to look up snapshot for.\n * @returns The retrieved node, or null.\n */\nexport function sparseSnapshotTreeFind(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): Node | null {\n  if (sparseSnapshotTree.value != null) {\n    return sparseSnapshotTree.value.getChild(path);\n  } else if (!pathIsEmpty(path) && sparseSnapshotTree.children.size > 0) {\n    const childKey = pathGetFront(path);\n    path = pathPopFront(path);\n    if (sparseSnapshotTree.children.has(childKey)) {\n      const childTree = sparseSnapshotTree.children.get(childKey);\n      return sparseSnapshotTreeFind(childTree, path);\n    } else {\n      return null;\n    }\n  } else {\n    return null;\n  }\n}\n\n/**\n * Stores the given node at the specified path. If there is already a node\n * at a shallower path, it merges the new data into that snapshot node.\n *\n * @param path - Path to look up snapshot for.\n * @param data - The new data, or null.\n */\nexport function sparseSnapshotTreeRemember(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path,\n  data: Node\n): void {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = data;\n    sparseSnapshotTree.children.clear();\n  } else if (sparseSnapshotTree.value !== null) {\n    sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\n  } else {\n    const childKey = pathGetFront(path);\n    if (!sparseSnapshotTree.children.has(childKey)) {\n      sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\n    }\n\n    const child = sparseSnapshotTree.children.get(childKey);\n    path = pathPopFront(path);\n    sparseSnapshotTreeRemember(child, path, data);\n  }\n}\n\n/**\n * Purge the data at path from the cache.\n *\n * @param path - Path to look up snapshot for.\n * @returns True if this node should now be removed.\n */\nexport function sparseSnapshotTreeForget(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): boolean {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = null;\n    sparseSnapshotTree.children.clear();\n    return true;\n  } else {\n    if (sparseSnapshotTree.value !== null) {\n      if (sparseSnapshotTree.value.isLeafNode()) {\n        // We're trying to forget a node that doesn't exist\n        return false;\n      } else {\n        const value = sparseSnapshotTree.value;\n        sparseSnapshotTree.value = null;\n\n        value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n          sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\n        });\n\n        return sparseSnapshotTreeForget(sparseSnapshotTree, path);\n      }\n    } else if (sparseSnapshotTree.children.size > 0) {\n      const childKey = pathGetFront(path);\n      path = pathPopFront(path);\n      if (sparseSnapshotTree.children.has(childKey)) {\n        const safeToRemove = sparseSnapshotTreeForget(\n          sparseSnapshotTree.children.get(childKey),\n          path\n        );\n        if (safeToRemove) {\n          sparseSnapshotTree.children.delete(childKey);\n        }\n      }\n\n      return sparseSnapshotTree.children.size === 0;\n    } else {\n      return true;\n    }\n  }\n}\n\n/**\n * Recursively iterates through all of the stored tree and calls the\n * callback on each one.\n *\n * @param prefixPath - Path to look up node for.\n * @param func - The function to invoke for each tree.\n */\nexport function sparseSnapshotTreeForEachTree(\n  sparseSnapshotTree: SparseSnapshotTree,\n  prefixPath: Path,\n  func: (a: Path, b: Node) => unknown\n): void {\n  if (sparseSnapshotTree.value !== null) {\n    func(prefixPath, sparseSnapshotTree.value);\n  } else {\n    sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\n      const path = new Path(prefixPath.toString() + '/' + key);\n      sparseSnapshotTreeForEachTree(tree, path, func);\n    });\n  }\n}\n\n/**\n * Iterates through each immediate child and triggers the callback.\n * Only seems to be used in tests.\n *\n * @param func - The function to invoke for each child.\n */\nexport function sparseSnapshotTreeForEachChild(\n  sparseSnapshotTree: SparseSnapshotTree,\n  func: (a: string, b: SparseSnapshotTree) => void\n): void {\n  sparseSnapshotTree.children.forEach((tree, key) => {\n    func(key, tree);\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\n\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ - The collection to \"listen\" to.\n */\nexport class StatsListener {\n  private last_: { [k: string]: number } | null = null;\n\n  constructor(private collection_: StatsCollection) {}\n\n  get(): { [k: string]: number } {\n    const newStats = this.collection_.get();\n\n    const delta = { ...newStats };\n    if (this.last_) {\n      each(this.last_, (stat: string, value: number) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n\n    return delta;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\n/**\n *\n * @enum\n */\nexport enum OperationType {\n  OVERWRITE,\n  MERGE,\n  ACK_USER_WRITE,\n  LISTEN_COMPLETE\n}\n\n/**\n * @interface\n */\nexport interface Operation {\n  source: OperationSource;\n\n  type: OperationType;\n\n  path: Path;\n\n  operationForChild(childName: string): Operation | null;\n}\n\nexport interface OperationSource {\n  fromUser: boolean;\n  fromServer: boolean;\n  queryId: string | null;\n  tagged: boolean;\n}\n\nexport function newOperationSourceUser(): OperationSource {\n  return {\n    fromUser: true,\n    fromServer: false,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServer(): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServerTaggedQuery(\n  queryId: string\n): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId,\n    tagged: true\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\nimport { ServerActions } from '../ServerActions';\nimport { setTimeoutNonBlocking, each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\nimport { StatsListener } from './StatsListener';\n\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n\nexport class StatsReporter {\n  private statsListener_: StatsListener;\n  statsToReport_: { [k: string]: boolean } = {};\n\n  constructor(collection: StatsCollection, private server_: ServerActions) {\n    this.statsListener_ = new StatsListener(collection);\n\n    const timeout =\n      FIRST_STATS_MIN_TIME +\n      (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  private reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats: typeof stats = {};\n    let haveStatsToReport = false;\n\n    each(stats, (stat: string, value: number) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n\n    // queue our next run.\n    setTimeoutNonBlocking(\n      this.reportStats_.bind(this),\n      Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL)\n    );\n  }\n}\n\nexport function statsReporterIncludeStat(\n  reporter: StatsReporter,\n  stat: string\n) {\n  reporter.statsToReport_[stat] = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { newOperationSourceUser, Operation, OperationType } from './Operation';\n\nexport class AckUserWrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.ACK_USER_WRITE;\n\n  /** @inheritDoc */\n  source = newOperationSourceUser();\n\n  /**\n   * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\n   */\n  constructor(\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public affectedTree: ImmutableTree<boolean>,\n    /** @inheritDoc */ public revert: boolean\n  ) {}\n  operationForChild(childName: string): AckUserWrite {\n    if (!pathIsEmpty(this.path)) {\n      assert(\n        pathGetFront(this.path) === childName,\n        'operationForChild called for unrelated child.'\n      );\n      return new AckUserWrite(\n        pathPopFront(this.path),\n        this.affectedTree,\n        this.revert\n      );\n    } else if (this.affectedTree.value != null) {\n      assert(\n        this.affectedTree.children.isEmpty(),\n        'affectedTree should not have overlapping affected paths.'\n      );\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(newEmptyPath(), childTree, this.revert);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './Path';\nimport { SortedMap } from './SortedMap';\nimport { each, stringCompare } from './util';\n\nlet emptyChildrenSingleton: SortedMap<string, ImmutableTree<null>>;\n\n/**\n * Singleton empty children collection.\n *\n */\nconst EmptyChildren = (): SortedMap<string, ImmutableTree<null>> => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap<string, ImmutableTree<null>>(\n      stringCompare\n    );\n  }\n  return emptyChildrenSingleton;\n};\n\n/**\n * A tree with immutable elements.\n */\nexport class ImmutableTree<T> {\n  static fromObject<T>(obj: { [k: string]: T }): ImmutableTree<T> {\n    let tree: ImmutableTree<T> = new ImmutableTree<T>(null);\n    each(obj, (childPath: string, childSnap: T) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n\n  constructor(\n    public readonly value: T | null,\n    public readonly children: SortedMap<\n      string,\n      ImmutableTree<T>\n    > = EmptyChildren()\n  ) {}\n\n  /**\n   * True if the value is empty and there are no children\n   */\n  isEmpty(): boolean {\n    return this.value === null && this.children.isEmpty();\n  }\n\n  /**\n   * Given a path and predicate, return the first node and the path to that node\n   * where the predicate returns true.\n   *\n   * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\n   * objects on the way back out, it may be better to pass down a pathSoFar obj.\n   *\n   * @param relativePath - The remainder of the path\n   * @param predicate - The predicate to satisfy to return a node\n   */\n  findRootMostMatchingPathAndValue(\n    relativePath: Path,\n    predicate: (a: T) => boolean\n  ): { path: Path; value: T } | null {\n    if (this.value != null && predicate(this.value)) {\n      return { path: newEmptyPath(), value: this.value };\n    } else {\n      if (pathIsEmpty(relativePath)) {\n        return null;\n      } else {\n        const front = pathGetFront(relativePath);\n        const child = this.children.get(front);\n        if (child !== null) {\n          const childExistingPathAndValue =\n            child.findRootMostMatchingPathAndValue(\n              pathPopFront(relativePath),\n              predicate\n            );\n          if (childExistingPathAndValue != null) {\n            const fullPath = pathChild(\n              new Path(front),\n              childExistingPathAndValue.path\n            );\n            return { path: fullPath, value: childExistingPathAndValue.value };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find, if it exists, the shortest subpath of the given path that points a defined\n   * value in the tree\n   */\n  findRootMostValueAndPath(\n    relativePath: Path\n  ): { path: Path; value: T } | null {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n\n  /**\n   * @returns The subtree at the given path\n   */\n  subtree(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return this;\n    } else {\n      const front = pathGetFront(relativePath);\n      const childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(pathPopFront(relativePath));\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Sets a value at the specified path.\n   *\n   * @param relativePath - Path to set value at.\n   * @param toSet - Value to set.\n   * @returns Resulting tree.\n   */\n  set(relativePath: Path, toSet: T | null): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.set(pathPopFront(relativePath), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Removes the value at the specified path.\n   *\n   * @param relativePath - Path to value to remove.\n   * @returns Resulting tree.\n   */\n  remove(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      if (this.children.isEmpty()) {\n        return new ImmutableTree<T>(null);\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        const newChild = child.remove(pathPopFront(relativePath));\n        let newChildren;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return new ImmutableTree<T>(null);\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n\n  /**\n   * Gets a value from the tree.\n   *\n   * @param relativePath - Path to get value for.\n   * @returns Value at path, or null.\n   */\n  get(relativePath: Path): T | null {\n    if (pathIsEmpty(relativePath)) {\n      return this.value;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        return child.get(pathPopFront(relativePath));\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Replace the subtree at the specified path with the given new tree.\n   *\n   * @param relativePath - Path to replace subtree for.\n   * @param newTree - New tree.\n   * @returns Resulting tree.\n   */\n  setTree(relativePath: Path, newTree: ImmutableTree<T>): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return newTree;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.setTree(pathPopFront(relativePath), newTree);\n      let newChildren;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Performs a depth first fold on this tree. Transforms a tree into a single\n   * value, given a function that operates on the path to a node, an optional\n   * current value, and a map of child names to folded subtrees\n   */\n  fold<V>(fn: (path: Path, value: T, children: { [k: string]: V }) => V): V {\n    return this.fold_(newEmptyPath(), fn);\n  }\n\n  /**\n   * Recursive helper for public-facing fold() method\n   */\n  private fold_<V>(\n    pathSoFar: Path,\n    fn: (path: Path, value: T | null, children: { [k: string]: V }) => V\n  ): V {\n    const accum: { [k: string]: V } = {};\n    this.children.inorderTraversal(\n      (childKey: string, childTree: ImmutableTree<T>) => {\n        accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\n      }\n    );\n    return fn(pathSoFar, this.value, accum);\n  }\n\n  /**\n   * Find the first matching value on the given path. Return the result of applying f to it.\n   */\n  findOnPath<V>(path: Path, f: (path: Path, value: T) => V | null): V | null {\n    return this.findOnPath_(path, newEmptyPath(), f);\n  }\n\n  private findOnPath_<V>(\n    pathToFollow: Path,\n    pathSoFar: Path,\n    f: (path: Path, value: T) => V | null\n  ): V | null {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathIsEmpty(pathToFollow)) {\n        return null;\n      } else {\n        const front = pathGetFront(pathToFollow)!;\n        const nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(\n            pathPopFront(pathToFollow),\n            pathChild(pathSoFar, front),\n            f\n          );\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  foreachOnPath(\n    path: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    return this.foreachOnPath_(path, newEmptyPath(), f);\n  }\n\n  private foreachOnPath_(\n    pathToFollow: Path,\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    if (pathIsEmpty(pathToFollow)) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      const front = pathGetFront(pathToFollow);\n      const nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(\n          pathPopFront(pathToFollow),\n          pathChild(currentRelativePath, front),\n          f\n        );\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Calls the given function for each node in the tree that has a value.\n   *\n   * @param f - A function to be called with the path from the root of the tree to\n   * a node, and the value at that node. Called in depth-first order.\n   */\n  foreach(f: (path: Path, value: T) => void) {\n    this.foreach_(newEmptyPath(), f);\n  }\n\n  private foreach_(\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ) {\n    this.children.inorderTraversal((childName, childTree) => {\n      childTree.foreach_(pathChild(currentRelativePath, childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n\n  foreachChild(f: (name: string, value: T) => void) {\n    this.children.inorderTraversal(\n      (childName: string, childTree: ImmutableTree<T>) => {\n        if (childTree.value) {\n          f(childName, childTree.value);\n        }\n      }\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class ListenComplete implements Operation {\n  /** @inheritDoc */\n  type = OperationType.LISTEN_COMPLETE;\n\n  constructor(public source: OperationSource, public path: Path) {}\n\n  operationForChild(childName: string): ListenComplete {\n    if (pathIsEmpty(this.path)) {\n      return new ListenComplete(this.source, newEmptyPath());\n    } else {\n      return new ListenComplete(this.source, pathPopFront(this.path));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class Overwrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.OVERWRITE;\n\n  constructor(\n    public source: OperationSource,\n    public path: Path,\n    public snap: Node\n  ) {}\n\n  operationForChild(childName: string): Overwrite {\n    if (pathIsEmpty(this.path)) {\n      return new Overwrite(\n        this.source,\n        newEmptyPath(),\n        this.snap.getImmediateChild(childName)\n      );\n    } else {\n      return new Overwrite(this.source, pathPopFront(this.path), this.snap);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Overwrite } from './Overwrite';\n\nexport class Merge implements Operation {\n  /** @inheritDoc */\n  type = OperationType.MERGE;\n\n  constructor(\n    /** @inheritDoc */ public source: OperationSource,\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public children: ImmutableTree<Node>\n  ) {}\n  operationForChild(childName: string): Operation {\n    if (pathIsEmpty(this.path)) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, newEmptyPath(), childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, newEmptyPath(), childTree);\n      }\n    } else {\n      assert(\n        pathGetFront(this.path) === childName,\n        \"Can't get a merge for a child not on the path of the operation\"\n      );\n      return new Merge(this.source, pathPopFront(this.path), this.children);\n    }\n  }\n  toString(): string {\n    return (\n      'Operation(' +\n      this.path +\n      ': ' +\n      this.source.toString() +\n      ' merge: ' +\n      this.children.toString() +\n      ')'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\n\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nexport class CacheNode {\n  constructor(\n    private node_: Node,\n    private fullyInitialized_: boolean,\n    private filtered_: boolean\n  ) {}\n\n  /**\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n   */\n  isFullyInitialized(): boolean {\n    return this.fullyInitialized_;\n  }\n\n  /**\n   * Returns whether this node is potentially missing children due to a filter applied to the node\n   */\n  isFiltered(): boolean {\n    return this.filtered_;\n  }\n\n  isCompleteForPath(path: Path): boolean {\n    if (pathIsEmpty(path)) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    const childKey = pathGetFront(path);\n    return this.isCompleteForChild(childKey);\n  }\n\n  isCompleteForChild(key: string): boolean {\n    return (\n      (this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key)\n    );\n  }\n\n  getNode(): Node {\n    return this.node_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assertionError } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\n\nimport { Change, ChangeType, changeChildMoved } from './Change';\nimport { Event } from './Event';\nimport { EventRegistration, QueryContext } from './EventRegistration';\n\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n */\nexport class EventGenerator {\n  index_: Index;\n\n  constructor(public query_: QueryContext) {\n    this.index_ = this.query_._queryParams.getIndex();\n  }\n}\n\n/**\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n *\n * Notes:\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\n *    our index.\n *  - prevName will be calculated based on the index ordering.\n */\nexport function eventGeneratorGenerateEventsForChanges(\n  eventGenerator: EventGenerator,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistrations: EventRegistration[]\n): Event[] {\n  const events: Event[] = [];\n  const moves: Change[] = [];\n\n  changes.forEach(change => {\n    if (\n      change.type === ChangeType.CHILD_CHANGED &&\n      eventGenerator.index_.indexedValueChanged(\n        change.oldSnap as Node,\n        change.snapshotNode\n      )\n    ) {\n      moves.push(changeChildMoved(change.childName, change.snapshotNode));\n    }\n  });\n\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_REMOVED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_ADDED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_MOVED,\n    moves,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_CHANGED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.VALUE,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n\n  return events;\n}\n\n/**\n * Given changes of a single change type, generate the corresponding events.\n */\nfunction eventGeneratorGenerateEventsForType(\n  eventGenerator: EventGenerator,\n  events: Event[],\n  eventType: string,\n  changes: Change[],\n  registrations: EventRegistration[],\n  eventCache: Node\n) {\n  const filteredChanges = changes.filter(change => change.type === eventType);\n\n  filteredChanges.sort((a, b) =>\n    eventGeneratorCompareChanges(eventGenerator, a, b)\n  );\n  filteredChanges.forEach(change => {\n    const materializedChange = eventGeneratorMaterializeSingleChange(\n      eventGenerator,\n      change,\n      eventCache\n    );\n    registrations.forEach(registration => {\n      if (registration.respondsTo(change.type)) {\n        events.push(\n          registration.createEvent(materializedChange, eventGenerator.query_)\n        );\n      }\n    });\n  });\n}\n\nfunction eventGeneratorMaterializeSingleChange(\n  eventGenerator: EventGenerator,\n  change: Change,\n  eventCache: Node\n): Change {\n  if (change.type === 'value' || change.type === 'child_removed') {\n    return change;\n  } else {\n    change.prevName = eventCache.getPredecessorChildName(\n      change.childName,\n      change.snapshotNode,\n      eventGenerator.index_\n    );\n    return change;\n  }\n}\n\nfunction eventGeneratorCompareChanges(\n  eventGenerator: EventGenerator,\n  a: Change,\n  b: Change\n) {\n  if (a.childName == null || b.childName == null) {\n    throw assertionError('Should only compare child_ events.');\n  }\n  const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n  const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n  return eventGenerator.index_.compare(aWrapped, bWrapped);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nimport { CacheNode } from './CacheNode';\n\n/**\n * Stores the data we have cached for a view.\n *\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\n */\nexport interface ViewCache {\n  readonly eventCache: CacheNode;\n  readonly serverCache: CacheNode;\n}\n\nexport function newViewCache(\n  eventCache: CacheNode,\n  serverCache: CacheNode\n): ViewCache {\n  return { eventCache, serverCache };\n}\n\nexport function viewCacheUpdateEventSnap(\n  viewCache: ViewCache,\n  eventSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    new CacheNode(eventSnap, complete, filtered),\n    viewCache.serverCache\n  );\n}\n\nexport function viewCacheUpdateServerSnap(\n  viewCache: ViewCache,\n  serverSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    viewCache.eventCache,\n    new CacheNode(serverSnap, complete, filtered)\n  );\n}\n\nexport function viewCacheGetCompleteEventSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.eventCache.isFullyInitialized()\n    ? viewCache.eventCache.getNode()\n    : null;\n}\n\nexport function viewCacheGetCompleteServerSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.serverCache.isFullyInitialized()\n    ? viewCache.serverCache.getNode()\n    : null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathIsEmpty\n} from './util/Path';\nimport { each } from './util/util';\n\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n */\nexport class CompoundWrite {\n  constructor(public writeTree_: ImmutableTree<Node>) {}\n\n  static empty(): CompoundWrite {\n    return new CompoundWrite(new ImmutableTree(null));\n  }\n}\n\nexport function compoundWriteAddWrite(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  node: Node\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return new CompoundWrite(new ImmutableTree(node));\n  } else {\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      const rootMostPath = rootmost.path;\n      let value = rootmost.value;\n      const relativePath = newRelativePath(rootMostPath, path);\n      value = value.updateChild(relativePath, node);\n      return new CompoundWrite(\n        compoundWrite.writeTree_.set(rootMostPath, value)\n      );\n    } else {\n      const subtree = new ImmutableTree(node);\n      const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n}\n\nexport function compoundWriteAddWrites(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  updates: { [name: string]: Node }\n): CompoundWrite {\n  let newWrite = compoundWrite;\n  each(updates, (childKey: string, node: Node) => {\n    newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\n  });\n  return newWrite;\n}\n\n/**\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n * location, which must be removed by calling this method with that path.\n *\n * @param compoundWrite - The CompoundWrite to remove.\n * @param path - The path at which a write and all deeper writes should be removed\n * @returns The new CompoundWrite with the removed path\n */\nexport function compoundWriteRemoveWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return CompoundWrite.empty();\n  } else {\n    const newWriteTree = compoundWrite.writeTree_.setTree(\n      path,\n      new ImmutableTree<Node>(null)\n    );\n    return new CompoundWrite(newWriteTree);\n  }\n}\n\n/**\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n * considered \"complete\".\n *\n * @param compoundWrite - The CompoundWrite to check.\n * @param path - The path to check for\n * @returns Whether there is a complete write at that path\n */\nexport function compoundWriteHasCompleteWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): boolean {\n  return compoundWriteGetCompleteNode(compoundWrite, path) != null;\n}\n\n/**\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n * writes from deeper paths, but will return child nodes from a more shallow path.\n *\n * @param compoundWrite - The CompoundWrite to get the node from.\n * @param path - The path to get a complete write\n * @returns The node if complete at that path, or null otherwise.\n */\nexport function compoundWriteGetCompleteNode(\n  compoundWrite: CompoundWrite,\n  path: Path\n): Node | null {\n  const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n  if (rootmost != null) {\n    return compoundWrite.writeTree_\n      .get(rootmost.path)\n      .getChild(newRelativePath(rootmost.path, path));\n  } else {\n    return null;\n  }\n}\n\n/**\n * Returns all children that are guaranteed to be a complete overwrite.\n *\n * @param compoundWrite - The CompoundWrite to get children from.\n * @returns A list of all complete children.\n */\nexport function compoundWriteGetCompleteChildren(\n  compoundWrite: CompoundWrite\n): NamedNode[] {\n  const children: NamedNode[] = [];\n  const node = compoundWrite.writeTree_.value;\n  if (node != null) {\n    // If it's a leaf node, it has no children; so nothing to do.\n    if (!node.isLeafNode()) {\n      (node as ChildrenNode).forEachChild(\n        PRIORITY_INDEX,\n        (childName, childNode) => {\n          children.push(new NamedNode(childName, childNode));\n        }\n      );\n    }\n  } else {\n    compoundWrite.writeTree_.children.inorderTraversal(\n      (childName, childTree) => {\n        if (childTree.value != null) {\n          children.push(new NamedNode(childName, childTree.value));\n        }\n      }\n    );\n  }\n  return children;\n}\n\nexport function compoundWriteChildCompoundWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return compoundWrite;\n  } else {\n    const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\n    if (shadowingNode != null) {\n      return new CompoundWrite(new ImmutableTree(shadowingNode));\n    } else {\n      return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\n    }\n  }\n}\n\n/**\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n * @returns Whether this CompoundWrite is empty\n */\nexport function compoundWriteIsEmpty(compoundWrite: CompoundWrite): boolean {\n  return compoundWrite.writeTree_.isEmpty();\n}\n\n/**\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n * node\n * @param node - The node to apply this CompoundWrite to\n * @returns The node with all writes applied\n */\nexport function compoundWriteApply(\n  compoundWrite: CompoundWrite,\n  node: Node\n): Node {\n  return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\n}\n\nfunction applySubtreeWrite(\n  relativePath: Path,\n  writeTree: ImmutableTree<Node>,\n  node: Node\n): Node {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal((childKey, childTree) => {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(\n          childTree.value !== null,\n          'Priority writes must always be leaf nodes'\n        );\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(\n          pathChild(relativePath, childKey),\n          childTree,\n          node\n        );\n      }\n    });\n    // If there was a priority write, we only apply it if the node is not empty\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(\n        pathChild(relativePath, '.priority'),\n        priorityWrite\n      );\n    }\n    return node;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError, safeGet } from '@firebase/util';\n\nimport {\n  CompoundWrite,\n  compoundWriteAddWrite,\n  compoundWriteAddWrites,\n  compoundWriteApply,\n  compoundWriteChildCompoundWrite,\n  compoundWriteGetCompleteChildren,\n  compoundWriteGetCompleteNode,\n  compoundWriteHasCompleteWrite,\n  compoundWriteIsEmpty,\n  compoundWriteRemoveWrite\n} from './CompoundWrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Index } from './snap/indexes/Index';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathContains,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './util/Path';\nimport { each } from './util/util';\nimport { CacheNode } from './view/CacheNode';\n\n/**\n * Defines a single user-initiated write operation. May be the result of a set(), transaction(), or update() call. In\n * the case of a set() or transaction, snap wil be non-null.  In the case of an update(), children will be non-null.\n */\nexport interface WriteRecord {\n  writeId: number;\n  path: Path;\n  snap?: Node | null;\n  children?: { [k: string]: Node } | null;\n  visible: boolean;\n}\n\n/**\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n *\n */\nexport function writeTreeChildWrites(\n  writeTree: WriteTree,\n  path: Path\n): WriteTreeRef {\n  return newWriteTreeRef(path, writeTree);\n}\n\n/**\n * Record a new overwrite from user code.\n *\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\n */\nexport function writeTreeAddOverwrite(\n  writeTree: WriteTree,\n  path: Path,\n  snap: Node,\n  writeId: number,\n  visible?: boolean\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older write on top of newer ones'\n  );\n  if (visible === undefined) {\n    visible = true;\n  }\n  writeTree.allWrites.push({\n    path,\n    snap,\n    writeId,\n    visible\n  });\n\n  if (visible) {\n    writeTree.visibleWrites = compoundWriteAddWrite(\n      writeTree.visibleWrites,\n      path,\n      snap\n    );\n  }\n  writeTree.lastWriteId = writeId;\n}\n\n/**\n * Record a new merge from user code.\n */\nexport function writeTreeAddMerge(\n  writeTree: WriteTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older merge on top of newer ones'\n  );\n  writeTree.allWrites.push({\n    path,\n    children: changedChildren,\n    writeId,\n    visible: true\n  });\n\n  writeTree.visibleWrites = compoundWriteAddWrites(\n    writeTree.visibleWrites,\n    path,\n    changedChildren\n  );\n  writeTree.lastWriteId = writeId;\n}\n\nexport function writeTreeGetWrite(\n  writeTree: WriteTree,\n  writeId: number\n): WriteRecord | null {\n  for (let i = 0; i < writeTree.allWrites.length; i++) {\n    const record = writeTree.allWrites[i];\n    if (record.writeId === writeId) {\n      return record;\n    }\n  }\n  return null;\n}\n\n/**\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n *\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\n * events as a result).\n */\nexport function writeTreeRemoveWrite(\n  writeTree: WriteTree,\n  writeId: number\n): boolean {\n  // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n  // out of order.\n  //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n  //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n\n  const idx = writeTree.allWrites.findIndex(s => {\n    return s.writeId === writeId;\n  });\n  assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n  const writeToRemove = writeTree.allWrites[idx];\n  writeTree.allWrites.splice(idx, 1);\n\n  let removedWriteWasVisible = writeToRemove.visible;\n  let removedWriteOverlapsWithOtherWrites = false;\n\n  let i = writeTree.allWrites.length - 1;\n\n  while (removedWriteWasVisible && i >= 0) {\n    const currentWrite = writeTree.allWrites[i];\n    if (currentWrite.visible) {\n      if (\n        i >= idx &&\n        writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)\n      ) {\n        // The removed write was completely shadowed by a subsequent write.\n        removedWriteWasVisible = false;\n      } else if (pathContains(writeToRemove.path, currentWrite.path)) {\n        // Either we're covering some writes or they're covering part of us (depending on which came first).\n        removedWriteOverlapsWithOtherWrites = true;\n      }\n    }\n    i--;\n  }\n\n  if (!removedWriteWasVisible) {\n    return false;\n  } else if (removedWriteOverlapsWithOtherWrites) {\n    // There's some shadowing going on. Just rebuild the visible writes from scratch.\n    writeTreeResetTree_(writeTree);\n    return true;\n  } else {\n    // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n    if (writeToRemove.snap) {\n      writeTree.visibleWrites = compoundWriteRemoveWrite(\n        writeTree.visibleWrites,\n        writeToRemove.path\n      );\n    } else {\n      const children = writeToRemove.children;\n      each(children, (childName: string) => {\n        writeTree.visibleWrites = compoundWriteRemoveWrite(\n          writeTree.visibleWrites,\n          pathChild(writeToRemove.path, childName)\n        );\n      });\n    }\n    return true;\n  }\n}\n\nfunction writeTreeRecordContainsPath_(\n  writeRecord: WriteRecord,\n  path: Path\n): boolean {\n  if (writeRecord.snap) {\n    return pathContains(writeRecord.path, path);\n  } else {\n    for (const childName in writeRecord.children) {\n      if (\n        writeRecord.children.hasOwnProperty(childName) &&\n        pathContains(pathChild(writeRecord.path, childName), path)\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\n/**\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n */\nfunction writeTreeResetTree_(writeTree: WriteTree) {\n  writeTree.visibleWrites = writeTreeLayerTree_(\n    writeTree.allWrites,\n    writeTreeDefaultFilter_,\n    newEmptyPath()\n  );\n  if (writeTree.allWrites.length > 0) {\n    writeTree.lastWriteId =\n      writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\n  } else {\n    writeTree.lastWriteId = -1;\n  }\n}\n\n/**\n * The default filter used when constructing the tree. Keep everything that's visible.\n */\nfunction writeTreeDefaultFilter_(write: WriteRecord) {\n  return write.visible;\n}\n\n/**\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n * event data at that path.\n */\nfunction writeTreeLayerTree_(\n  writes: WriteRecord[],\n  filter: (w: WriteRecord) => boolean,\n  treeRoot: Path\n): CompoundWrite {\n  let compoundWrite = CompoundWrite.empty();\n  for (let i = 0; i < writes.length; ++i) {\n    const write = writes[i];\n    // Theory, a later set will either:\n    // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n    // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n    if (filter(write)) {\n      const writePath = write.path;\n      let relativePath: Path;\n      if (write.snap) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            relativePath,\n            write.snap\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            newEmptyPath(),\n            write.snap.getChild(relativePath)\n          );\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else if (write.children) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrites(\n            compoundWrite,\n            relativePath,\n            write.children\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          if (pathIsEmpty(relativePath)) {\n            compoundWrite = compoundWriteAddWrites(\n              compoundWrite,\n              newEmptyPath(),\n              write.children\n            );\n          } else {\n            const child = safeGet(write.children, pathGetFront(relativePath));\n            if (child) {\n              // There exists a child in this node that matches the root path\n              const deepNode = child.getChild(pathPopFront(relativePath));\n              compoundWrite = compoundWriteAddWrite(\n                compoundWrite,\n                newEmptyPath(),\n                deepNode\n              );\n            }\n          }\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else {\n        throw assertionError('WriteRecord should have .snap or .children');\n      }\n    }\n  }\n  return compoundWrite;\n}\n\n/**\n * Return a complete snapshot for the given path if there's visible write data at that path, else null.\n * No server data is considered.\n *\n */\nexport function writeTreeGetCompleteWriteData(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n * writes), attempt to calculate a complete snapshot for the given path\n *\n * @param writeIdsToExclude - An optional set to be excluded\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeCalcCompleteEventCache(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  if (!writeIdsToExclude && !includeHiddenWrites) {\n    const shadowingNode = compoundWriteGetCompleteNode(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      const subMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        treePath\n      );\n      if (compoundWriteIsEmpty(subMerge)) {\n        return completeServerCache;\n      } else if (\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())\n      ) {\n        // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n        return null;\n      } else {\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(subMerge, layeredCache);\n      }\n    }\n  } else {\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\n      return completeServerCache;\n    } else {\n      // If the server cache is null, and we don't have a complete cache, we need to return null\n      if (\n        !includeHiddenWrites &&\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(merge, newEmptyPath())\n      ) {\n        return null;\n      } else {\n        const filter = function (write: WriteRecord) {\n          return (\n            (write.visible || includeHiddenWrites) &&\n            (!writeIdsToExclude ||\n              !~writeIdsToExclude.indexOf(write.writeId)) &&\n            (pathContains(write.path, treePath) ||\n              pathContains(treePath, write.path))\n          );\n        };\n        const mergeAtPath = writeTreeLayerTree_(\n          writeTree.allWrites,\n          filter,\n          treePath\n        );\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(mergeAtPath, layeredCache);\n      }\n    }\n  }\n}\n\n/**\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n * Used when creating new views, to pre-fill their complete event children snapshot.\n */\nexport function writeTreeCalcCompleteEventChildren(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerChildren: ChildrenNode | null\n) {\n  let completeChildren = ChildrenNode.EMPTY_NODE as Node;\n  const topLevelSet = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    treePath\n  );\n  if (topLevelSet) {\n    if (!topLevelSet.isLeafNode()) {\n      // we're shadowing everything. Return the children.\n      topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          childSnap\n        );\n      });\n    }\n    return completeChildren;\n  } else if (completeServerChildren) {\n    // Layer any children we have on top of this\n    // We know we don't have a top-level set, so just enumerate existing children\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    completeServerChildren.forEachChild(\n      PRIORITY_INDEX,\n      (childName, childNode) => {\n        const node = compoundWriteApply(\n          compoundWriteChildCompoundWrite(merge, new Path(childName)),\n          childNode\n        );\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          node\n        );\n      }\n    );\n    // Add any complete children we have from the set\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  } else {\n    // We don't have anything to layer on top of. Layer on any children we have\n    // Note that we can return an empty snap if we have a defined delete\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  }\n}\n\n/**\n * Given that the underlying server data has updated, determine what, if anything, needs to be\n * applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events\n *\n * Either existingEventSnap or existingServerSnap must exist\n */\nexport function writeTreeCalcEventCacheAfterServerOverwrite(\n  writeTree: WriteTree,\n  treePath: Path,\n  childPath: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  assert(\n    existingEventSnap || existingServerSnap,\n    'Either existingEventSnap or existingServerSnap must exist'\n  );\n  const path = pathChild(treePath, childPath);\n  if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\n    // At this point we can probably guarantee that we're in case 2, meaning no events\n    // May need to check visibility while doing the findRootMostValueAndPath call\n    return null;\n  } else {\n    // No complete shadowing. We're either partially shadowing or not shadowing at all.\n    const childMerge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      path\n    );\n    if (compoundWriteIsEmpty(childMerge)) {\n      // We're not shadowing at all. Case 1\n      return existingServerSnap.getChild(childPath);\n    } else {\n      // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n      // However this is tricky to find out, since user updates don't necessary change the server\n      // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n      // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n      // only check if the updates change the serverNode.\n      // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getChild(childPath)\n      );\n    }\n  }\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeCalcCompleteChild(\n  writeTree: WriteTree,\n  treePath: Path,\n  childKey: string,\n  existingServerSnap: CacheNode\n): Node | null {\n  const path = pathChild(treePath, childKey);\n  const shadowingNode = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    path\n  );\n  if (shadowingNode != null) {\n    return shadowingNode;\n  } else {\n    if (existingServerSnap.isCompleteForChild(childKey)) {\n      const childMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        path\n      );\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getNode().getImmediateChild(childKey)\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n */\nexport function writeTreeShadowingWrite(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window.\n */\nexport function writeTreeCalcIndexedSlice(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  let toIterate: Node;\n  const merge = compoundWriteChildCompoundWrite(\n    writeTree.visibleWrites,\n    treePath\n  );\n  const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\n  if (shadowingNode != null) {\n    toIterate = shadowingNode;\n  } else if (completeServerData != null) {\n    toIterate = compoundWriteApply(merge, completeServerData);\n  } else {\n    // no children to iterate on\n    return [];\n  }\n  toIterate = toIterate.withIndex(index);\n  if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n    const nodes = [];\n    const cmp = index.getCompare();\n    const iter = reverse\n      ? (toIterate as ChildrenNode).getReverseIteratorFrom(startPost, index)\n      : (toIterate as ChildrenNode).getIteratorFrom(startPost, index);\n    let next = iter.getNext();\n    while (next && nodes.length < count) {\n      if (cmp(next, startPost) !== 0) {\n        nodes.push(next);\n      }\n      next = iter.getNext();\n    }\n    return nodes;\n  } else {\n    return [];\n  }\n}\n\nexport function newWriteTree(): WriteTree {\n  return {\n    visibleWrites: CompoundWrite.empty(),\n    allWrites: [],\n    lastWriteId: -1\n  };\n}\n\n/**\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\n * and addMerge(), and removed with removeWrite().\n */\nexport interface WriteTree {\n  /**\n   * A tree tracking the result of applying all visible writes.  This does not include transactions with\n   * applyLocally=false or writes that are completely shadowed by other writes.\n   */\n  visibleWrites: CompoundWrite;\n\n  /**\n   * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\n   * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\n   * used by transactions).\n   */\n  allWrites: WriteRecord[];\n\n  lastWriteId: number;\n}\n\n/**\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n * can lead to a more expensive calculation.\n *\n * @param writeIdsToExclude - Optional writes to exclude.\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeRefCalcCompleteEventCache(\n  writeTreeRef: WriteTreeRef,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  return writeTreeCalcCompleteEventCache(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerCache,\n    writeIdsToExclude,\n    includeHiddenWrites\n  );\n}\n\n/**\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n * mix of the given server data and write data.\n *\n */\nexport function writeTreeRefCalcCompleteEventChildren(\n  writeTreeRef: WriteTreeRef,\n  completeServerChildren: ChildrenNode | null\n): ChildrenNode {\n  return writeTreeCalcCompleteEventChildren(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerChildren\n  ) as ChildrenNode;\n}\n\n/**\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n * if anything, needs to be applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events should be raised\n *\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n *\n *\n */\nexport function writeTreeRefCalcEventCacheAfterServerOverwrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  return writeTreeCalcEventCacheAfterServerOverwrite(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    path,\n    existingEventSnap,\n    existingServerSnap\n  );\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n *\n */\nexport function writeTreeRefShadowingWrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path\n): Node | null {\n  return writeTreeShadowingWrite(\n    writeTreeRef.writeTree,\n    pathChild(writeTreeRef.treePath, path)\n  );\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window\n */\nexport function writeTreeRefCalcIndexedSlice(\n  writeTreeRef: WriteTreeRef,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  return writeTreeCalcIndexedSlice(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerData,\n    startPost,\n    count,\n    reverse,\n    index\n  );\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeRefCalcCompleteChild(\n  writeTreeRef: WriteTreeRef,\n  childKey: string,\n  existingServerCache: CacheNode\n): Node | null {\n  return writeTreeCalcCompleteChild(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    childKey,\n    existingServerCache\n  );\n}\n\n/**\n * Return a WriteTreeRef for a child.\n */\nexport function writeTreeRefChild(\n  writeTreeRef: WriteTreeRef,\n  childName: string\n): WriteTreeRef {\n  return newWriteTreeRef(\n    pathChild(writeTreeRef.treePath, childName),\n    writeTreeRef.writeTree\n  );\n}\n\nexport function newWriteTreeRef(\n  path: Path,\n  writeTree: WriteTree\n): WriteTreeRef {\n  return {\n    treePath: path,\n    writeTree\n  };\n}\n\n/**\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\n * just proxy to the underlying WriteTree.\n *\n */\nexport interface WriteTreeRef {\n  /**\n   * The path to this particular write tree ref. Used for calling methods on writeTree_ while exposing a simpler\n   * interface to callers.\n   */\n  readonly treePath: Path;\n\n  /**\n   * * A reference to the actual tree of write data. All methods are pass-through to the tree, but with the appropriate\n   * path prefixed.\n   *\n   * This lets us make cheap references to points in the tree for sync points without having to copy and maintain all of\n   * the data.\n   */\n  readonly writeTree: WriteTree;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport {\n  Change,\n  ChangeType,\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from './Change';\n\nexport class ChildChangeAccumulator {\n  private readonly changeMap: Map<string, Change> = new Map();\n\n  trackChildChange(change: Change) {\n    const type = change.type;\n    const childKey = change.childName!;\n    assert(\n      type === ChangeType.CHILD_ADDED ||\n        type === ChangeType.CHILD_CHANGED ||\n        type === ChangeType.CHILD_REMOVED,\n      'Only child changes supported for tracking'\n    );\n    assert(\n      childKey !== '.priority',\n      'Only non-priority child changes can be tracked.'\n    );\n    const oldChange = this.changeMap.get(childKey);\n    if (oldChange) {\n      const oldType = oldChange.type;\n      if (\n        type === ChangeType.CHILD_ADDED &&\n        oldType === ChangeType.CHILD_REMOVED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(\n            childKey,\n            change.snapshotNode,\n            oldChange.snapshotNode\n          )\n        );\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.delete(childKey);\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildRemoved(childKey, oldChange.oldSnap)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildAdded(childKey, change.snapshotNode)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap)\n        );\n      } else {\n        throw assertionError(\n          'Illegal combination of changes: ' +\n            change +\n            ' occurred after ' +\n            oldChange\n        );\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  }\n\n  getChanges(): Change[] {\n    return Array.from(this.changeMap.values());\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcIndexedSlice\n} from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { ViewCache, viewCacheGetCompleteServerSnap } from './ViewCache';\n\n/**\n * Since updates to filtered nodes might require nodes to be pulled in from \"outside\" the node, this interface\n * can help to get complete children that can be pulled in.\n * A class implementing this interface takes potentially multiple sources (e.g. user writes, server data from\n * other views etc.) to try it's best to get a complete child that might be useful in pulling into the view.\n *\n * @interface\n */\nexport interface CompleteChildSource {\n  getCompleteChild(childKey: string): Node | null;\n\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null;\n}\n\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class NoCompleteChildSource_ implements CompleteChildSource {\n  getCompleteChild(childKey?: string): Node | null {\n    return null;\n  }\n  getChildAfterChild(\n    index?: Index,\n    child?: NamedNode,\n    reverse?: boolean\n  ): NamedNode | null {\n    return null;\n  }\n}\n\n/**\n * Singleton instance.\n */\nexport const NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n */\nexport class WriteTreeCompleteChildSource implements CompleteChildSource {\n  constructor(\n    private writes_: WriteTreeRef,\n    private viewCache_: ViewCache,\n    private optCompleteServerCache_: Node | null = null\n  ) {}\n  getCompleteChild(childKey: string): Node | null {\n    const node = this.viewCache_.eventCache;\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode =\n        this.optCompleteServerCache_ != null\n          ? new CacheNode(this.optCompleteServerCache_, true, false)\n          : this.viewCache_.serverCache;\n      return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\n    }\n  }\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null {\n    const completeServerData =\n      this.optCompleteServerCache_ != null\n        ? this.optCompleteServerCache_\n        : viewCacheGetCompleteServerSnap(this.viewCache_);\n    const nodes = writeTreeRefCalcIndexedSlice(\n      this.writes_,\n      completeServerData,\n      child,\n      1,\n      reverse,\n      index\n    );\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { AckUserWrite } from '../operation/AckUserWrite';\nimport { Merge } from '../operation/Merge';\nimport { Operation, OperationType } from '../operation/Operation';\nimport { Overwrite } from '../operation/Overwrite';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetBack,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathParent,\n  pathPopFront\n} from '../util/Path';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren,\n  writeTreeRefCalcEventCacheAfterServerOverwrite,\n  writeTreeRefShadowingWrite\n} from '../WriteTree';\n\nimport { Change, changeValue } from './Change';\nimport { ChildChangeAccumulator } from './ChildChangeAccumulator';\nimport {\n  CompleteChildSource,\n  NO_COMPLETE_CHILD_SOURCE,\n  WriteTreeCompleteChildSource\n} from './CompleteChildSource';\nimport { NodeFilter } from './filter/NodeFilter';\nimport {\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap,\n  viewCacheUpdateEventSnap,\n  viewCacheUpdateServerSnap\n} from './ViewCache';\n\nexport interface ProcessorResult {\n  readonly viewCache: ViewCache;\n  readonly changes: Change[];\n}\n\nexport interface ViewProcessor {\n  readonly filter: NodeFilter;\n}\n\nexport function newViewProcessor(filter: NodeFilter): ViewProcessor {\n  return { filter };\n}\n\nexport function viewProcessorAssertIndexed(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache\n): void {\n  assert(\n    viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Event snap not indexed'\n  );\n  assert(\n    viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Server snap not indexed'\n  );\n}\n\nexport function viewProcessorApplyOperation(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null\n): ProcessorResult {\n  const accumulator = new ChildChangeAccumulator();\n  let newViewCache, filterServerNode;\n  if (operation.type === OperationType.OVERWRITE) {\n    const overwrite = operation as Overwrite;\n    if (overwrite.source.fromUser) {\n      newViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(overwrite.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered  and the\n      // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n      // again\n      filterServerNode =\n        overwrite.source.tagged ||\n        (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\n      newViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.MERGE) {\n    const merge = operation as Merge;\n    if (merge.source.fromUser) {\n      newViewCache = viewProcessorApplyUserMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(merge.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered\n      filterServerNode =\n        merge.source.tagged || oldViewCache.serverCache.isFiltered();\n      newViewCache = viewProcessorApplyServerMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.ACK_USER_WRITE) {\n    const ackUserWrite = operation as AckUserWrite;\n    if (!ackUserWrite.revert) {\n      newViewCache = viewProcessorAckUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        ackUserWrite.affectedTree,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      newViewCache = viewProcessorRevertUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n    newViewCache = viewProcessorListenComplete(\n      viewProcessor,\n      oldViewCache,\n      operation.path,\n      writesCache,\n      accumulator\n    );\n  } else {\n    throw assertionError('Unknown operation type: ' + operation.type);\n  }\n  const changes = accumulator.getChanges();\n  viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\n  return { viewCache: newViewCache, changes };\n}\n\nfunction viewProcessorMaybeAddValueEvent(\n  oldViewCache: ViewCache,\n  newViewCache: ViewCache,\n  accumulator: Change[]\n): void {\n  const eventSnap = newViewCache.eventCache;\n  if (eventSnap.isFullyInitialized()) {\n    const isLeafOrEmpty =\n      eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n    const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\n    if (\n      accumulator.length > 0 ||\n      !oldViewCache.eventCache.isFullyInitialized() ||\n      (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\n      !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())\n    ) {\n      accumulator.push(\n        changeValue(viewCacheGetCompleteEventSnap(newViewCache))\n      );\n    }\n  }\n}\n\nfunction viewProcessorGenerateEventCacheAfterServerEvent(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  changePath: Path,\n  writesCache: WriteTreeRef,\n  source: CompleteChildSource,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = viewCache.eventCache;\n  if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\n    // we have a shadowing write, ignore changes\n    return viewCache;\n  } else {\n    let newEventCache, serverNode;\n    if (pathIsEmpty(changePath)) {\n      // TODO: figure out how this plays with \"sliding ack windows\"\n      assert(\n        viewCache.serverCache.isFullyInitialized(),\n        'If change path is empty, we must have complete server data'\n      );\n      if (viewCache.serverCache.isFiltered()) {\n        // We need to special case this, because we need to only apply writes to complete children, or\n        // we might end up raising events for incomplete children. If the server data is filtered deep\n        // writes cannot be guaranteed to be complete\n        const serverCache = viewCacheGetCompleteServerSnap(viewCache);\n        const completeChildren =\n          serverCache instanceof ChildrenNode\n            ? serverCache\n            : ChildrenNode.EMPTY_NODE;\n        const completeEventChildren = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          completeChildren\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeEventChildren,\n          accumulator\n        );\n      } else {\n        const completeNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeNode,\n          accumulator\n        );\n      }\n    } else {\n      const childKey = pathGetFront(changePath);\n      if (childKey === '.priority') {\n        assert(\n          pathGetLength(changePath) === 1,\n          \"Can't have a priority with additional path components\"\n        );\n        const oldEventNode = oldEventSnap.getNode();\n        serverNode = viewCache.serverCache.getNode();\n        // we might have overwrites for this priority\n        const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(\n          writesCache,\n          changePath,\n          oldEventNode,\n          serverNode\n        );\n        if (updatedPriority != null) {\n          newEventCache = viewProcessor.filter.updatePriority(\n            oldEventNode,\n            updatedPriority\n          );\n        } else {\n          // priority didn't change, keep old node\n          newEventCache = oldEventSnap.getNode();\n        }\n      } else {\n        const childChangePath = pathPopFront(changePath);\n        // update child\n        let newEventChild;\n        if (oldEventSnap.isCompleteForChild(childKey)) {\n          serverNode = viewCache.serverCache.getNode();\n          const eventChildUpdate =\n            writeTreeRefCalcEventCacheAfterServerOverwrite(\n              writesCache,\n              changePath,\n              oldEventSnap.getNode(),\n              serverNode\n            );\n          if (eventChildUpdate != null) {\n            newEventChild = oldEventSnap\n              .getNode()\n              .getImmediateChild(childKey)\n              .updateChild(childChangePath, eventChildUpdate);\n          } else {\n            // Nothing changed, just keep the old child\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n          }\n        } else {\n          newEventChild = writeTreeRefCalcCompleteChild(\n            writesCache,\n            childKey,\n            viewCache.serverCache\n          );\n        }\n        if (newEventChild != null) {\n          newEventCache = viewProcessor.filter.updateChild(\n            oldEventSnap.getNode(),\n            childKey,\n            newEventChild,\n            childChangePath,\n            source,\n            accumulator\n          );\n        } else {\n          // no complete child available or no change\n          newEventCache = oldEventSnap.getNode();\n        }\n      }\n    }\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath),\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n\nfunction viewProcessorApplyServerOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerSnap = oldViewCache.serverCache;\n  let newServerCache;\n  const serverFilter = filterServerNode\n    ? viewProcessor.filter\n    : viewProcessor.filter.getIndexedFilter();\n  if (pathIsEmpty(changePath)) {\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      changedSnap,\n      null\n    );\n  } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n    // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n    const newServerNode = oldServerSnap\n      .getNode()\n      .updateChild(changePath, changedSnap);\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      newServerNode,\n      null\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (\n      !oldServerSnap.isCompleteForPath(changePath) &&\n      pathGetLength(changePath) > 1\n    ) {\n      // We don't update incomplete nodes with updates intended for other listeners\n      return oldViewCache;\n    }\n    const childChangePath = pathPopFront(changePath);\n    const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n    const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n    if (childKey === '.priority') {\n      newServerCache = serverFilter.updatePriority(\n        oldServerSnap.getNode(),\n        newChildNode\n      );\n    } else {\n      newServerCache = serverFilter.updateChild(\n        oldServerSnap.getNode(),\n        childKey,\n        newChildNode,\n        childChangePath,\n        NO_COMPLETE_CHILD_SOURCE,\n        null\n      );\n    }\n  }\n  const newViewCache = viewCacheUpdateServerSnap(\n    oldViewCache,\n    newServerCache,\n    oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath),\n    serverFilter.filtersNodes()\n  );\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    newViewCache,\n    completeCache\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    changePath,\n    writesCache,\n    source,\n    accumulator\n  );\n}\n\nfunction viewProcessorApplyUserOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = oldViewCache.eventCache;\n  let newViewCache, newEventCache;\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    oldViewCache,\n    completeCache\n  );\n  if (pathIsEmpty(changePath)) {\n    newEventCache = viewProcessor.filter.updateFullNode(\n      oldViewCache.eventCache.getNode(),\n      changedSnap,\n      accumulator\n    );\n    newViewCache = viewCacheUpdateEventSnap(\n      oldViewCache,\n      newEventCache,\n      true,\n      viewProcessor.filter.filtersNodes()\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (childKey === '.priority') {\n      newEventCache = viewProcessor.filter.updatePriority(\n        oldViewCache.eventCache.getNode(),\n        changedSnap\n      );\n      newViewCache = viewCacheUpdateEventSnap(\n        oldViewCache,\n        newEventCache,\n        oldEventSnap.isFullyInitialized(),\n        oldEventSnap.isFiltered()\n      );\n    } else {\n      const childChangePath = pathPopFront(changePath);\n      const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n      let newChild;\n      if (pathIsEmpty(childChangePath)) {\n        // Child overwrite, we can replace the child\n        newChild = changedSnap;\n      } else {\n        const childNode = source.getCompleteChild(childKey);\n        if (childNode != null) {\n          if (\n            pathGetBack(childChangePath) === '.priority' &&\n            childNode.getChild(pathParent(childChangePath)).isEmpty()\n          ) {\n            // This is a priority update on an empty node. If this node exists on the server, the\n            // server will send down the priority in the update, so ignore for now\n            newChild = childNode;\n          } else {\n            newChild = childNode.updateChild(childChangePath, changedSnap);\n          }\n        } else {\n          // There is no complete child node available\n          newChild = ChildrenNode.EMPTY_NODE;\n        }\n      }\n      if (!oldChild.equals(newChild)) {\n        const newEventSnap = viewProcessor.filter.updateChild(\n          oldEventSnap.getNode(),\n          childKey,\n          newChild,\n          childChangePath,\n          source,\n          accumulator\n        );\n        newViewCache = viewCacheUpdateEventSnap(\n          oldViewCache,\n          newEventSnap,\n          oldEventSnap.isFullyInitialized(),\n          viewProcessor.filter.filtersNodes()\n        );\n      } else {\n        newViewCache = oldViewCache;\n      }\n    }\n  }\n  return newViewCache;\n}\n\nfunction viewProcessorCacheHasChild(\n  viewCache: ViewCache,\n  childKey: string\n): boolean {\n  return viewCache.eventCache.isCompleteForChild(childKey);\n}\n\nfunction viewProcessorApplyUserMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorApplyMerge(\n  viewProcessor: ViewProcessor,\n  node: Node,\n  merge: ImmutableTree<Node>\n): Node {\n  merge.foreach((relativePath, childNode) => {\n    node = node.updateChild(relativePath, childNode);\n  });\n  return node;\n}\n\nfunction viewProcessorApplyServerMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n  // wait for the complete data update coming soon.\n  if (\n    viewCache.serverCache.getNode().isEmpty() &&\n    !viewCache.serverCache.isFullyInitialized()\n  ) {\n    return viewCache;\n  }\n\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  let viewMergeTree: ImmutableTree<Node>;\n  if (pathIsEmpty(path)) {\n    viewMergeTree = changedChildren;\n  } else {\n    viewMergeTree = new ImmutableTree<Node>(null).setTree(\n      path,\n      changedChildren\n    );\n  }\n  const serverNode = viewCache.serverCache.getNode();\n  viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n    if (serverNode.hasChild(childKey)) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n  viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n    const isUnknownDeepMerge =\n      !viewCache.serverCache.isCompleteForChild(childKey) &&\n      childMergeTree.value === null;\n    if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childMergeTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorAckUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  ackPath: Path,\n  affectedTree: ImmutableTree<boolean>,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\n    return viewCache;\n  }\n\n  // Only filter server node if it is currently filtered\n  const filterServerNode = viewCache.serverCache.isFiltered();\n\n  // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n  // now that it won't be shadowed.\n  const serverCache = viewCache.serverCache;\n  if (affectedTree.value != null) {\n    // This is an overwrite.\n    if (\n      (pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\n      serverCache.isCompleteForPath(ackPath)\n    ) {\n      return viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        serverCache.getNode().getChild(ackPath),\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else if (pathIsEmpty(ackPath)) {\n      // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n      // should just re-apply whatever we have in our cache as a merge.\n      let changedChildren = new ImmutableTree<Node>(null);\n      serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n        changedChildren = changedChildren.set(new Path(name), node);\n      });\n      return viewProcessorApplyServerMerge(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        changedChildren,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else {\n      return viewCache;\n    }\n  } else {\n    // This is a merge.\n    let changedChildren = new ImmutableTree<Node>(null);\n    affectedTree.foreach((mergePath, value) => {\n      const serverCachePath = pathChild(ackPath, mergePath);\n      if (serverCache.isCompleteForPath(serverCachePath)) {\n        changedChildren = changedChildren.set(\n          mergePath,\n          serverCache.getNode().getChild(serverCachePath)\n        );\n      }\n    });\n    return viewProcessorApplyServerMerge(\n      viewProcessor,\n      viewCache,\n      ackPath,\n      changedChildren,\n      writesCache,\n      completeCache,\n      filterServerNode,\n      accumulator\n    );\n  }\n}\n\nfunction viewProcessorListenComplete(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerNode = viewCache.serverCache;\n  const newViewCache = viewCacheUpdateServerSnap(\n    viewCache,\n    oldServerNode.getNode(),\n    oldServerNode.isFullyInitialized() || pathIsEmpty(path),\n    oldServerNode.isFiltered()\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    path,\n    writesCache,\n    NO_COMPLETE_CHILD_SOURCE,\n    accumulator\n  );\n}\n\nfunction viewProcessorRevertUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  let complete;\n  if (writeTreeRefShadowingWrite(writesCache, path) != null) {\n    return viewCache;\n  } else {\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      viewCache,\n      completeServerCache\n    );\n    const oldEventCache = viewCache.eventCache.getNode();\n    let newEventCache;\n    if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\n      let newNode;\n      if (viewCache.serverCache.isFullyInitialized()) {\n        newNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n      } else {\n        const serverChildren = viewCache.serverCache.getNode();\n        assert(\n          serverChildren instanceof ChildrenNode,\n          'serverChildren would be complete if leaf node'\n        );\n        newNode = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          serverChildren as ChildrenNode\n        );\n      }\n      newNode = newNode as Node;\n      newEventCache = viewProcessor.filter.updateFullNode(\n        oldEventCache,\n        newNode,\n        accumulator\n      );\n    } else {\n      const childKey = pathGetFront(path);\n      let newChild = writeTreeRefCalcCompleteChild(\n        writesCache,\n        childKey,\n        viewCache.serverCache\n      );\n      if (\n        newChild == null &&\n        viewCache.serverCache.isCompleteForChild(childKey)\n      ) {\n        newChild = oldEventCache.getImmediateChild(childKey);\n      }\n      if (newChild != null) {\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          newChild,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else if (viewCache.eventCache.getNode().hasChild(childKey)) {\n        // No complete child available, delete the existing one, if any\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          ChildrenNode.EMPTY_NODE,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else {\n        newEventCache = oldEventCache;\n      }\n      if (\n        newEventCache.isEmpty() &&\n        viewCache.serverCache.isFullyInitialized()\n      ) {\n        // We might have reverted all child writes. Maybe the old event was a leaf node\n        complete = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        if (complete.isLeafNode()) {\n          newEventCache = viewProcessor.filter.updateFullNode(\n            newEventCache,\n            complete,\n            accumulator\n          );\n        }\n      }\n    }\n    complete =\n      viewCache.serverCache.isFullyInitialized() ||\n      writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      complete,\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Operation, OperationType } from '../operation/Operation';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\nimport { WriteTreeRef } from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { Change, changeChildAdded, changeValue } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport {\n  EventGenerator,\n  eventGeneratorGenerateEventsForChanges\n} from './EventGenerator';\nimport { EventRegistration, QueryContext } from './EventRegistration';\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { queryParamsGetNodeFilter } from './QueryParams';\nimport {\n  newViewCache,\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap\n} from './ViewCache';\nimport {\n  newViewProcessor,\n  ViewProcessor,\n  viewProcessorApplyOperation,\n  viewProcessorAssertIndexed\n} from './ViewProcessor';\n\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n */\nexport class View {\n  processor_: ViewProcessor;\n  viewCache_: ViewCache;\n  eventRegistrations_: EventRegistration[] = [];\n  eventGenerator_: EventGenerator;\n\n  constructor(private query_: QueryContext, initialViewCache: ViewCache) {\n    const params = this.query_._queryParams;\n\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = queryParamsGetNodeFilter(params);\n\n    this.processor_ = newViewProcessor(filter);\n\n    const initialServerCache = initialViewCache.serverCache;\n    const initialEventCache = initialViewCache.eventCache;\n\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialServerCache.getNode(),\n      null\n    );\n    const eventSnap = filter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialEventCache.getNode(),\n      null\n    );\n    const newServerCache = new CacheNode(\n      serverSnap,\n      initialServerCache.isFullyInitialized(),\n      indexFilter.filtersNodes()\n    );\n    const newEventCache = new CacheNode(\n      eventSnap,\n      initialEventCache.isFullyInitialized(),\n      filter.filtersNodes()\n    );\n\n    this.viewCache_ = newViewCache(newEventCache, newServerCache);\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  get query(): QueryContext {\n    return this.query_;\n  }\n}\n\nexport function viewGetServerCache(view: View): Node | null {\n  return view.viewCache_.serverCache.getNode();\n}\n\nexport function viewGetCompleteNode(view: View): Node | null {\n  return viewCacheGetCompleteEventSnap(view.viewCache_);\n}\n\nexport function viewGetCompleteServerCache(\n  view: View,\n  path: Path\n): Node | null {\n  const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\n  if (cache) {\n    // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n    // we need to see if it contains the child we're interested in.\n    if (\n      view.query._queryParams.loadsAllData() ||\n      (!pathIsEmpty(path) &&\n        !cache.getImmediateChild(pathGetFront(path)).isEmpty())\n    ) {\n      return cache.getChild(path);\n    }\n  }\n  return null;\n}\n\nexport function viewIsEmpty(view: View): boolean {\n  return view.eventRegistrations_.length === 0;\n}\n\nexport function viewAddEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration\n) {\n  view.eventRegistrations_.push(eventRegistration);\n}\n\n/**\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\nexport function viewRemoveEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): Event[] {\n  const cancelEvents: CancelEvent[] = [];\n  if (cancelError) {\n    assert(\n      eventRegistration == null,\n      'A cancel should cancel all event registrations.'\n    );\n    const path = view.query._path;\n    view.eventRegistrations_.forEach(registration => {\n      const maybeEvent = registration.createCancelEvent(cancelError, path);\n      if (maybeEvent) {\n        cancelEvents.push(maybeEvent);\n      }\n    });\n  }\n\n  if (eventRegistration) {\n    let remaining = [];\n    for (let i = 0; i < view.eventRegistrations_.length; ++i) {\n      const existing = view.eventRegistrations_[i];\n      if (!existing.matches(eventRegistration)) {\n        remaining.push(existing);\n      } else if (eventRegistration.hasAnyCallback()) {\n        // We're removing just this one\n        remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\n        break;\n      }\n    }\n    view.eventRegistrations_ = remaining;\n  } else {\n    view.eventRegistrations_ = [];\n  }\n  return cancelEvents;\n}\n\n/**\n * Applies the given Operation, updates our cache, and returns the appropriate events.\n */\nexport function viewApplyOperation(\n  view: View,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null\n): Event[] {\n  if (\n    operation.type === OperationType.MERGE &&\n    operation.source.queryId !== null\n  ) {\n    assert(\n      viewCacheGetCompleteServerSnap(view.viewCache_),\n      'We should always have a full cache before handling merges'\n    );\n    assert(\n      viewCacheGetCompleteEventSnap(view.viewCache_),\n      'Missing event cache, even though we have a server cache'\n    );\n  }\n\n  const oldViewCache = view.viewCache_;\n  const result = viewProcessorApplyOperation(\n    view.processor_,\n    oldViewCache,\n    operation,\n    writesCache,\n    completeServerCache\n  );\n  viewProcessorAssertIndexed(view.processor_, result.viewCache);\n\n  assert(\n    result.viewCache.serverCache.isFullyInitialized() ||\n      !oldViewCache.serverCache.isFullyInitialized(),\n    'Once a server snap is complete, it should never go back'\n  );\n\n  view.viewCache_ = result.viewCache;\n\n  return viewGenerateEventsForChanges_(\n    view,\n    result.changes,\n    result.viewCache.eventCache.getNode(),\n    null\n  );\n}\n\nexport function viewGetInitialEvents(\n  view: View,\n  registration: EventRegistration\n): Event[] {\n  const eventSnap = view.viewCache_.eventCache;\n  const initialChanges: Change[] = [];\n  if (!eventSnap.getNode().isLeafNode()) {\n    const eventNode = eventSnap.getNode() as ChildrenNode;\n    eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      initialChanges.push(changeChildAdded(key, childNode));\n    });\n  }\n  if (eventSnap.isFullyInitialized()) {\n    initialChanges.push(changeValue(eventSnap.getNode()));\n  }\n  return viewGenerateEventsForChanges_(\n    view,\n    initialChanges,\n    eventSnap.getNode(),\n    registration\n  );\n}\n\nfunction viewGenerateEventsForChanges_(\n  view: View,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistration?: EventRegistration\n): Event[] {\n  const registrations = eventRegistration\n    ? [eventRegistration]\n    : view.eventRegistrations_;\n  return eventGeneratorGenerateEventsForChanges(\n    view.eventGenerator_,\n    changes,\n    eventCache,\n    registrations\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { Operation } from './operation/Operation';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport {\n  View,\n  viewAddEventRegistration,\n  viewApplyOperation,\n  viewGetCompleteServerCache,\n  viewGetInitialEvents,\n  viewIsEmpty,\n  viewRemoveEventRegistration\n} from './view/View';\nimport { newViewCache } from './view/ViewCache';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nexport class SyncPoint {\n  /**\n   * The Views being tracked at this location in the tree, stored as a map where the key is a\n   * queryId and the value is the View for that query.\n   *\n   * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n   */\n  readonly views: Map<string, View> = new Map();\n}\n\nexport function syncPointSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncPointGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport function syncPointIsEmpty(syncPoint: SyncPoint): boolean {\n  return syncPoint.views.size === 0;\n}\n\nexport function syncPointApplyOperation(\n  syncPoint: SyncPoint,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  optCompleteServerCache: Node | null\n): Event[] {\n  const queryId = operation.source.queryId;\n  if (queryId !== null) {\n    const view = syncPoint.views.get(queryId);\n    assert(view != null, 'SyncTree gave us an op for an invalid query.');\n    return viewApplyOperation(\n      view,\n      operation,\n      writesCache,\n      optCompleteServerCache\n    );\n  } else {\n    let events: Event[] = [];\n\n    for (const view of syncPoint.views.values()) {\n      events = events.concat(\n        viewApplyOperation(view, operation, writesCache, optCompleteServerCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Get a view for the specified query.\n *\n * @param query - The query to return a view for\n * @param writesCache\n * @param serverCache\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointGetView(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): View {\n  const queryId = query._queryIdentifier;\n  const view = syncPoint.views.get(queryId);\n  if (!view) {\n    // TODO: make writesCache take flag for complete server node\n    let eventCache = writeTreeRefCalcCompleteEventCache(\n      writesCache,\n      serverCacheComplete ? serverCache : null\n    );\n    let eventCacheComplete = false;\n    if (eventCache) {\n      eventCacheComplete = true;\n    } else if (serverCache instanceof ChildrenNode) {\n      eventCache = writeTreeRefCalcCompleteEventChildren(\n        writesCache,\n        serverCache\n      );\n      eventCacheComplete = false;\n    } else {\n      eventCache = ChildrenNode.EMPTY_NODE;\n      eventCacheComplete = false;\n    }\n    const viewCache = newViewCache(\n      new CacheNode(eventCache, eventCacheComplete, false),\n      new CacheNode(serverCache, serverCacheComplete, false)\n    );\n    return new View(query, viewCache);\n  }\n  return view;\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @param query\n * @param eventRegistration\n * @param writesCache\n * @param serverCache - Complete server cache, if we have it.\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointAddEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): Event[] {\n  const view = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!syncPoint.views.has(query._queryIdentifier)) {\n    syncPoint.views.set(query._queryIdentifier, view);\n  }\n  // This is guaranteed to exist now, we just created anything that was missing\n  viewAddEventRegistration(view, eventRegistration);\n  return viewGetInitialEvents(view, eventRegistration);\n}\n\n/**\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n *\n * If query is the default query, we'll check all views for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n *\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns removed queries and any cancel events\n */\nexport function syncPointRemoveEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): { removed: QueryContext[]; events: Event[] } {\n  const queryId = query._queryIdentifier;\n  const removed: QueryContext[] = [];\n  let cancelEvents: Event[] = [];\n  const hadCompleteView = syncPointHasCompleteView(syncPoint);\n  if (queryId === 'default') {\n    // When you do ref.off(...), we search all views for the registration to remove.\n    for (const [viewQueryId, view] of syncPoint.views.entries()) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(viewQueryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  } else {\n    // remove the callback from the specific view.\n    const view = syncPoint.views.get(queryId);\n    if (view) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(queryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  }\n\n  if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\n    // We removed our last complete view.\n    removed.push(\n      new (syncPointGetReferenceConstructor())(query._repo, query._path)\n    );\n  }\n\n  return { removed, events: cancelEvents };\n}\n\nexport function syncPointGetQueryViews(syncPoint: SyncPoint): View[] {\n  const result = [];\n  for (const view of syncPoint.views.values()) {\n    if (!view.query._queryParams.loadsAllData()) {\n      result.push(view);\n    }\n  }\n  return result;\n}\n\n/**\n * @param path - The path to the desired complete snapshot\n * @returns A complete cache, if it exists\n */\nexport function syncPointGetCompleteServerCache(\n  syncPoint: SyncPoint,\n  path: Path\n): Node | null {\n  let serverCache: Node | null = null;\n  for (const view of syncPoint.views.values()) {\n    serverCache = serverCache || viewGetCompleteServerCache(view, path);\n  }\n  return serverCache;\n}\n\nexport function syncPointViewForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): View | null {\n  const params = query._queryParams;\n  if (params.loadsAllData()) {\n    return syncPointGetCompleteView(syncPoint);\n  } else {\n    const queryId = query._queryIdentifier;\n    return syncPoint.views.get(queryId);\n  }\n}\n\nexport function syncPointViewExistsForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): boolean {\n  return syncPointViewForQuery(syncPoint, query) != null;\n}\n\nexport function syncPointHasCompleteView(syncPoint: SyncPoint): boolean {\n  return syncPointGetCompleteView(syncPoint) != null;\n}\n\nexport function syncPointGetCompleteView(syncPoint: SyncPoint): View | null {\n  for (const view of syncPoint.views.values()) {\n    if (view.query._queryParams.loadsAllData()) {\n      return view;\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { AckUserWrite } from './operation/AckUserWrite';\nimport { ListenComplete } from './operation/ListenComplete';\nimport { Merge } from './operation/Merge';\nimport {\n  newOperationSourceServer,\n  newOperationSourceServerTaggedQuery,\n  newOperationSourceUser,\n  Operation\n} from './operation/Operation';\nimport { Overwrite } from './operation/Overwrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport {\n  SyncPoint,\n  syncPointAddEventRegistration,\n  syncPointApplyOperation,\n  syncPointGetCompleteServerCache,\n  syncPointGetCompleteView,\n  syncPointGetQueryViews,\n  syncPointGetView,\n  syncPointHasCompleteView,\n  syncPointIsEmpty,\n  syncPointRemoveEventRegistration,\n  syncPointViewExistsForQuery,\n  syncPointViewForQuery\n} from './SyncPoint';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathGetFront,\n  pathIsEmpty\n} from './util/Path';\nimport { each, errorForServerCode } from './util/util';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport { View, viewGetCompleteNode, viewGetServerCache } from './view/View';\nimport {\n  newWriteTree,\n  WriteTree,\n  writeTreeAddMerge,\n  writeTreeAddOverwrite,\n  writeTreeCalcCompleteEventCache,\n  writeTreeChildWrites,\n  writeTreeGetWrite,\n  WriteTreeRef,\n  writeTreeRefChild,\n  writeTreeRemoveWrite\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\nexport function syncTreeSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncTreeGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport interface ListenProvider {\n  startListening(\n    query: QueryContext,\n    tag: number | null,\n    hashFn: () => string,\n    onComplete: (a: string, b?: unknown) => Event[]\n  ): Event[];\n\n  stopListening(a: QueryContext, b: number | null): void;\n}\n\n/**\n * Static tracker for next query tag.\n */\nlet syncTreeNextQueryTag_ = 1;\n\nexport function resetSyncTreeTag() {\n  syncTreeNextQueryTag_ = 1;\n}\n\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n */\nexport class SyncTree {\n  /**\n   * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n   */\n  syncPointTree_: ImmutableTree<SyncPoint> = new ImmutableTree<SyncPoint>(null);\n\n  /**\n   * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n   */\n  pendingWriteTree_: WriteTree = newWriteTree();\n\n  readonly tagToQueryMap: Map<number, string> = new Map();\n  readonly queryToTagMap: Map<string, number> = new Map();\n\n  /**\n   * @param listenProvider_ - Used by SyncTree to start / stop listening\n   *   to server data.\n   */\n  constructor(public listenProvider_: ListenProvider) {}\n}\n\n/**\n * Apply the data changes for a user-generated set() or transaction() call.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node,\n  writeId: number,\n  visible?: boolean\n): Event[] {\n  // Record pending write.\n  writeTreeAddOverwrite(\n    syncTree.pendingWriteTree_,\n    path,\n    newData,\n    writeId,\n    visible\n  );\n\n  if (!visible) {\n    return [];\n  } else {\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new Overwrite(newOperationSourceUser(), path, newData)\n    );\n  }\n}\n\n/**\n * Apply the data from a user-generated update() call\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n): Event[] {\n  // Record pending merge.\n  writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\n\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceUser(), path, changeTree)\n  );\n}\n\n/**\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n *\n * @param revert - True if the given write failed and needs to be reverted\n * @returns Events to raise.\n */\nexport function syncTreeAckUserWrite(\n  syncTree: SyncTree,\n  writeId: number,\n  revert: boolean = false\n) {\n  const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\n  const needToReevaluate = writeTreeRemoveWrite(\n    syncTree.pendingWriteTree_,\n    writeId\n  );\n  if (!needToReevaluate) {\n    return [];\n  } else {\n    let affectedTree = new ImmutableTree<boolean>(null);\n    if (write.snap != null) {\n      // overwrite\n      affectedTree = affectedTree.set(newEmptyPath(), true);\n    } else {\n      each(write.children, (pathString: string) => {\n        affectedTree = affectedTree.set(new Path(pathString), true);\n      });\n    }\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new AckUserWrite(write.path, affectedTree, revert)\n    );\n  }\n}\n\n/**\n * Apply new server data for the specified path..\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Overwrite(newOperationSourceServer(), path, newData)\n  );\n}\n\n/**\n * Apply new server data to be merged in at the specified path.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node }\n): Event[] {\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceServer(), path, changeTree)\n  );\n}\n\n/**\n * Apply a listen complete for a query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyListenComplete(\n  syncTree: SyncTree,\n  path: Path\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new ListenComplete(newOperationSourceServer(), path)\n  );\n}\n\n/**\n * Apply a listen complete for a tagged query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedListenComplete(\n  syncTree: SyncTree,\n  path: Path,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new ListenComplete(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Remove event callback(s).\n *\n * If query is the default query, we'll check all queries for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n *\n * @param eventRegistration - If null, all callbacks are removed.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @param skipListenerDedup - When performing a `get()`, we don't add any new listeners, so no\n *  deduping needs to take place. This flag allows toggling of that behavior\n * @returns Cancel events, if cancelError was provided.\n */\nexport function syncTreeRemoveEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error,\n  skipListenerDedup = false\n): Event[] {\n  // Find the syncPoint first. Then deal with whether or not it has matching listeners\n  const path = query._path;\n  const maybeSyncPoint = syncTree.syncPointTree_.get(path);\n  let cancelEvents: Event[] = [];\n  // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n  // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n  // not loadsAllData().\n  if (\n    maybeSyncPoint &&\n    (query._queryIdentifier === 'default' ||\n      syncPointViewExistsForQuery(maybeSyncPoint, query))\n  ) {\n    const removedAndEvents = syncPointRemoveEventRegistration(\n      maybeSyncPoint,\n      query,\n      eventRegistration,\n      cancelError\n    );\n    if (syncPointIsEmpty(maybeSyncPoint)) {\n      syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\n    }\n\n    const removed = removedAndEvents.removed;\n    cancelEvents = removedAndEvents.events;\n\n    if (!skipListenerDedup) {\n      /**\n       * We may have just removed one of many listeners and can short-circuit this whole process\n       * We may also not have removed a default listener, in which case all of the descendant listeners should already be\n       * properly set up.\n       */\n\n      // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n      // queryId === 'default'\n      const removingDefault =\n        -1 !==\n        removed.findIndex(query => {\n          return query._queryParams.loadsAllData();\n        });\n      const covered = syncTree.syncPointTree_.findOnPath(\n        path,\n        (relativePath, parentSyncPoint) =>\n          syncPointHasCompleteView(parentSyncPoint)\n      );\n\n      if (removingDefault && !covered) {\n        const subtree = syncTree.syncPointTree_.subtree(path);\n        // There are potentially child listeners. Determine what if any listens we need to send before executing the\n        // removal\n        if (!subtree.isEmpty()) {\n          // We need to fold over our subtree and collect the listeners to send\n          const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\n\n          // Ok, we've collected all the listens we need. Set them up.\n          for (let i = 0; i < newViews.length; ++i) {\n            const view = newViews[i],\n              newQuery = view.query;\n            const listener = syncTreeCreateListenerForView_(syncTree, view);\n            syncTree.listenProvider_.startListening(\n              syncTreeQueryForListening_(newQuery),\n              syncTreeTagForQuery(syncTree, newQuery),\n              listener.hashFn,\n              listener.onComplete\n            );\n          }\n        }\n        // Otherwise there's nothing below us, so nothing we need to start listening on\n      }\n      // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n      // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n      // Also, note that if we have a cancelError, it's already been removed at the provider level.\n      if (!covered && removed.length > 0 && !cancelError) {\n        // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n        // default. Otherwise, we need to iterate through and cancel each individual query\n        if (removingDefault) {\n          // We don't tag default listeners\n          const defaultTag: number | null = null;\n          syncTree.listenProvider_.stopListening(\n            syncTreeQueryForListening_(query),\n            defaultTag\n          );\n        } else {\n          removed.forEach((queryToRemove: QueryContext) => {\n            const tagToRemove = syncTree.queryToTagMap.get(\n              syncTreeMakeQueryKey_(queryToRemove)\n            );\n            syncTree.listenProvider_.stopListening(\n              syncTreeQueryForListening_(queryToRemove),\n              tagToRemove\n            );\n          });\n        }\n      }\n    }\n    // Now, clear all of the tags we're tracking for the removed listens\n    syncTreeRemoveTags_(syncTree, removed);\n  } else {\n    // No-op, this listener must've been already removed\n  }\n  return cancelEvents;\n}\n\n/**\n * Apply new server data for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  snap: Node,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey != null) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new Overwrite(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      snap\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // Query must have been removed already\n    return [];\n  }\n}\n\n/**\n * Apply server data to be merged in for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    const op = new Merge(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      changeTree\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeAddEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration,\n  skipSetupListener = false\n): Event[] {\n  const path = query._path;\n\n  let serverCache: Node | null = null;\n  let foundAncestorDefaultView = false;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(sp);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let serverCacheComplete;\n  if (serverCache != null) {\n    serverCacheComplete = true;\n  } else {\n    serverCacheComplete = false;\n    serverCache = ChildrenNode.EMPTY_NODE;\n    const subtree = syncTree.syncPointTree_.subtree(path);\n    subtree.foreachChild((childName, childSyncPoint) => {\n      const completeCache = syncPointGetCompleteServerCache(\n        childSyncPoint,\n        newEmptyPath()\n      );\n      if (completeCache) {\n        serverCache = serverCache.updateImmediateChild(\n          childName,\n          completeCache\n        );\n      }\n    });\n  }\n\n  const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\n  if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\n    // We need to track a tag for this query\n    const queryKey = syncTreeMakeQueryKey_(query);\n    assert(\n      !syncTree.queryToTagMap.has(queryKey),\n      'View does not exist, but we have a tag'\n    );\n    const tag = syncTreeGetNextQueryTag_();\n    syncTree.queryToTagMap.set(queryKey, tag);\n    syncTree.tagToQueryMap.set(tag, queryKey);\n  }\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\n  let events = syncPointAddEventRegistration(\n    syncPoint,\n    query,\n    eventRegistration,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!viewAlreadyExists && !foundAncestorDefaultView && !skipSetupListener) {\n    const view = syncPointViewForQuery(syncPoint, query);\n    events = events.concat(syncTreeSetupListener_(syncTree, query, view));\n  }\n  return events;\n}\n\n/**\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\n *\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n *\n * @param path - The path to the data we want\n * @param writeIdsToExclude - A specific set to be excluded\n */\nexport function syncTreeCalcCompleteEventCache(\n  syncTree: SyncTree,\n  path: Path,\n  writeIdsToExclude?: number[]\n): Node {\n  const includeHiddenSets = true;\n  const writeTree = syncTree.pendingWriteTree_;\n  const serverCache = syncTree.syncPointTree_.findOnPath(\n    path,\n    (pathSoFar, syncPoint) => {\n      const relativePath = newRelativePath(pathSoFar, path);\n      const serverCache = syncPointGetCompleteServerCache(\n        syncPoint,\n        relativePath\n      );\n      if (serverCache) {\n        return serverCache;\n      }\n    }\n  );\n  return writeTreeCalcCompleteEventCache(\n    writeTree,\n    path,\n    serverCache,\n    writeIdsToExclude,\n    includeHiddenSets\n  );\n}\n\nexport function syncTreeGetServerValue(\n  syncTree: SyncTree,\n  query: QueryContext\n): Node | null {\n  const path = query._path;\n  let serverCache: Node | null = null;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  const serverCacheComplete = serverCache != null;\n  const serverCacheNode: CacheNode | null = serverCacheComplete\n    ? new CacheNode(serverCache, true, false)\n    : null;\n  const writesCache: WriteTreeRef | null = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    query._path\n  );\n  const view: View = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE,\n    serverCacheComplete\n  );\n  return viewGetCompleteNode(view);\n}\n\n/**\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n *\n * NOTES:\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n *\n * - We call applyOperation() on each SyncPoint passing three things:\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n *   3. A snapshot Node with cached server data, if we have it.\n *\n * - We concatenate all of the events returned by each SyncPoint and return the result.\n */\nfunction syncTreeApplyOperationToSyncPoints_(\n  syncTree: SyncTree,\n  operation: Operation\n): Event[] {\n  return syncTreeApplyOperationHelper_(\n    operation,\n    syncTree.syncPointTree_,\n    /*serverCache=*/ null,\n    writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath())\n  );\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  if (pathIsEmpty(operation.path)) {\n    return syncTreeApplyOperationDescendantsHelper_(\n      operation,\n      syncPointTree,\n      serverCache,\n      writesCache\n    );\n  } else {\n    const syncPoint = syncPointTree.get(newEmptyPath());\n\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n\n    let events: Event[] = [];\n    const childName = pathGetFront(operation.path);\n    const childOperation = operation.operationForChild(childName);\n    const childTree = syncPointTree.children.get(childName);\n    if (childTree && childOperation) {\n      const childServerCache = serverCache\n        ? serverCache.getImmediateChild(childName)\n        : null;\n      const childWritesCache = writeTreeRefChild(writesCache, childName);\n      events = events.concat(\n        syncTreeApplyOperationHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n\n    if (syncPoint) {\n      events = events.concat(\n        syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationDescendantsHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  const syncPoint = syncPointTree.get(newEmptyPath());\n\n  // If we don't have cached server data, see if we can get it from this SyncPoint.\n  if (serverCache == null && syncPoint != null) {\n    serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let events: Event[] = [];\n  syncPointTree.children.inorderTraversal((childName, childTree) => {\n    const childServerCache = serverCache\n      ? serverCache.getImmediateChild(childName)\n      : null;\n    const childWritesCache = writeTreeRefChild(writesCache, childName);\n    const childOperation = operation.operationForChild(childName);\n    if (childOperation) {\n      events = events.concat(\n        syncTreeApplyOperationDescendantsHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n  });\n\n  if (syncPoint) {\n    events = events.concat(\n      syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n    );\n  }\n\n  return events;\n}\n\nfunction syncTreeCreateListenerForView_(\n  syncTree: SyncTree,\n  view: View\n): { hashFn(): string; onComplete(a: string, b?: unknown): Event[] } {\n  const query = view.query;\n  const tag = syncTreeTagForQuery(syncTree, query);\n\n  return {\n    hashFn: () => {\n      const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\n      return cache.hash();\n    },\n    onComplete: (status: string): Event[] => {\n      if (status === 'ok') {\n        if (tag) {\n          return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\n        } else {\n          return syncTreeApplyListenComplete(syncTree, query._path);\n        }\n      } else {\n        // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n        // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n        const error = errorForServerCode(status, query);\n        return syncTreeRemoveEventRegistration(\n          syncTree,\n          query,\n          /*eventRegistration*/ null,\n          error\n        );\n      }\n    }\n  };\n}\n\n/**\n * Return the tag associated with the given query.\n */\nexport function syncTreeTagForQuery(\n  syncTree: SyncTree,\n  query: QueryContext\n): number | null {\n  const queryKey = syncTreeMakeQueryKey_(query);\n  return syncTree.queryToTagMap.get(queryKey);\n}\n\n/**\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n */\nfunction syncTreeMakeQueryKey_(query: QueryContext): string {\n  return query._path.toString() + '$' + query._queryIdentifier;\n}\n\n/**\n * Return the query associated with the given tag, if we have one\n */\nfunction syncTreeQueryKeyForTag_(\n  syncTree: SyncTree,\n  tag: number\n): string | null {\n  return syncTree.tagToQueryMap.get(tag);\n}\n\n/**\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n */\nfunction syncTreeParseQueryKey_(queryKey: string): {\n  queryId: string;\n  path: Path;\n} {\n  const splitIndex = queryKey.indexOf('$');\n  assert(\n    splitIndex !== -1 && splitIndex < queryKey.length - 1,\n    'Bad queryKey.'\n  );\n  return {\n    queryId: queryKey.substr(splitIndex + 1),\n    path: new Path(queryKey.substr(0, splitIndex))\n  };\n}\n\n/**\n * A helper method to apply tagged operations\n */\nfunction syncTreeApplyTaggedOperation_(\n  syncTree: SyncTree,\n  queryPath: Path,\n  operation: Operation\n): Event[] {\n  const syncPoint = syncTree.syncPointTree_.get(queryPath);\n  assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n  const writesCache = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    queryPath\n  );\n  return syncPointApplyOperation(syncPoint, operation, writesCache, null);\n}\n\n/**\n * This collapses multiple unfiltered views into a single view, since we only need a single\n * listener for them.\n */\nfunction syncTreeCollectDistinctViewsForSubTree_(\n  subtree: ImmutableTree<SyncPoint>\n): View[] {\n  return subtree.fold<View[]>((relativePath, maybeChildSyncPoint, childMap) => {\n    if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n      const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\n      return [completeView];\n    } else {\n      // No complete view here, flatten any deeper listens into an array\n      let views: View[] = [];\n      if (maybeChildSyncPoint) {\n        views = syncPointGetQueryViews(maybeChildSyncPoint);\n      }\n      each(childMap, (_key: string, childViews: View[]) => {\n        views = views.concat(childViews);\n      });\n      return views;\n    }\n  });\n}\n\n/**\n * Normalizes a query to a query we send the server for listening\n *\n * @returns The normalized query\n */\nfunction syncTreeQueryForListening_(query: QueryContext): QueryContext {\n  if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\n    // We treat queries that load all data as default queries\n    // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n    // from Query\n    return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\n  } else {\n    return query;\n  }\n}\n\nfunction syncTreeRemoveTags_(syncTree: SyncTree, queries: QueryContext[]) {\n  for (let j = 0; j < queries.length; ++j) {\n    const removedQuery = queries[j];\n    if (!removedQuery._queryParams.loadsAllData()) {\n      // We should have a tag for this\n      const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\n      const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\n      syncTree.queryToTagMap.delete(removedQueryKey);\n      syncTree.tagToQueryMap.delete(removedQueryTag);\n    }\n  }\n}\n\n/**\n * Static accessor for query tags.\n */\nfunction syncTreeGetNextQueryTag_(): number {\n  return syncTreeNextQueryTag_++;\n}\n\n/**\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\n *\n * @returns This method can return events to support synchronous data sources\n */\nfunction syncTreeSetupListener_(\n  syncTree: SyncTree,\n  query: QueryContext,\n  view: View\n): Event[] {\n  const path = query._path;\n  const tag = syncTreeTagForQuery(syncTree, query);\n  const listener = syncTreeCreateListenerForView_(syncTree, view);\n\n  const events = syncTree.listenProvider_.startListening(\n    syncTreeQueryForListening_(query),\n    tag,\n    listener.hashFn,\n    listener.onComplete\n  );\n\n  const subtree = syncTree.syncPointTree_.subtree(path);\n  // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n  // may need to shadow other listens as well.\n  if (tag) {\n    assert(\n      !syncPointHasCompleteView(subtree.value),\n      \"If we're adding a query, it shouldn't be shadowed\"\n    );\n  } else {\n    // Shadow everything at or below this location, this is a default listener.\n    const queriesToStop = subtree.fold<QueryContext[]>(\n      (relativePath, maybeChildSyncPoint, childMap) => {\n        if (\n          !pathIsEmpty(relativePath) &&\n          maybeChildSyncPoint &&\n          syncPointHasCompleteView(maybeChildSyncPoint)\n        ) {\n          return [syncPointGetCompleteView(maybeChildSyncPoint).query];\n        } else {\n          // No default listener here, flatten any deeper queries into an array\n          let queries: QueryContext[] = [];\n          if (maybeChildSyncPoint) {\n            queries = queries.concat(\n              syncPointGetQueryViews(maybeChildSyncPoint).map(\n                view => view.query\n              )\n            );\n          }\n          each(childMap, (_key: string, childQueries: QueryContext[]) => {\n            queries = queries.concat(childQueries);\n          });\n          return queries;\n        }\n      }\n    );\n    for (let i = 0; i < queriesToStop.length; ++i) {\n      const queryToStop = queriesToStop[i];\n      syncTree.listenProvider_.stopListening(\n        syncTreeQueryForListening_(queryToStop),\n        syncTreeTagForQuery(syncTree, queryToStop)\n      );\n    }\n  }\n  return events;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { LeafNode } from '../snap/LeafNode';\nimport { Node } from '../snap/Node';\nimport { nodeFromJSON } from '../snap/nodeFromJSON';\nimport { SyncTree, syncTreeCalcCompleteEventCache } from '../SyncTree';\n\nimport { Indexable } from './misc';\nimport { Path, pathChild } from './Path';\n\n/* It's critical for performance that we do not calculate actual values from a SyncTree\n * unless and until the value is needed. Because we expose both a SyncTree and Node\n * version of deferred value resolution, we ned a wrapper class that will let us share\n * code.\n *\n * @see https://github.com/firebase/firebase-js-sdk/issues/2487\n */\ninterface ValueProvider {\n  getImmediateChild(childName: string): ValueProvider;\n  node(): Node;\n}\n\nclass ExistingValueProvider implements ValueProvider {\n  constructor(readonly node_: Node) {}\n\n  getImmediateChild(childName: string): ValueProvider {\n    const child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  }\n\n  node(): Node {\n    return this.node_;\n  }\n}\n\nclass DeferredValueProvider implements ValueProvider {\n  private syncTree_: SyncTree;\n  private path_: Path;\n\n  constructor(syncTree: SyncTree, path: Path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n\n  getImmediateChild(childName: string): ValueProvider {\n    const childPath = pathChild(this.path_, childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  }\n\n  node(): Node {\n    return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\n  }\n}\n\n/**\n * Generate placeholders for deferred values.\n */\nexport const generateWithValues = function (\n  values: {\n    [k: string]: unknown;\n  } | null\n): { [k: string]: unknown } {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n */\nexport const resolveDeferredLeafValue = function (\n  value: { [k: string]: unknown } | string | number | boolean,\n  existingVal: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  if (!value || typeof value !== 'object') {\n    return value as string | number | boolean;\n  }\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal, serverValues);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\n\nconst resolveScalarDeferredValue = function (\n  op: string,\n  existing: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'] as string | number | boolean;\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\n\nconst resolveComplexDeferredValue = function (\n  op: object,\n  existing: ValueProvider,\n  unused: { [k: string]: unknown }\n): string | number | boolean {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n  const delta = op['increment'];\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n\n  const existingNode = existing.node();\n  assert(\n    existingNode !== null && typeof existingNode !== 'undefined',\n    'Expected ChildrenNode.EMPTY_NODE for nulls'\n  );\n\n  // Incrementing a non-number sets the value to the incremented amount\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n\n  const leaf = existingNode as LeafNode;\n  const existingVal = leaf.getValue();\n  if (typeof existingVal !== 'number') {\n    return delta;\n  }\n\n  // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n  return existingVal + delta;\n};\n\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param path - path to which write is relative\n * @param node - new data written at path\n * @param syncTree - current data\n */\nexport const resolveDeferredValueTree = function (\n  path: Path,\n  node: Node,\n  syncTree: SyncTree,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new DeferredValueProvider(syncTree, path),\n    serverValues\n  );\n};\n\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n */\nexport const resolveDeferredValueSnapshot = function (\n  node: Node,\n  existing: Node,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new ExistingValueProvider(existing),\n    serverValues\n  );\n};\n\nfunction resolveDeferredValue(\n  node: Node,\n  existingVal: ValueProvider,\n  serverValues: Indexable\n): Node {\n  const rawPri = node.getPriority().val() as\n    | Indexable\n    | boolean\n    | null\n    | number\n    | string;\n  const priority = resolveDeferredLeafValue(\n    rawPri,\n    existingVal.getImmediateChild('.priority'),\n    serverValues\n  );\n  let newNode: Node;\n\n  if (node.isLeafNode()) {\n    const leafNode = node as LeafNode;\n    const value = resolveDeferredLeafValue(\n      leafNode.getValue(),\n      existingVal,\n      serverValues\n    );\n    if (\n      value !== leafNode.getValue() ||\n      priority !== leafNode.getPriority().val()\n    ) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node as ChildrenNode;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const newChildNode = resolveDeferredValue(\n        childNode,\n        existingVal.getImmediateChild(childName),\n        serverValues\n      );\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, safeGet } from '@firebase/util';\n\nimport { Path, pathGetFront, pathPopFront } from './Path';\nimport { each } from './util';\n\n/**\n * Node in a Tree.\n */\nexport interface TreeNode<T> {\n  // TODO: Consider making accessors that create children and value lazily or\n  // separate Internal / Leaf 'types'.\n  children: Record<string, TreeNode<T>>;\n  childCount: number;\n  value?: T;\n}\n\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nexport class Tree<T> {\n  /**\n   * @param name - Optional name of the node.\n   * @param parent - Optional parent node.\n   * @param node - Optional node to wrap.\n   */\n  constructor(\n    readonly name: string = '',\n    readonly parent: Tree<T> | null = null,\n    public node: TreeNode<T> = { children: {}, childCount: 0 }\n  ) {}\n}\n\n/**\n * Returns a sub-Tree for the given path.\n *\n * @param pathObj - Path to look up.\n * @returns Tree for path.\n */\nexport function treeSubTree<T>(tree: Tree<T>, pathObj: string | Path): Tree<T> {\n  // TODO: Require pathObj to be Path?\n  let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n  let child = tree,\n    next = pathGetFront(path);\n  while (next !== null) {\n    const childNode = safeGet(child.node.children, next) || {\n      children: {},\n      childCount: 0\n    };\n    child = new Tree<T>(next, child, childNode);\n    path = pathPopFront(path);\n    next = pathGetFront(path);\n  }\n\n  return child;\n}\n\n/**\n * Returns the data associated with this tree node.\n *\n * @returns The data or null if no data exists.\n */\nexport function treeGetValue<T>(tree: Tree<T>): T | undefined {\n  return tree.node.value;\n}\n\n/**\n * Sets data to this tree node.\n *\n * @param value - Value to set.\n */\nexport function treeSetValue<T>(tree: Tree<T>, value: T | undefined): void {\n  tree.node.value = value;\n  treeUpdateParents(tree);\n}\n\n/**\n * @returns Whether the tree has any children.\n */\nexport function treeHasChildren<T>(tree: Tree<T>): boolean {\n  return tree.node.childCount > 0;\n}\n\n/**\n * @returns Whethe rthe tree is empty (no value or children).\n */\nexport function treeIsEmpty<T>(tree: Tree<T>): boolean {\n  return treeGetValue(tree) === undefined && !treeHasChildren(tree);\n}\n\n/**\n * Calls action for each child of this tree node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachChild<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  each(tree.node.children, (child: string, childTree: TreeNode<T>) => {\n    action(new Tree<T>(child, tree, childTree));\n  });\n}\n\n/**\n * Does a depth-first traversal of this node's descendants, calling action for each one.\n *\n * @param action - Action to be called for each child.\n * @param includeSelf - Whether to call action on this node as well. Defaults to\n *   false.\n * @param childrenFirst - Whether to call action on children before calling it on\n *   parent.\n */\nexport function treeForEachDescendant<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void,\n  includeSelf?: boolean,\n  childrenFirst?: boolean\n): void {\n  if (includeSelf && !childrenFirst) {\n    action(tree);\n  }\n\n  treeForEachChild(tree, child => {\n    treeForEachDescendant(child, action, true, childrenFirst);\n  });\n\n  if (includeSelf && childrenFirst) {\n    action(tree);\n  }\n}\n\n/**\n * Calls action on each ancestor node.\n *\n * @param action - Action to be called on each parent; return\n *   true to abort.\n * @param includeSelf - Whether to call action on this node as well.\n * @returns true if the action callback returned true.\n */\nexport function treeForEachAncestor<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => unknown,\n  includeSelf?: boolean\n): boolean {\n  let node = includeSelf ? tree : tree.parent;\n  while (node !== null) {\n    if (action(node)) {\n      return true;\n    }\n    node = node.parent;\n  }\n  return false;\n}\n\n/**\n * Does a depth-first traversal of this node's descendants.  When a descendant with a value\n * is found, action is called on it and traversal does not continue inside the node.\n * Action is *not* called on this node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachImmediateDescendantWithValue<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  treeForEachChild(tree, child => {\n    if (treeGetValue(child) !== undefined) {\n      action(child);\n    } else {\n      treeForEachImmediateDescendantWithValue(child, action);\n    }\n  });\n}\n\n/**\n * @returns The path of this tree node, as a Path.\n */\nexport function treeGetPath<T>(tree: Tree<T>) {\n  return new Path(\n    tree.parent === null\n      ? tree.name\n      : treeGetPath(tree.parent) + '/' + tree.name\n  );\n}\n\n/**\n * Adds or removes this child from its parent based on whether it's empty or not.\n */\nfunction treeUpdateParents<T>(tree: Tree<T>) {\n  if (tree.parent !== null) {\n    treeUpdateChild(tree.parent, tree.name, tree);\n  }\n}\n\n/**\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\n *\n * @param childName - The name of the child to update.\n * @param child - The child to update.\n */\nfunction treeUpdateChild<T>(tree: Tree<T>, childName: string, child: Tree<T>) {\n  const childEmpty = treeIsEmpty(child);\n  const childExists = contains(tree.node.children, childName);\n  if (childEmpty && childExists) {\n    delete tree.node.children[childName];\n    tree.node.childCount--;\n    treeUpdateParents(tree);\n  } else if (!childEmpty && !childExists) {\n    tree.node.children[childName] = child.node;\n    tree.node.childCount++;\n    treeUpdateParents(tree);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  contains,\n  errorPrefix as errorPrefixFxn,\n  safeGet,\n  stringLength\n} from '@firebase/util';\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport {\n  Path,\n  pathChild,\n  pathCompare,\n  pathContains,\n  pathGetBack,\n  pathGetFront,\n  pathSlice,\n  ValidationPath,\n  validationPathPop,\n  validationPathPush,\n  validationPathToErrorString\n} from './Path';\nimport { each, isInvalidJSONNumber } from './util';\n\n/**\n * True for invalid Firebase keys\n */\nexport const INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n */\nexport const INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n\n/**\n * Maximum number of characters to allow in leaf value\n */\nexport const MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n\nexport const isValidKey = function (key: unknown): boolean {\n  return (\n    typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key)\n  );\n};\n\nexport const isValidPathString = function (pathString: string): boolean {\n  return (\n    typeof pathString === 'string' &&\n    pathString.length !== 0 &&\n    !INVALID_PATH_REGEX_.test(pathString)\n  );\n};\n\nexport const isValidRootPathString = function (pathString: string): boolean {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n\nexport const isValidPriority = function (priority: unknown): boolean {\n  return (\n    priority === null ||\n    typeof priority === 'string' ||\n    (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\n    (priority &&\n      typeof priority === 'object' &&\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      contains(priority as any, '.sv'))\n  );\n};\n\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n */\nexport const validateFirebaseDataArg = function (\n  fnName: string,\n  value: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && value === undefined) {\n    return;\n  }\n\n  validateFirebaseData(errorPrefixFxn(fnName, 'value'), value, path);\n};\n\n/**\n * Validate a data object client-side before sending to server.\n */\nexport const validateFirebaseData = function (\n  errorPrefix: string,\n  data: unknown,\n  path_: Path | ValidationPath\n) {\n  const path =\n    path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(\n      errorPrefix + 'contains undefined ' + validationPathToErrorString(path)\n    );\n  }\n  if (typeof data === 'function') {\n    throw new Error(\n      errorPrefix +\n        'contains a function ' +\n        validationPathToErrorString(path) +\n        ' with contents = ' +\n        data.toString()\n    );\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(\n      errorPrefix +\n        'contains ' +\n        data.toString() +\n        ' ' +\n        validationPathToErrorString(path)\n    );\n  }\n\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (\n    typeof data === 'string' &&\n    data.length > MAX_LEAF_SIZE_ / 3 &&\n    stringLength(data) > MAX_LEAF_SIZE_\n  ) {\n    throw new Error(\n      errorPrefix +\n        'contains a string greater than ' +\n        MAX_LEAF_SIZE_ +\n        ' utf8 bytes ' +\n        validationPathToErrorString(path) +\n        \" ('\" +\n        data.substring(0, 50) +\n        \"...')\"\n    );\n  }\n\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, (key: string, value: unknown) => {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n        if (!isValidKey(key)) {\n          throw new Error(\n            errorPrefix +\n              ' contains an invalid key (' +\n              key +\n              ') ' +\n              validationPathToErrorString(path) +\n              '.  Keys must be non-empty strings ' +\n              'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n          );\n        }\n      }\n\n      validationPathPush(path, key);\n      validateFirebaseData(errorPrefix, value, path);\n      validationPathPop(path);\n    });\n\n    if (hasDotValue && hasActualChild) {\n      throw new Error(\n        errorPrefix +\n          ' contains \".value\" child ' +\n          validationPathToErrorString(path) +\n          ' in addition to actual children.'\n      );\n    }\n  }\n};\n\n/**\n * Pre-validate paths passed in the firebase function.\n */\nexport const validateFirebaseMergePaths = function (\n  errorPrefix: string,\n  mergePaths: Path[]\n) {\n  let i, curPath: Path;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = pathSlice(curPath);\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) {\n        // .priority is OK\n      } else if (!isValidKey(keys[j])) {\n        throw new Error(\n          errorPrefix +\n            'contains an invalid key (' +\n            keys[j] +\n            ') in path ' +\n            curPath.toString() +\n            '. Keys must be non-empty strings ' +\n            'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n        );\n      }\n    }\n  }\n\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(pathCompare);\n  let prevPath: Path | null = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && pathContains(prevPath, curPath)) {\n      throw new Error(\n        errorPrefix +\n          'contains a path ' +\n          prevPath.toString() +\n          ' that is ancestor of another path ' +\n          curPath.toString()\n      );\n    }\n    prevPath = curPath;\n  }\n};\n\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n */\nexport const validateFirebaseMergeDataArg = function (\n  fnName: string,\n  data: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  const errorPrefix = errorPrefixFxn(fnName, 'values');\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(\n      errorPrefix + ' must be an object containing the children to replace.'\n    );\n  }\n\n  const mergePaths: Path[] = [];\n  each(data, (key: string, value: unknown) => {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix, value, pathChild(path, curPath));\n    if (pathGetBack(curPath) === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(\n          errorPrefix +\n            \"contains an invalid value for '\" +\n            curPath.toString() +\n            \"', which must be a valid \" +\n            'Firebase priority (a string, finite number, server value, or null).'\n        );\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\n\nexport const validatePriority = function (\n  fnName: string,\n  priority: unknown,\n  optional: boolean\n) {\n  if (optional && priority === undefined) {\n    return;\n  }\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'is ' +\n        priority.toString() +\n        ', but must be a valid Firebase priority (a string, finite number, ' +\n        'server value, or null).'\n    );\n  }\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'must be a valid Firebase priority ' +\n        '(a string, finite number, server value, or null).'\n    );\n  }\n};\n\nexport const validateKey = function (\n  fnName: string,\n  argumentName: string,\n  key: string,\n  optional: boolean\n) {\n  if (optional && key === undefined) {\n    return;\n  }\n  if (!isValidKey(key)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid key = \"' +\n        key +\n        '\".  Firebase keys must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").'\n    );\n  }\n};\n\n/**\n * @internal\n */\nexport const validatePathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n\n  if (!isValidPathString(pathString)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid path = \"' +\n        pathString +\n        '\". Paths must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"'\n    );\n  }\n};\n\nexport const validateRootPathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentName, pathString, optional);\n};\n\n/**\n * @internal\n */\nexport const validateWritablePath = function (fnName: string, path: Path) {\n  if (pathGetFront(path) === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nexport const validateUrl = function (\n  fnName: string,\n  parsedUrl: { repoInfo: RepoInfo; path: Path }\n) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n  if (\n    !(typeof parsedUrl.repoInfo.host === 'string') ||\n    parsedUrl.repoInfo.host.length === 0 ||\n    (!isValidKey(parsedUrl.repoInfo.namespace) &&\n      parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\n    (pathString.length !== 0 && !isValidRootPathString(pathString))\n  ) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'url') +\n        'must be a valid firebase URL and ' +\n        'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".'\n    );\n  }\n};\n\nexport const validateString = function (\n  fnName: string,\n  argumentName: string,\n  string: unknown,\n  optional: boolean\n) {\n  if (optional && string === undefined) {\n    return;\n  }\n  if (!(typeof string === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid string.'\n    );\n  }\n};\n\nexport const validateObject = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  optional: boolean\n) {\n  if (optional && obj === undefined) {\n    return;\n  }\n  if (!(obj && typeof obj === 'object') || obj === null) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid object.'\n    );\n  }\n};\n\nexport const validateObjectContainsKey = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  key: string,\n  optional: boolean,\n  optType?: string\n) {\n  const objectContainsKey =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    obj && typeof obj === 'object' && contains(obj as any, key);\n\n  if (!objectContainsKey) {\n    if (optional) {\n      return;\n    } else {\n      throw new Error(\n        errorPrefixFxn(fnName, argumentName) +\n          'must contain the key \"' +\n          key +\n          '\"'\n      );\n    }\n  }\n\n  if (optType) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const val = safeGet(obj as any, key);\n    if (\n      (optType === 'number' && !(typeof val === 'number')) ||\n      (optType === 'string' && !(typeof val === 'string')) ||\n      (optType === 'boolean' && !(typeof val === 'boolean')) ||\n      (optType === 'function' && !(typeof val === 'function')) ||\n      (optType === 'object' && !(typeof val === 'object') && val)\n    ) {\n      if (optional) {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'contains invalid value for key \"' +\n            key +\n            '\" (must be of type \"' +\n            optType +\n            '\")'\n        );\n      } else {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'must contain the key \"' +\n            key +\n            '\" with type \"' +\n            optType +\n            '\"'\n        );\n      }\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path, pathContains, pathEquals } from '../util/Path';\nimport { exceptionGuard, log, logger } from '../util/util';\n\nimport { Event } from './Event';\n\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n */\nexport class EventQueue {\n  eventLists_: EventList[] = [];\n\n  /**\n   * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n   */\n  recursionDepth_ = 0;\n}\n\n/**\n * @param eventDataList - The new events to queue.\n */\nexport function eventQueueQueueEvents(\n  eventQueue: EventQueue,\n  eventDataList: Event[]\n) {\n  // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n  let currList: EventList | null = null;\n  for (let i = 0; i < eventDataList.length; i++) {\n    const data = eventDataList[i];\n    const path = data.getPath();\n    if (currList !== null && !pathEquals(path, currList.path)) {\n      eventQueue.eventLists_.push(currList);\n      currList = null;\n    }\n\n    if (currList === null) {\n      currList = { events: [], path };\n    }\n\n    currList.events.push(data);\n  }\n  if (currList) {\n    eventQueue.eventLists_.push(currList);\n  }\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones)\n * for the specified path.\n *\n * It is assumed that the new events are all for the specified path.\n *\n * @param path - The path to raise events for.\n * @param eventDataList - The new events to raise.\n */\nexport function eventQueueRaiseEventsAtPath(\n  eventQueue: EventQueue,\n  path: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath =>\n    pathEquals(eventPath, path)\n  );\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\n * locations related to the specified change path (i.e. all ancestors and descendants).\n *\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n *\n * @param changedPath - The path to raise events for.\n * @param eventDataList - The events to raise\n */\nexport function eventQueueRaiseEventsForChangedPath(\n  eventQueue: EventQueue,\n  changedPath: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(\n    eventQueue,\n    eventPath =>\n      pathContains(eventPath, changedPath) ||\n      pathContains(changedPath, eventPath)\n  );\n}\n\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(\n  eventQueue: EventQueue,\n  predicate: (path: Path) => boolean\n) {\n  eventQueue.recursionDepth_++;\n\n  let sentAll = true;\n  for (let i = 0; i < eventQueue.eventLists_.length; i++) {\n    const eventList = eventQueue.eventLists_[i];\n    if (eventList) {\n      const eventPath = eventList.path;\n      if (predicate(eventPath)) {\n        eventListRaise(eventQueue.eventLists_[i]);\n        eventQueue.eventLists_[i] = null;\n      } else {\n        sentAll = false;\n      }\n    }\n  }\n\n  if (sentAll) {\n    eventQueue.eventLists_ = [];\n  }\n\n  eventQueue.recursionDepth_--;\n}\n\ninterface EventList {\n  events: Event[];\n  path: Path;\n}\n\n/**\n * Iterates through the list and raises each event\n */\nfunction eventListRaise(eventList: EventList) {\n  for (let i = 0; i < eventList.events.length; i++) {\n    const eventData = eventList.events[i];\n    if (eventData !== null) {\n      eventList.events[i] = null;\n      const eventFn = eventData.getEventRunner();\n      if (logger) {\n        log('event: ' + eventData.toString());\n      }\n      exceptionGuard(eventFn);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  isEmpty,\n  map,\n  safeGet,\n  stringify\n} from '@firebase/util';\n\nimport { ValueEventRegistration } from '../api/Reference_impl';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { PersistentConnection } from './PersistentConnection';\nimport { ReadonlyRestClient } from './ReadonlyRestClient';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { SnapshotHolder } from './SnapshotHolder';\nimport {\n  newSparseSnapshotTree,\n  SparseSnapshotTree,\n  sparseSnapshotTreeForEachTree,\n  sparseSnapshotTreeForget,\n  sparseSnapshotTreeRemember\n} from './SparseSnapshotTree';\nimport { StatsCollection } from './stats/StatsCollection';\nimport { StatsListener } from './stats/StatsListener';\nimport {\n  statsManagerGetCollection,\n  statsManagerGetOrCreateReporter\n} from './stats/StatsManager';\nimport { StatsReporter, statsReporterIncludeStat } from './stats/StatsReporter';\nimport {\n  SyncTree,\n  syncTreeAckUserWrite,\n  syncTreeAddEventRegistration,\n  syncTreeApplyServerMerge,\n  syncTreeApplyServerOverwrite,\n  syncTreeApplyTaggedQueryMerge,\n  syncTreeApplyTaggedQueryOverwrite,\n  syncTreeApplyUserMerge,\n  syncTreeApplyUserOverwrite,\n  syncTreeCalcCompleteEventCache,\n  syncTreeGetServerValue,\n  syncTreeRemoveEventRegistration,\n  syncTreeTagForQuery\n} from './SyncTree';\nimport { Indexable } from './util/misc';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathPopFront\n} from './util/Path';\nimport {\n  generateWithValues,\n  resolveDeferredValueSnapshot,\n  resolveDeferredValueTree\n} from './util/ServerValues';\nimport {\n  Tree,\n  treeForEachAncestor,\n  treeForEachChild,\n  treeForEachDescendant,\n  treeGetPath,\n  treeGetValue,\n  treeHasChildren,\n  treeSetValue,\n  treeSubTree\n} from './util/Tree';\nimport {\n  beingCrawled,\n  each,\n  exceptionGuard,\n  log,\n  LUIDGenerator,\n  warn\n} from './util/util';\nimport { isValidPriority, validateFirebaseData } from './util/validation';\nimport { Event } from './view/Event';\nimport {\n  EventQueue,\n  eventQueueQueueEvents,\n  eventQueueRaiseEventsAtPath,\n  eventQueueRaiseEventsForChangedPath\n} from './view/EventQueue';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\n\nconst INTERRUPT_REASON = 'repo_interrupt';\n\n/**\n * If a transaction does not succeed after 25 retries, we abort it. Among other\n * things this ensure that if there's ever a bug causing a mismatch between\n * client / server hashes for some data, we won't retry indefinitely.\n */\nconst MAX_TRANSACTION_RETRIES = 25;\n\nconst enum TransactionStatus {\n  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n  // mismatched hash.\n  RUN,\n\n  // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n  // or rejected yet).\n  SENT,\n\n  // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n  // removed when we get a chance to prune completed ones.\n  COMPLETED,\n\n  // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n  // If it comes back as unsuccessful, we'll abort it.\n  SENT_NEEDS_ABORT,\n\n  // Temporary state used to mark transactions that need to be aborted.\n  NEEDS_ABORT\n}\n\ninterface Transaction {\n  path: Path;\n  update: (a: unknown) => unknown;\n  onComplete: (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => void;\n  status: TransactionStatus;\n  order: number;\n  applyLocally: boolean;\n  retryCount: number;\n  unwatcher: () => void;\n  abortReason: string | null;\n  currentWriteId: number;\n  currentInputSnapshot: Node | null;\n  currentOutputSnapshotRaw: Node | null;\n  currentOutputSnapshotResolved: Node | null;\n}\n\n/**\n * A connection to a single data repository.\n */\nexport class Repo {\n  /** Key for uniquely identifying this repo, used in RepoManager */\n  readonly key: string;\n\n  dataUpdateCount = 0;\n  infoSyncTree_: SyncTree;\n  serverSyncTree_: SyncTree;\n\n  stats_: StatsCollection;\n  statsListener_: StatsListener | null = null;\n  eventQueue_ = new EventQueue();\n  nextWriteId_ = 1;\n  server_: ServerActions;\n  statsReporter_: StatsReporter;\n  infoData_: SnapshotHolder;\n  interceptServerDataCallback_: ((a: string, b: unknown) => void) | null = null;\n\n  /** A list of data pieces and paths to be set when this client disconnects. */\n  onDisconnect_: SparseSnapshotTree = newSparseSnapshotTree();\n\n  /** Stores queues of outstanding transactions for Firebase locations. */\n  transactionQueueTree_ = new Tree<Transaction[]>();\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  persistentConnection_: PersistentConnection | null = null;\n\n  constructor(\n    public repoInfo_: RepoInfo,\n    public forceRestClient_: boolean,\n    public authTokenProvider_: AuthTokenProvider,\n    public appCheckProvider_: AppCheckTokenProvider\n  ) {\n    // This key is intentionally not updated if RepoInfo is later changed or replaced\n    this.key = this.repoInfo_.toURLString();\n  }\n\n  /**\n   * @returns The URL corresponding to the root of this Firebase.\n   */\n  toString(): string {\n    return (\n      (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host\n    );\n  }\n}\n\nexport function repoStart(\n  repo: Repo,\n  appId: string,\n  authOverride?: object\n): void {\n  repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\n\n  if (repo.forceRestClient_ || beingCrawled()) {\n    repo.server_ = new ReadonlyRestClient(\n      repo.repoInfo_,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_\n    );\n\n    // Minor hack: Fire onConnect immediately, since there's no actual connection.\n    setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\n  } else {\n    // Validate authOverride\n    if (typeof authOverride !== 'undefined' && authOverride !== null) {\n      if (typeof authOverride !== 'object') {\n        throw new Error(\n          'Only objects are supported for option databaseAuthVariableOverride'\n        );\n      }\n      try {\n        stringify(authOverride);\n      } catch (e) {\n        throw new Error('Invalid authOverride provided: ' + e);\n      }\n    }\n\n    repo.persistentConnection_ = new PersistentConnection(\n      repo.repoInfo_,\n      appId,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      (connectStatus: boolean) => {\n        repoOnConnectStatus(repo, connectStatus);\n      },\n      (updates: object) => {\n        repoOnServerInfoUpdate(repo, updates);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_,\n      authOverride\n    );\n\n    repo.server_ = repo.persistentConnection_;\n  }\n\n  repo.authTokenProvider_.addTokenChangeListener(token => {\n    repo.server_.refreshAuthToken(token);\n  });\n\n  repo.appCheckProvider_.addTokenChangeListener(result => {\n    repo.server_.refreshAppCheckToken(result.token);\n  });\n\n  // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n  // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n  repo.statsReporter_ = statsManagerGetOrCreateReporter(\n    repo.repoInfo_,\n    () => new StatsReporter(repo.stats_, repo.server_)\n  );\n\n  // Used for .info.\n  repo.infoData_ = new SnapshotHolder();\n  repo.infoSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      let infoEvents: Event[] = [];\n      const node = repo.infoData_.getNode(query._path);\n      // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n      // on initial data...\n      if (!node.isEmpty()) {\n        infoEvents = syncTreeApplyServerOverwrite(\n          repo.infoSyncTree_,\n          query._path,\n          node\n        );\n        setTimeout(() => {\n          onComplete('ok');\n        }, 0);\n      }\n      return infoEvents;\n    },\n    stopListening: () => {}\n  });\n  repoUpdateInfo(repo, 'connected', false);\n\n  repo.serverSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      repo.server_.listen(query, currentHashFn, tag, (status, data) => {\n        const events = onComplete(status, data);\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          query._path,\n          events\n        );\n      });\n      // No synchronous events for network-backed sync trees\n      return [];\n    },\n    stopListening: (query, tag) => {\n      repo.server_.unlisten(query, tag);\n    }\n  });\n}\n\n/**\n * @returns The time in milliseconds, taking the server offset into account if we have one.\n */\nexport function repoServerTime(repo: Repo): number {\n  const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\n  const offset = (offsetNode.val() as number) || 0;\n  return new Date().getTime() + offset;\n}\n\n/**\n * Generate ServerValues using some variables from the repo object.\n */\nexport function repoGenerateServerValues(repo: Repo): Indexable {\n  return generateWithValues({\n    timestamp: repoServerTime(repo)\n  });\n}\n\n/**\n * Called by realtime when we get new messages from the server.\n */\nfunction repoOnDataUpdate(\n  repo: Repo,\n  pathString: string,\n  data: unknown,\n  isMerge: boolean,\n  tag: number | null\n): void {\n  // For testing.\n  repo.dataUpdateCount++;\n  const path = new Path(pathString);\n  data = repo.interceptServerDataCallback_\n    ? repo.interceptServerDataCallback_(pathString, data)\n    : data;\n  let events = [];\n  if (tag) {\n    if (isMerge) {\n      const taggedChildren = map(\n        data as { [k: string]: unknown },\n        (raw: unknown) => nodeFromJSON(raw)\n      );\n      events = syncTreeApplyTaggedQueryMerge(\n        repo.serverSyncTree_,\n        path,\n        taggedChildren,\n        tag\n      );\n    } else {\n      const taggedSnap = nodeFromJSON(data);\n      events = syncTreeApplyTaggedQueryOverwrite(\n        repo.serverSyncTree_,\n        path,\n        taggedSnap,\n        tag\n      );\n    }\n  } else if (isMerge) {\n    const changedChildren = map(\n      data as { [k: string]: unknown },\n      (raw: unknown) => nodeFromJSON(raw)\n    );\n    events = syncTreeApplyServerMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren\n    );\n  } else {\n    const snap = nodeFromJSON(data);\n    events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\n  }\n  let affectedPath = path;\n  if (events.length > 0) {\n    // Since we have a listener outstanding for each transaction, receiving any events\n    // is a proxy for some change having occurred.\n    affectedPath = repoRerunTransactions(repo, path);\n  }\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\n}\n\n// TODO: This should be @private but it's used by test_access.js and internal.js\nexport function repoInterceptServerData(\n  repo: Repo,\n  callback: ((a: string, b: unknown) => unknown) | null\n): void {\n  repo.interceptServerDataCallback_ = callback;\n}\n\nfunction repoOnConnectStatus(repo: Repo, connectStatus: boolean): void {\n  repoUpdateInfo(repo, 'connected', connectStatus);\n  if (connectStatus === false) {\n    repoRunOnDisconnectEvents(repo);\n  }\n}\n\nfunction repoOnServerInfoUpdate(repo: Repo, updates: object): void {\n  each(updates, (key: string, value: unknown) => {\n    repoUpdateInfo(repo, key, value);\n  });\n}\n\nfunction repoUpdateInfo(repo: Repo, pathString: string, value: unknown): void {\n  const path = new Path('/.info/' + pathString);\n  const newNode = nodeFromJSON(value);\n  repo.infoData_.updateSnapshot(path, newNode);\n  const events = syncTreeApplyServerOverwrite(\n    repo.infoSyncTree_,\n    path,\n    newNode\n  );\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n}\n\nfunction repoGetNextWriteId(repo: Repo): number {\n  return repo.nextWriteId_++;\n}\n\n/**\n * The purpose of `getValue` is to return the latest known value\n * satisfying `query`.\n *\n * This method will first check for in-memory cached values\n * belonging to active listeners. If they are found, such values\n * are considered to be the most up-to-date.\n *\n * If the client is not connected, this method will wait until the\n *  repo has established a connection and then request the value for `query`.\n * If the client is not able to retrieve the query result for another reason,\n * it reports an error.\n *\n * @param query - The query to surface a value for.\n */\nexport function repoGetValue(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: ValueEventRegistration\n): Promise<Node> {\n  // Only active queries are cached. There is no persisted cache.\n  const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\n  if (cached != null) {\n    return Promise.resolve(cached);\n  }\n  return repo.server_.get(query).then(\n    payload => {\n      const node = nodeFromJSON(payload).withIndex(\n        query._queryParams.getIndex()\n      );\n      /**\n       * Below we simulate the actions of an `onlyOnce` `onValue()` event where:\n       * Add an event registration,\n       * Update data at the path,\n       * Raise any events,\n       * Cleanup the SyncTree\n       */\n      syncTreeAddEventRegistration(\n        repo.serverSyncTree_,\n        query,\n        eventRegistration,\n        true\n      );\n      let events: Event[];\n      if (query._queryParams.loadsAllData()) {\n        events = syncTreeApplyServerOverwrite(\n          repo.serverSyncTree_,\n          query._path,\n          node\n        );\n      } else {\n        const tag = syncTreeTagForQuery(repo.serverSyncTree_, query);\n        events = syncTreeApplyTaggedQueryOverwrite(\n          repo.serverSyncTree_,\n          query._path,\n          node,\n          tag\n        );\n      }\n      /*\n       * We need to raise events in the scenario where `get()` is called at a parent path, and\n       * while the `get()` is pending, `onValue` is called at a child location. While get() is waiting\n       * for the data, `onValue` will register a new event. Then, get() will come back, and update the syncTree\n       * and its corresponding serverCache, including the child location where `onValue` is called. Then,\n       * `onValue` will receive the event from the server, but look at the syncTree and see that the data received\n       * from the server is already at the SyncPoint, and so the `onValue` callback will never get fired.\n       * Calling `eventQueueRaiseEventsForChangedPath()` is the correct way to propagate the events and\n       * ensure the corresponding child events will get fired.\n       */\n      eventQueueRaiseEventsForChangedPath(\n        repo.eventQueue_,\n        query._path,\n        events\n      );\n      syncTreeRemoveEventRegistration(\n        repo.serverSyncTree_,\n        query,\n        eventRegistration,\n        null,\n        true\n      );\n      return node;\n    },\n    err => {\n      repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\n      return Promise.reject(new Error(err as string));\n    }\n  );\n}\n\nexport function repoSetWithPriority(\n  repo: Repo,\n  path: Path,\n  newVal: unknown,\n  newPriority: number | string | null,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'set', {\n    path: path.toString(),\n    value: newVal,\n    priority: newPriority\n  });\n\n  // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n  // (b) store unresolved paths on JSON parse\n  const serverValues = repoGenerateServerValues(repo);\n  const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n  const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\n  const newNode = resolveDeferredValueSnapshot(\n    newNodeUnresolved,\n    existing,\n    serverValues\n  );\n\n  const writeId = repoGetNextWriteId(repo);\n  const events = syncTreeApplyUserOverwrite(\n    repo.serverSyncTree_,\n    path,\n    newNode,\n    writeId,\n    true\n  );\n  eventQueueQueueEvents(repo.eventQueue_, events);\n  repo.server_.put(\n    path.toString(),\n    newNodeUnresolved.val(/*export=*/ true),\n    (status, errorReason) => {\n      const success = status === 'ok';\n      if (!success) {\n        warn('set at ' + path + ' failed: ' + status);\n      }\n\n      const clearEvents = syncTreeAckUserWrite(\n        repo.serverSyncTree_,\n        writeId,\n        !success\n      );\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n  const affectedPath = repoAbortTransactions(repo, path);\n  repoRerunTransactions(repo, affectedPath);\n  // We queued the events above, so just flush the queue here\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\n}\n\nexport function repoUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\n\n  // Start with our existing data and merge each child into it.\n  let empty = true;\n  const serverValues = repoGenerateServerValues(repo);\n  const changedChildren: { [k: string]: Node } = {};\n  each(childrenToMerge, (changedKey: string, changedValue: unknown) => {\n    empty = false;\n    changedChildren[changedKey] = resolveDeferredValueTree(\n      pathChild(path, changedKey),\n      nodeFromJSON(changedValue),\n      repo.serverSyncTree_,\n      serverValues\n    );\n  });\n\n  if (!empty) {\n    const writeId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren,\n      writeId\n    );\n    eventQueueQueueEvents(repo.eventQueue_, events);\n    repo.server_.merge(\n      path.toString(),\n      childrenToMerge,\n      (status, errorReason) => {\n        const success = status === 'ok';\n        if (!success) {\n          warn('update at ' + path + ' failed: ' + status);\n        }\n\n        const clearEvents = syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          writeId,\n          !success\n        );\n        const affectedPath =\n          clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          affectedPath,\n          clearEvents\n        );\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n      }\n    );\n\n    each(childrenToMerge, (changedPath: string) => {\n      const affectedPath = repoAbortTransactions(\n        repo,\n        pathChild(path, changedPath)\n      );\n      repoRerunTransactions(repo, affectedPath);\n    });\n\n    // We queued the events above, so just flush the queue here\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\n  } else {\n    log(\"update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n  }\n}\n\n/**\n * Applies all of the changes stored up in the onDisconnect_ tree.\n */\nfunction repoRunOnDisconnectEvents(repo: Repo): void {\n  repoLog(repo, 'onDisconnectEvents');\n\n  const serverValues = repoGenerateServerValues(repo);\n  const resolvedOnDisconnectTree = newSparseSnapshotTree();\n  sparseSnapshotTreeForEachTree(\n    repo.onDisconnect_,\n    newEmptyPath(),\n    (path, node) => {\n      const resolved = resolveDeferredValueTree(\n        path,\n        node,\n        repo.serverSyncTree_,\n        serverValues\n      );\n      sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\n    }\n  );\n  let events: Event[] = [];\n\n  sparseSnapshotTreeForEachTree(\n    resolvedOnDisconnectTree,\n    newEmptyPath(),\n    (path, snap) => {\n      events = events.concat(\n        syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap)\n      );\n      const affectedPath = repoAbortTransactions(repo, path);\n      repoRerunTransactions(repo, affectedPath);\n    }\n  );\n\n  repo.onDisconnect_ = newSparseSnapshotTree();\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\n}\n\nexport function repoOnDisconnectCancel(\n  repo: Repo,\n  path: Path,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeForget(repo.onDisconnect_, path);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nexport function repoOnDisconnectSet(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectSetWithPriority(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  priority: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value, priority);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  if (isEmpty(childrenToMerge)) {\n    log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n    return;\n  }\n\n  repo.server_.onDisconnectMerge(\n    path.toString(),\n    childrenToMerge,\n    (status, errorReason) => {\n      if (status === 'ok') {\n        each(childrenToMerge, (childName: string, childNode: unknown) => {\n          const newChildNode = nodeFromJSON(childNode);\n          sparseSnapshotTreeRemember(\n            repo.onDisconnect_,\n            pathChild(path, childName),\n            newChildNode\n          );\n        });\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoAddEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeAddEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeAddEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoRemoveEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n  // a little bit by handling the return values anyways.\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeRemoveEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeRemoveEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoInterrupt(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.interrupt(INTERRUPT_REASON);\n  }\n}\n\nexport function repoResume(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.resume(INTERRUPT_REASON);\n  }\n}\n\nexport function repoStats(repo: Repo, showDelta: boolean = false): void {\n  if (typeof console === 'undefined') {\n    return;\n  }\n\n  let stats: { [k: string]: unknown };\n  if (showDelta) {\n    if (!repo.statsListener_) {\n      repo.statsListener_ = new StatsListener(repo.stats_);\n    }\n    stats = repo.statsListener_.get();\n  } else {\n    stats = repo.stats_.get();\n  }\n\n  const longestName = Object.keys(stats).reduce(\n    (previousValue, currentValue) =>\n      Math.max(currentValue.length, previousValue),\n    0\n  );\n\n  each(stats, (stat: string, value: unknown) => {\n    let paddedStat = stat;\n    // pad stat names to be the same length (plus 2 extra spaces).\n    for (let i = stat.length; i < longestName + 2; i++) {\n      paddedStat += ' ';\n    }\n    console.log(paddedStat + value);\n  });\n}\n\nexport function repoStatsIncrementCounter(repo: Repo, metric: string): void {\n  repo.stats_.incrementCounter(metric);\n  statsReporterIncludeStat(repo.statsReporter_, metric);\n}\n\nfunction repoLog(repo: Repo, ...varArgs: unknown[]): void {\n  let prefix = '';\n  if (repo.persistentConnection_) {\n    prefix = repo.persistentConnection_.id + ':';\n  }\n  log(prefix, ...varArgs);\n}\n\nexport function repoCallOnCompleteCallback(\n  repo: Repo,\n  callback: ((status: Error | null, errorReason?: string) => void) | null,\n  status: string,\n  errorReason?: string | null\n): void {\n  if (callback) {\n    exceptionGuard(() => {\n      if (status === 'ok') {\n        callback(null);\n      } else {\n        const code = (status || 'error').toUpperCase();\n        let message = code;\n        if (errorReason) {\n          message += ': ' + errorReason;\n        }\n\n        const error = new Error(message);\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (error as any).code = code;\n        callback(error);\n      }\n    });\n  }\n}\n\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and\n * sends it to the server if possible.\n *\n * @param path - Path at which to do transaction.\n * @param transactionUpdate - Update callback.\n * @param onComplete - Completion callback.\n * @param unwatcher - Function that will be called when the transaction no longer\n * need data updates for `path`.\n * @param applyLocally - Whether or not to make intermediate results visible\n */\nexport function repoStartTransaction(\n  repo: Repo,\n  path: Path,\n  transactionUpdate: (a: unknown) => unknown,\n  onComplete: ((error: Error, committed: boolean, node: Node) => void) | null,\n  unwatcher: () => void,\n  applyLocally: boolean\n): void {\n  repoLog(repo, 'transaction on ' + path);\n\n  // Initialize transaction.\n  const transaction: Transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n    // One of TransactionStatus enums.\n    status: null,\n    // Used when combining transactions at different locations to figure out\n    // which one goes first.\n    order: LUIDGenerator(),\n    // Whether to raise local events for this transaction.\n    applyLocally,\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n    // Stores why a transaction was aborted.\n    abortReason: null,\n    currentWriteId: null,\n    currentInputSnapshot: null,\n    currentOutputSnapshotRaw: null,\n    currentOutputSnapshotResolved: null\n  };\n\n  // Run transaction initially.\n  const currentState = repoGetLatestState(repo, path, undefined);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) {\n      transaction.onComplete(null, false, transaction.currentInputSnapshot);\n    }\n  } else {\n    validateFirebaseData(\n      'transaction failed: Data returned ',\n      newVal,\n      transaction.path\n    );\n\n    // Mark as run and add to our queue.\n    transaction.status = TransactionStatus.RUN;\n    const queueNode = treeSubTree(repo.transactionQueueTree_, path);\n    const nodeQueue = treeGetValue(queueNode) || [];\n    nodeQueue.push(transaction);\n\n    treeSetValue(queueNode, nodeQueue);\n\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our\n    // transaction state, since the user could start new transactions from the\n    // event callbacks.\n    let priorityForNode;\n    if (\n      typeof newVal === 'object' &&\n      newVal !== null &&\n      contains(newVal, '.priority')\n    ) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal as any, '.priority');\n      assert(\n        isValidPriority(priorityForNode),\n        'Invalid priority returned by transaction. ' +\n          'Priority must be a valid string, finite number, server value, or null.'\n      );\n    } else {\n      const currentNode =\n        syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\n        ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n\n    const serverValues = repoGenerateServerValues(repo);\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      currentState,\n      serverValues\n    );\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = repoGetNextWriteId(repo);\n\n    const events = syncTreeApplyUserOverwrite(\n      repo.serverSyncTree_,\n      path,\n      newNode,\n      transaction.currentWriteId,\n      transaction.applyLocally\n    );\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n  }\n}\n\n/**\n * @param excludeSets - A specific set to exclude\n */\nfunction repoGetLatestState(\n  repo: Repo,\n  path: Path,\n  excludeSets?: number[]\n): Node {\n  return (\n    syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\n    ChildrenNode.EMPTY_NODE\n  );\n}\n\n/**\n * Sends any already-run transactions that aren't waiting for outstanding\n * transactions to complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively\n * with a particular transactionQueueTree node to recurse through the tree.\n *\n * @param node - transactionQueueTree node to start at.\n */\nfunction repoSendReadyTransactions(\n  repo: Repo,\n  node: Tree<Transaction[]> = repo.transactionQueueTree_\n): void {\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    repoPruneCompletedTransactionsBelowNode(repo, node);\n  }\n\n  if (treeGetValue(node)) {\n    const queue = repoBuildTransactionQueue(repo, node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n\n    const allRun = queue.every(\n      (transaction: Transaction) => transaction.status === TransactionStatus.RUN\n    );\n\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) {\n      repoSendTransactionQueue(repo, treeGetPath(node), queue);\n    }\n  } else if (treeHasChildren(node)) {\n    treeForEachChild(node, childNode => {\n      repoSendReadyTransactions(repo, childNode);\n    });\n  }\n}\n\n/**\n * Given a list of run transactions, send them to the server and then handle\n * the result (success or failure).\n *\n * @param path - The location of the queue.\n * @param queue - Queue of transactions under the specified location.\n */\nfunction repoSendTransactionQueue(\n  repo: Repo,\n  path: Path,\n  queue: Transaction[]\n): void {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(txn => {\n    return txn.currentWriteId;\n  });\n  const latestState = repoGetLatestState(repo, path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(\n      txn.status === TransactionStatus.RUN,\n      'tryToSendTransactionQueue_: items in queue should all be run.'\n    );\n    txn.status = TransactionStatus.SENT;\n    txn.retryCount++;\n    const relativePath = newRelativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(\n      relativePath /** @type {!Node} */,\n      txn.currentOutputSnapshotRaw\n    );\n  }\n\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path;\n\n  // Send the put.\n  repo.server_.put(\n    pathToSend.toString(),\n    dataToSend,\n    (status: string) => {\n      repoLog(repo, 'transaction put response', {\n        path: pathToSend.toString(),\n        status\n      });\n\n      let events: Event[] = [];\n      if (status === 'ok') {\n        // Queue up the callbacks and fire them after cleaning up all of our\n        // transaction state, since the callback could trigger more\n        // transactions or sets.\n        const callbacks = [];\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = TransactionStatus.COMPLETED;\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId)\n          );\n          if (queue[i].onComplete) {\n            // We never unset the output snapshot, and given that this\n            // transaction is complete, it should be set\n            callbacks.push(() =>\n              queue[i].onComplete(\n                null,\n                true,\n                queue[i].currentOutputSnapshotResolved\n              )\n            );\n          }\n          queue[i].unwatcher();\n        }\n\n        // Now remove the completed transactions.\n        repoPruneCompletedTransactionsBelowNode(\n          repo,\n          treeSubTree(repo.transactionQueueTree_, path)\n        );\n        // There may be pending transactions that we can now send.\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n        // Finally, trigger onComplete callbacks.\n        for (let i = 0; i < callbacks.length; i++) {\n          exceptionGuard(callbacks[i]);\n        }\n      } else {\n        // transactions are no longer sent.  Update their status appropriately.\n        if (status === 'datastale') {\n          for (let i = 0; i < queue.length; i++) {\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n              queue[i].status = TransactionStatus.NEEDS_ABORT;\n            } else {\n              queue[i].status = TransactionStatus.RUN;\n            }\n          }\n        } else {\n          warn(\n            'transaction at ' + pathToSend.toString() + ' failed: ' + status\n          );\n          for (let i = 0; i < queue.length; i++) {\n            queue[i].status = TransactionStatus.NEEDS_ABORT;\n            queue[i].abortReason = status;\n          }\n        }\n\n        repoRerunTransactions(repo, path);\n      }\n    },\n    latestHash\n  );\n}\n\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions. This\n * is the path at which events need to be raised for.\n *\n * @param changedPath - The path in mergedData that changed.\n * @returns The rootmost path that was affected by rerunning transactions.\n */\nfunction repoRerunTransactions(repo: Repo, changedPath: Path): Path {\n  const rootMostTransactionNode = repoGetAncestorTransactionNode(\n    repo,\n    changedPath\n  );\n  const path = treeGetPath(rootMostTransactionNode);\n\n  const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\n  repoRerunTransactionQueue(repo, queue, path);\n\n  return path;\n}\n\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted\n * transactions and whatnot).\n *\n * @param queue - The queue of transactions to run.\n * @param path - The path the queue is for.\n */\nfunction repoRerunTransactionQueue(\n  repo: Repo,\n  queue: Transaction[],\n  path: Path\n): void {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  }\n\n  // Queue up the callbacks and fire them after cleaning up all of our\n  // transaction state, since the callback could trigger more transactions or\n  // sets.\n  const callbacks = [];\n  let events: Event[] = [];\n  // Ignore all of the sets we're going to re-run.\n  const txnsToRerun = queue.filter(q => {\n    return q.status === TransactionStatus.RUN;\n  });\n  const setsToIgnore = txnsToRerun.map(q => {\n    return q.currentWriteId;\n  });\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = newRelativePath(path, transaction.path);\n    let abortTransaction = false,\n      abortReason;\n    assert(\n      relativePath !== null,\n      'rerunTransactionsUnderNode_: relativePath should not be null.'\n    );\n\n    if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(\n        syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          transaction.currentWriteId,\n          true\n        )\n      );\n    } else if (transaction.status === TransactionStatus.RUN) {\n      if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            transaction.currentWriteId,\n            true\n          )\n        );\n      } else {\n        // This code reruns a transaction\n        const currentNode = repoGetLatestState(\n          repo,\n          transaction.path,\n          setsToIgnore\n        );\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) {\n          validateFirebaseData(\n            'transaction failed: Data returned ',\n            newData,\n            transaction.path\n          );\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority =\n            typeof newData === 'object' &&\n            newData != null &&\n            contains(newData, '.priority');\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = repoGenerateServerValues(repo);\n          const newNodeResolved = resolveDeferredValueSnapshot(\n            newDataNode,\n            currentNode,\n            serverValues\n          );\n\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = repoGetNextWriteId(repo);\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(\n            syncTreeApplyUserOverwrite(\n              repo.serverSyncTree_,\n              transaction.path,\n              newNodeResolved,\n              transaction.currentWriteId,\n              transaction.applyLocally\n            )\n          );\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true)\n          );\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(\n            syncTreeAckUserWrite(\n              repo.serverSyncTree_,\n              transaction.currentWriteId,\n              true\n            )\n          );\n        }\n      }\n    }\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    events = [];\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = TransactionStatus.COMPLETED;\n\n      // Removing a listener can trigger pruning which can muck with\n      // mergedData/visibleData (as it prunes data). So defer the unwatcher\n      // until we're done.\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          callbacks.push(() =>\n            queue[i].onComplete(null, false, queue[i].currentInputSnapshot)\n          );\n        } else {\n          callbacks.push(() =>\n            queue[i].onComplete(new Error(abortReason), false, null)\n          );\n        }\n      }\n    }\n  }\n\n  // Clean up completed transactions.\n  repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\n\n  // Now fire callbacks, now that we're in a good, known state.\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  }\n\n  // Try to send the transaction result to the server.\n  repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n}\n\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending\n * transaction on it, or just returns the node for the given path if there are\n * no pending transactions on any ancestor.\n *\n * @param path - The location to start at.\n * @returns The rootmost node with a transaction.\n */\nfunction repoGetAncestorTransactionNode(\n  repo: Repo,\n  path: Path\n): Tree<Transaction[]> {\n  let front;\n\n  // Start at the root and walk deeper into the tree towards path until we\n  // find a node with pending transactions.\n  let transactionNode = repo.transactionQueueTree_;\n  front = pathGetFront(path);\n  while (front !== null && treeGetValue(transactionNode) === undefined) {\n    transactionNode = treeSubTree(transactionNode, front);\n    path = pathPopFront(path);\n    front = pathGetFront(path);\n  }\n\n  return transactionNode;\n}\n\n/**\n * Builds the queue of all transactions at or below the specified\n * transactionNode.\n *\n * @param transactionNode\n * @returns The generated queue.\n */\nfunction repoBuildTransactionQueue(\n  repo: Repo,\n  transactionNode: Tree<Transaction[]>\n): Transaction[] {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue: Transaction[] = [];\n  repoAggregateTransactionQueuesForNode(\n    repo,\n    transactionNode,\n    transactionQueue\n  );\n\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort((a, b) => a.order - b.order);\n\n  return transactionQueue;\n}\n\nfunction repoAggregateTransactionQueuesForNode(\n  repo: Repo,\n  node: Tree<Transaction[]>,\n  queue: Transaction[]\n): void {\n  const nodeQueue = treeGetValue(node);\n  if (nodeQueue) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  treeForEachChild(node, child => {\n    repoAggregateTransactionQueuesForNode(repo, child, queue);\n  });\n}\n\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n */\nfunction repoPruneCompletedTransactionsBelowNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    let to = 0;\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== TransactionStatus.COMPLETED) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n    queue.length = to;\n    treeSetValue(node, queue.length > 0 ? queue : undefined);\n  }\n\n  treeForEachChild(node, childNode => {\n    repoPruneCompletedTransactionsBelowNode(repo, childNode);\n  });\n}\n\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.\n * Called when doing a set() or update() since we consider them incompatible\n * with transactions.\n *\n * @param path - Path for which we want to abort related transactions.\n */\nfunction repoAbortTransactions(repo: Repo, path: Path): Path {\n  const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\n\n  const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\n\n  treeForEachAncestor(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  repoAbortTransactionsOnNode(repo, transactionNode);\n\n  treeForEachDescendant(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  return affectedPath;\n}\n\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param node - Node to abort transactions for.\n */\nfunction repoAbortTransactionsOnNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    // Queue up the callbacks and fire them after cleaning up all of our\n    // transaction state, since the callback could trigger more transactions\n    // or sets.\n    const callbacks = [];\n\n    // Go through queue.  Any already-sent transactions must be marked for\n    // abort, while the unsent ones can be immediately aborted and removed.\n    let events: Event[] = [];\n    let lastSent = -1;\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n        // Already marked.  No action needed.\n      } else if (queue[i].status === TransactionStatus.SENT) {\n        assert(\n          lastSent === i - 1,\n          'All SENT items should be at beginning of queue.'\n        );\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(\n          queue[i].status === TransactionStatus.RUN,\n          'Unexpected transaction status in abort'\n        );\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            queue[i].currentWriteId,\n            true\n          )\n        );\n        if (queue[i].onComplete) {\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error('set'), false, null)\n          );\n        }\n      }\n    }\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      treeSetValue(node, undefined);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    }\n\n    // Now fire the callbacks.\n    eventQueueRaiseEventsForChangedPath(\n      repo.eventQueue_,\n      treeGetPath(node),\n      events\n    );\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../../RepoInfo';\nimport { Path } from '../Path';\nimport { warnIfPageIsSecure, warn, fatal } from '../util';\n\nfunction decodePath(pathString: string): string {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n\n/**\n * @returns key value hash\n */\nfunction decodeQuery(queryString: string): { [key: string]: string } {\n  const results = {};\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n    const kv = segment.split('=');\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n    }\n  }\n  return results;\n}\n\nexport const parseRepoInfo = function (\n  dataURL: string,\n  nodeAdmin: boolean\n): { repoInfo: RepoInfo; path: Path } {\n  const parsedUrl = parseDatabaseURL(dataURL),\n    namespace = parsedUrl.namespace;\n\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(\n      parsedUrl.host +\n        ' is no longer supported. ' +\n        'Please use <YOUR FIREBASE>.firebaseio.com instead'\n    );\n  }\n\n  // Catch common error of uninitialized namespace value.\n  if (\n    (!namespace || namespace === 'undefined') &&\n    parsedUrl.domain !== 'localhost'\n  ) {\n    fatal(\n      'Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com'\n    );\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n\n  return {\n    repoInfo: new RepoInfo(\n      parsedUrl.host,\n      parsedUrl.secure,\n      namespace,\n      webSocketOnly,\n      nodeAdmin,\n      /*persistenceKey=*/ '',\n      /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain\n    ),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n\nexport const parseDatabaseURL = function (dataURL: string): {\n  host: string;\n  port: number;\n  domain: string;\n  subdomain: string;\n  secure: boolean;\n  scheme: string;\n  pathString: string;\n  namespace: string;\n} {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '',\n    namespace = '';\n\n  // Always default to SSL, unless otherwise specified.\n  let secure = true,\n    scheme = 'https',\n    port = 443;\n\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n\n    // Parse host, path, and query string.\n    let slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    let questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n    const queryParams = decodeQuery(\n      dataURL.substring(Math.min(dataURL.length, questionMarkInd))\n    );\n\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n\n    const hostWithoutPort = host.slice(0, colonInd);\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      const dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1);\n      // Normalize namespaces to lowercase to share storage / connection.\n      namespace = subdomain;\n    }\n    // Always treat the value of the `ns` as the namespace name if it is present.\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString,\n    namespace\n  };\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport {\n  tryParseInt,\n  MAX_NAME,\n  MIN_NAME,\n  INTEGER_32_MIN,\n  INTEGER_32_MAX\n} from '../util/util';\n\n// Modeled after base64 web-safe chars, but ordered by ASCII.\nconst PUSH_CHARS =\n  '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\nconst MIN_PUSH_CHAR = '-';\n\nconst MAX_PUSH_CHAR = 'z';\n\nconst MAX_KEY_LEN = 786;\n\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nexport const nextPushId = (function () {\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0;\n\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  const lastRandChars: number[] = [];\n\n  return function (now: number) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n\n    let i;\n    const timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n\n    let id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n\n    return id;\n  };\n})();\n\nexport const successor = function (key: string) {\n  if (key === '' + INTEGER_32_MAX) {\n    // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\n    return MIN_PUSH_CHAR;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt + 1);\n  }\n  const next = new Array(key.length);\n\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n\n  if (next.length < MAX_KEY_LEN) {\n    next.push(MIN_PUSH_CHAR);\n    return next.join('');\n  }\n\n  let i = next.length - 1;\n\n  while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\n    i--;\n  }\n\n  // `successor` was called on the largest possible key, so return the\n  // MAX_NAME, which sorts larger than all keys.\n  if (i === -1) {\n    return MAX_NAME;\n  }\n\n  const source = next[i];\n  const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\n  next[i] = sourcePlusOne;\n\n  return next.slice(0, i + 1).join('');\n};\n\n// `key` is assumed to be non-empty.\nexport const predecessor = function (key: string) {\n  if (key === '' + INTEGER_32_MIN) {\n    return MIN_NAME;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt - 1);\n  }\n  const next = new Array(key.length);\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n  // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\n  // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\n  // than that, `predecessor(predecessor(key))`, is\n  //\n  // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\n  //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\n  //\n  // analogous to increment/decrement for base-10 integers.\n  //\n  // This works because lexigographic comparison works character-by-character,\n  // using length as a tie-breaker if one key is a prefix of the other.\n  if (next[next.length - 1] === MIN_PUSH_CHAR) {\n    if (next.length === 1) {\n      // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\n      return '' + INTEGER_32_MAX;\n    }\n    delete next[next.length - 1];\n    return next.join('');\n  }\n  // Replace the last character with it's immediate predecessor, and\n  // fill the suffix of the key with MAX_PUSH_CHAR. This is the\n  // lexicographically largest possible key smaller than `key`.\n  next[next.length - 1] = PUSH_CHARS.charAt(\n    PUSH_CHARS.indexOf(next[next.length - 1]) - 1\n  );\n  return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringify } from '@firebase/util';\n\nimport { DataSnapshot as ExpDataSnapshot } from '../../api/Reference_impl';\nimport { Path } from '../util/Path';\n\nimport { EventRegistration } from './EventRegistration';\n\n/**\n * Encapsulates the data needed to raise an event\n * @interface\n */\nexport interface Event {\n  getPath(): Path;\n\n  getEventType(): string;\n\n  getEventRunner(): () => void;\n\n  toString(): string;\n}\n\n/**\n * One of the following strings: \"value\", \"child_added\", \"child_changed\",\n * \"child_removed\", or \"child_moved.\"\n */\nexport type EventType =\n  | 'value'\n  | 'child_added'\n  | 'child_changed'\n  | 'child_moved'\n  | 'child_removed';\n\n/**\n * Encapsulates the data needed to raise an event\n */\nexport class DataEvent implements Event {\n  /**\n   * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\n   * @param eventRegistration - The function to call to with the event data. User provided\n   * @param snapshot - The data backing the event\n   * @param prevName - Optional, the name of the previous child for child_* events.\n   */\n  constructor(\n    public eventType: EventType,\n    public eventRegistration: EventRegistration,\n    public snapshot: ExpDataSnapshot,\n    public prevName?: string | null\n  ) {}\n  getPath(): Path {\n    const ref = this.snapshot.ref;\n    if (this.eventType === 'value') {\n      return ref._path;\n    } else {\n      return ref.parent._path;\n    }\n  }\n  getEventType(): string {\n    return this.eventType;\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return (\n      this.getPath().toString() +\n      ':' +\n      this.eventType +\n      ':' +\n      stringify(this.snapshot.exportVal())\n    );\n  }\n}\n\nexport class CancelEvent implements Event {\n  constructor(\n    public eventRegistration: EventRegistration,\n    public error: Error,\n    public path: Path\n  ) {}\n  getPath(): Path {\n    return this.path;\n  }\n  getEventType(): string {\n    return 'cancel';\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return this.path.toString() + ':cancel';\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { DataSnapshot } from '../../api/Reference_impl';\nimport { Repo } from '../Repo';\nimport { Path } from '../util/Path';\n\nimport { Change } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport { QueryParams } from './QueryParams';\n\n/**\n * A user callback. Callbacks issues from the Legacy SDK maintain references\n * to the original user-issued callbacks, which allows equality\n * comparison by reference even though this callbacks are wrapped before\n * they can be passed to the firebase@exp SDK.\n *\n * @internal\n */\nexport interface UserCallback {\n  (dataSnapshot: DataSnapshot, previousChildName?: string | null): unknown;\n  userCallback?: unknown;\n  context?: object | null;\n}\n\n/**\n * A wrapper class that converts events from the database@exp SDK to the legacy\n * Database SDK. Events are not converted directly as event registration relies\n * on reference comparison of the original user callback (see `matches()`) and\n * relies on equality of the legacy SDK's `context` object.\n */\nexport class CallbackContext {\n  constructor(\n    private readonly snapshotCallback: UserCallback,\n    private readonly cancelCallback?: (error: Error) => unknown\n  ) {}\n\n  onValue(\n    expDataSnapshot: DataSnapshot,\n    previousChildName?: string | null\n  ): void {\n    this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\n  }\n\n  onCancel(error: Error): void {\n    assert(\n      this.hasCancelCallback,\n      'Raising a cancel event on a listener with no cancel callback'\n    );\n    return this.cancelCallback.call(null, error);\n  }\n\n  get hasCancelCallback(): boolean {\n    return !!this.cancelCallback;\n  }\n\n  matches(other: CallbackContext): boolean {\n    return (\n      this.snapshotCallback === other.snapshotCallback ||\n      (this.snapshotCallback.userCallback !== undefined &&\n        this.snapshotCallback.userCallback ===\n          other.snapshotCallback.userCallback &&\n        this.snapshotCallback.context === other.snapshotCallback.context)\n    );\n  }\n}\n\nexport interface QueryContext {\n  readonly _queryIdentifier: string;\n  readonly _queryObject: object;\n  readonly _repo: Repo;\n  readonly _path: Path;\n  readonly _queryParams: QueryParams;\n}\n\n/**\n * An EventRegistration is basically an event type ('value', 'child_added', etc.) and a callback\n * to be notified of that type of event.\n *\n * That said, it can also contain a cancel callback to be notified if the event is canceled.  And\n * currently, this code is organized around the idea that you would register multiple child_ callbacks\n * together, as a single EventRegistration.  Though currently we don't do that.\n */\nexport interface EventRegistration {\n  /**\n   * True if this container has a callback to trigger for this event type\n   */\n  respondsTo(eventType: string): boolean;\n\n  createEvent(change: Change, query: QueryContext): Event;\n\n  /**\n   * Given event data, return a function to trigger the user's callback\n   */\n  getEventRunner(eventData: Event): () => void;\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null;\n\n  matches(other: EventRegistration): boolean;\n\n  /**\n   * False basically means this is a \"dummy\" callback container being used as a sentinel\n   * to remove all callback containers of a particular type.  (e.g. if the user does\n   * ref.off('value') without specifying a specific callback).\n   *\n   * (TODO: Rework this, since it's hacky)\n   *\n   */\n  hasAnyCallback(): boolean;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, getModularInstance, Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoAddEventCallbackForQuery,\n  repoGetValue,\n  repoRemoveEventCallbackForQuery,\n  repoServerTime,\n  repoSetWithPriority,\n  repoUpdate\n} from '../core/Repo';\nimport { ChildrenNode } from '../core/snap/ChildrenNode';\nimport { Index } from '../core/snap/indexes/Index';\nimport { KEY_INDEX } from '../core/snap/indexes/KeyIndex';\nimport { PathIndex } from '../core/snap/indexes/PathIndex';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../core/snap/indexes/ValueIndex';\nimport { Node } from '../core/snap/Node';\nimport { syncPointSetReferenceConstructor } from '../core/SyncPoint';\nimport { syncTreeSetReferenceConstructor } from '../core/SyncTree';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { nextPushId } from '../core/util/NextPushId';\nimport {\n  Path,\n  pathEquals,\n  pathGetBack,\n  pathGetFront,\n  pathChild,\n  pathParent,\n  pathToUrlEncodedString,\n  pathIsEmpty\n} from '../core/util/Path';\nimport {\n  fatal,\n  MAX_NAME,\n  MIN_NAME,\n  ObjectToUniqueKey\n} from '../core/util/util';\nimport {\n  isValidPriority,\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validateKey,\n  validatePathString,\n  validatePriority,\n  validateRootPathString,\n  validateUrl,\n  validateWritablePath\n} from '../core/util/validation';\nimport { Change } from '../core/view/Change';\nimport { CancelEvent, DataEvent, EventType } from '../core/view/Event';\nimport {\n  CallbackContext,\n  EventRegistration,\n  QueryContext,\n  UserCallback\n} from '../core/view/EventRegistration';\nimport {\n  QueryParams,\n  queryParamsEndAt,\n  queryParamsEndBefore,\n  queryParamsGetQueryObject,\n  queryParamsLimitToFirst,\n  queryParamsLimitToLast,\n  queryParamsOrderBy,\n  queryParamsStartAfter,\n  queryParamsStartAt\n} from '../core/view/QueryParams';\n\nimport { Database } from './Database';\nimport { OnDisconnect } from './OnDisconnect';\nimport {\n  ListenOptions,\n  Query as Query,\n  DatabaseReference,\n  Unsubscribe,\n  ThenableReference\n} from './Reference';\n\n/**\n * @internal\n */\nexport class QueryImpl implements Query, QueryContext {\n  /**\n   * @hideconstructor\n   */\n  constructor(\n    readonly _repo: Repo,\n    readonly _path: Path,\n    readonly _queryParams: QueryParams,\n    readonly _orderByCalled: boolean\n  ) {}\n\n  get key(): string | null {\n    if (pathIsEmpty(this._path)) {\n      return null;\n    } else {\n      return pathGetBack(this._path);\n    }\n  }\n\n  get ref(): DatabaseReference {\n    return new ReferenceImpl(this._repo, this._path);\n  }\n\n  get _queryIdentifier(): string {\n    const obj = queryParamsGetQueryObject(this._queryParams);\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n\n  /**\n   * An object representation of the query parameters used by this Query.\n   */\n  get _queryObject(): object {\n    return queryParamsGetQueryObject(this._queryParams);\n  }\n\n  isEqual(other: QueryImpl | null): boolean {\n    other = getModularInstance(other);\n    if (!(other instanceof QueryImpl)) {\n      return false;\n    }\n\n    const sameRepo = this._repo === other._repo;\n    const samePath = pathEquals(this._path, other._path);\n    const sameQueryIdentifier =\n      this._queryIdentifier === other._queryIdentifier;\n\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n\n  toJSON(): string {\n    return this.toString();\n  }\n\n  toString(): string {\n    return this._repo.toString() + pathToUrlEncodedString(this._path);\n  }\n}\n\n/**\n * Validates that no other order by call has been made\n */\nfunction validateNoPreviousOrderByCall(query: QueryImpl, fnName: string) {\n  if (query._orderByCalled === true) {\n    throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n  }\n}\n\n/**\n * Validates start/end values for queries.\n */\nfunction validateQueryEndpoints(params: QueryParams) {\n  let startNode = null;\n  let endNode = null;\n  if (params.hasStart()) {\n    startNode = params.getIndexStartValue();\n  }\n  if (params.hasEnd()) {\n    endNode = params.getIndexEndValue();\n  }\n\n  if (params.getIndex() === KEY_INDEX) {\n    const tooManyArgsError =\n      'Query: When ordering by key, you may only pass one argument to ' +\n      'startAt(), endAt(), or equalTo().';\n    const wrongArgTypeError =\n      'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\n      'endAt(), endBefore(), or equalTo() must be a string.';\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      if (startName !== MIN_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof startNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      if (endName !== MAX_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof endNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n  } else if (params.getIndex() === PRIORITY_INDEX) {\n    if (\n      (startNode != null && !isValidPriority(startNode)) ||\n      (endNode != null && !isValidPriority(endNode))\n    ) {\n      throw new Error(\n        'Query: When ordering by priority, the first argument passed to startAt(), ' +\n          'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\n          '(null, a number, or a string).'\n      );\n    }\n  } else {\n    assert(\n      params.getIndex() instanceof PathIndex ||\n        params.getIndex() === VALUE_INDEX,\n      'unknown index type.'\n    );\n    if (\n      (startNode != null && typeof startNode === 'object') ||\n      (endNode != null && typeof endNode === 'object')\n    ) {\n      throw new Error(\n        'Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\n          'equalTo() cannot be an object.'\n      );\n    }\n  }\n}\n\n/**\n * Validates that limit* has been called with the correct combination of parameters\n */\nfunction validateLimit(params: QueryParams) {\n  if (\n    params.hasStart() &&\n    params.hasEnd() &&\n    params.hasLimit() &&\n    !params.hasAnchoredLimit()\n  ) {\n    throw new Error(\n      \"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\n        'limitToFirst() or limitToLast() instead.'\n    );\n  }\n}\n/**\n * @internal\n */\nexport class ReferenceImpl extends QueryImpl implements DatabaseReference {\n  /** @hideconstructor */\n  constructor(repo: Repo, path: Path) {\n    super(repo, path, new QueryParams(), false);\n  }\n\n  get parent(): ReferenceImpl | null {\n    const parentPath = pathParent(this._path);\n    return parentPath === null\n      ? null\n      : new ReferenceImpl(this._repo, parentPath);\n  }\n\n  get root(): ReferenceImpl {\n    let ref: ReferenceImpl = this;\n    while (ref.parent !== null) {\n      ref = ref.parent;\n    }\n    return ref;\n  }\n}\n\n/**\n * A `DataSnapshot` contains data from a Database location.\n *\n * Any time you read data from the Database, you receive the data as a\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\n * JavaScript object by calling the `val()` method. Alternatively, you can\n * traverse into the snapshot by calling `child()` to return child snapshots\n * (which you could then call `val()` on).\n *\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\n * a Database location. It cannot be modified and will never change (to modify\n * data, you always call the `set()` method on a `Reference` directly).\n */\nexport class DataSnapshot {\n  /**\n   * @param _node - A SnapshotNode to wrap.\n   * @param ref - The location this snapshot came from.\n   * @param _index - The iteration order for this snapshot\n   * @hideconstructor\n   */\n  constructor(\n    readonly _node: Node,\n    /**\n     * The location of this DataSnapshot.\n     */\n    readonly ref: DatabaseReference,\n    readonly _index: Index\n  ) {}\n\n  /**\n   * Gets the priority value of the data in this `DataSnapshot`.\n   *\n   * Applications need not use priority but can order collections by\n   * ordinary properties (see\n   * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\n   * ).\n   */\n  get priority(): string | number | null {\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this._node.getPriority().val() as string | number | null;\n  }\n\n  /**\n   * The key (last part of the path) of the location of this `DataSnapshot`.\n   *\n   * The last token in a Database location is considered its key. For example,\n   * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\n   * `DataSnapshot` will return the key for the location that generated it.\n   * However, accessing the key on the root URL of a Database will return\n   * `null`.\n   */\n  get key(): string | null {\n    return this.ref.key;\n  }\n\n  /** Returns the number of child properties of this `DataSnapshot`. */\n  get size(): number {\n    return this._node.numChildren();\n  }\n\n  /**\n   * Gets another `DataSnapshot` for the location at the specified relative path.\n   *\n   * Passing a relative path to the `child()` method of a DataSnapshot returns\n   * another `DataSnapshot` for the location at the specified relative path. The\n   * relative path can either be a simple child name (for example, \"ada\") or a\n   * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\n   * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\n   * whose value is `null`) is returned.\n   *\n   * @param path - A relative path to the location of child data.\n   */\n  child(path: string): DataSnapshot {\n    const childPath = new Path(path);\n    const childRef = child(this.ref, path);\n    return new DataSnapshot(\n      this._node.getChild(childPath),\n      childRef,\n      PRIORITY_INDEX\n    );\n  }\n  /**\n   * Returns true if this `DataSnapshot` contains any data. It is slightly more\n   * efficient than using `snapshot.val() !== null`.\n   */\n  exists(): boolean {\n    return !this._node.isEmpty();\n  }\n\n  /**\n   * Exports the entire contents of the DataSnapshot as a JavaScript object.\n   *\n   * The `exportVal()` method is similar to `val()`, except priority information\n   * is included (if available), making it suitable for backing up your data.\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  exportVal(): any {\n    return this._node.val(true);\n  }\n\n  /**\n   * Enumerates the top-level children in the `IteratedDataSnapshot`.\n   *\n   * Because of the way JavaScript objects work, the ordering of data in the\n   * JavaScript object returned by `val()` is not guaranteed to match the\n   * ordering on the server nor the ordering of `onChildAdded()` events. That is\n   * where `forEach()` comes in handy. It guarantees the children of a\n   * `DataSnapshot` will be iterated in their query order.\n   *\n   * If no explicit `orderBy*()` method is used, results are returned\n   * ordered by key (unless priorities are used, in which case, results are\n   * returned by priority).\n   *\n   * @param action - A function that will be called for each child DataSnapshot.\n   * The callback can return true to cancel further enumeration.\n   * @returns true if enumeration was canceled due to your callback returning\n   * true.\n   */\n  forEach(action: (child: IteratedDataSnapshot) => boolean | void): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    }\n\n    const childrenNode = this._node as ChildrenNode;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this._index, (key, node) => {\n      return action(\n        new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX)\n      );\n    });\n  }\n\n  /**\n   * Returns true if the specified child path has (non-null) data.\n   *\n   * @param path - A relative path to the location of a potential child.\n   * @returns `true` if data exists at the specified child path; else\n   *  `false`.\n   */\n  hasChild(path: string): boolean {\n    const childPath = new Path(path);\n    return !this._node.getChild(childPath).isEmpty();\n  }\n\n  /**\n   * Returns whether or not the `DataSnapshot` has any non-`null` child\n   * properties.\n   *\n   * You can use `hasChildren()` to determine if a `DataSnapshot` has any\n   * children. If it does, you can enumerate them using `forEach()`. If it\n   * doesn't, then either this snapshot contains a primitive value (which can be\n   * retrieved with `val()`) or it is empty (in which case, `val()` will return\n   * `null`).\n   *\n   * @returns true if this snapshot has any children; else false.\n   */\n  hasChildren(): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    } else {\n      return !this._node.isEmpty();\n    }\n  }\n\n  /**\n   * Returns a JSON-serializable representation of this object.\n   */\n  toJSON(): object | null {\n    return this.exportVal();\n  }\n\n  /**\n   * Extracts a JavaScript value from a `DataSnapshot`.\n   *\n   * Depending on the data in a `DataSnapshot`, the `val()` method may return a\n   * scalar type (string, number, or boolean), an array, or an object. It may\n   * also return null, indicating that the `DataSnapshot` is empty (contains no\n   * data).\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  val(): any {\n    return this._node.val();\n  }\n}\n\n/**\n * Represents a child snapshot of a `Reference` that is being iterated over. The key will never be undefined.\n */\nexport interface IteratedDataSnapshot extends DataSnapshot {\n  key: string; // key of the location of this snapshot.\n}\n\n/**\n *\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided path. If no path is provided, the `Reference`\n * will point to the root of the Database.\n *\n * @param db - The database instance to obtain a reference for.\n * @param path - Optional path representing the location the returned\n *   `Reference` will point. If not provided, the returned `Reference` will\n *   point to the root of the Database.\n * @returns If a path is provided, a `Reference`\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\n *   root of the Database.\n */\nexport function ref(db: Database, path?: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('ref');\n  return path !== undefined ? child(db._root, path) : db._root;\n}\n\n/**\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided Firebase URL.\n *\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\n * has a different domain than the current `Database` instance.\n *\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\n * and are not applied to the returned `Reference`.\n *\n * @param db - The database instance to obtain a reference for.\n * @param url - The Firebase URL at which the returned `Reference` will\n *   point.\n * @returns A `Reference` pointing to the provided\n *   Firebase URL.\n */\nexport function refFromURL(db: Database, url: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('refFromURL');\n  const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\n  validateUrl('refFromURL', parsedURL);\n\n  const repoInfo = parsedURL.repoInfo;\n  if (\n    !db._repo.repoInfo_.isCustomHost() &&\n    repoInfo.host !== db._repo.repoInfo_.host\n  ) {\n    fatal(\n      'refFromURL' +\n        ': Host name does not match the current database: ' +\n        '(found ' +\n        repoInfo.host +\n        ' but expected ' +\n        db._repo.repoInfo_.host +\n        ')'\n    );\n  }\n\n  return ref(db, parsedURL.path.toString());\n}\n/**\n * Gets a `Reference` for the location at the specified relative path.\n *\n * The relative path can either be a simple child name (for example, \"ada\") or\n * a deeper slash-separated path (for example, \"ada/name/first\").\n *\n * @param parent - The parent location.\n * @param path - A relative path from this location to the desired child\n *   location.\n * @returns The specified child location.\n */\nexport function child(\n  parent: DatabaseReference,\n  path: string\n): DatabaseReference {\n  parent = getModularInstance(parent);\n  if (pathGetFront(parent._path) === null) {\n    validateRootPathString('child', 'path', path, false);\n  } else {\n    validatePathString('child', 'path', path, false);\n  }\n  return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\n}\n\n/**\n * Returns an `OnDisconnect` object - see\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information on how to use it.\n *\n * @param ref - The reference to add OnDisconnect triggers for.\n */\nexport function onDisconnect(ref: DatabaseReference): OnDisconnect {\n  ref = getModularInstance(ref) as ReferenceImpl;\n  return new OnDisconnect(ref._repo, ref._path);\n}\n\nexport interface ThenableReferenceImpl\n  extends ReferenceImpl,\n    Pick<Promise<ReferenceImpl>, 'then' | 'catch'> {}\n\n/**\n * Generates a new child location using a unique key and returns its\n * `Reference`.\n *\n * This is the most common pattern for adding data to a collection of items.\n *\n * If you provide a value to `push()`, the value is written to the\n * generated location. If you don't pass a value, nothing is written to the\n * database and the child remains empty (but you can use the `Reference`\n * elsewhere).\n *\n * The unique keys generated by `push()` are ordered by the current time, so the\n * resulting list of items is chronologically sorted. The keys are also\n * designed to be unguessable (they contain 72 random bits of entropy).\n *\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}.\n * See {@link https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}.\n *\n * @param parent - The parent location.\n * @param value - Optional value to be written at the generated location.\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\n * but can be used immediately as the `Reference` to the child location.\n */\nexport function push(\n  parent: DatabaseReference,\n  value?: unknown\n): ThenableReference {\n  parent = getModularInstance(parent);\n  validateWritablePath('push', parent._path);\n  validateFirebaseDataArg('push', value, parent._path, true);\n  const now = repoServerTime(parent._repo);\n  const name = nextPushId(now);\n\n  // push() returns a ThennableReference whose promise is fulfilled with a\n  // regular Reference. We use child() to create handles to two different\n  // references. The first is turned into a ThennableReference below by adding\n  // then() and catch() methods and is used as the return value of push(). The\n  // second remains a regular Reference and is used as the fulfilled value of\n  // the first ThennableReference.\n  const thennablePushRef: Partial<ThenableReferenceImpl> = child(\n    parent,\n    name\n  ) as ReferenceImpl;\n  const pushRef = child(parent, name) as ReferenceImpl;\n\n  let promise: Promise<ReferenceImpl>;\n  if (value != null) {\n    promise = set(pushRef, value).then(() => pushRef);\n  } else {\n    promise = Promise.resolve(pushRef);\n  }\n\n  thennablePushRef.then = promise.then.bind(promise);\n  thennablePushRef.catch = promise.then.bind(promise, undefined);\n  return thennablePushRef as ThenableReferenceImpl;\n}\n\n/**\n * Removes the data at this Database location.\n *\n * Any data at child locations will also be deleted.\n *\n * The effect of the remove will be visible immediately and the corresponding\n * event 'value' will be triggered. Synchronization of the remove to the\n * Firebase servers will also be started, and the returned Promise will resolve\n * when complete. If provided, the onComplete callback will be called\n * asynchronously after synchronization has finished.\n *\n * @param ref - The location to remove.\n * @returns Resolves when remove on server is complete.\n */\nexport function remove(ref: DatabaseReference): Promise<void> {\n  validateWritablePath('remove', ref._path);\n  return set(ref, null);\n}\n\n/**\n * Writes data to this Database location.\n *\n * This will overwrite any data at this location and all child locations.\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\n * all data at this location and all child locations will be deleted.\n *\n * `set()` will remove any priority stored at this location, so if priority is\n * meant to be preserved, you need to use `setWithPriority()` instead.\n *\n * Note that modifying data with `set()` will cancel any pending transactions\n * at that location, so extreme care should be taken if mixing `set()` and\n * `transaction()` to modify the same data.\n *\n * A single `set()` will generate a single \"value\" event at the location where\n * the `set()` was performed.\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function set(ref: DatabaseReference, value: unknown): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('set', ref._path);\n  validateFirebaseDataArg('set', value, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    /*priority=*/ null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Sets a priority for the data at this Database location.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setPriority(\n  ref: DatabaseReference,\n  priority: string | number | null\n): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('setPriority', ref._path);\n  validatePriority('setPriority', priority, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    pathChild(ref._path, '.priority'),\n    priority,\n    null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes data the Database location. Like `set()` but also specifies the\n * priority for that data.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setWithPriority(\n  ref: DatabaseReference,\n  value: unknown,\n  priority: string | number | null\n): Promise<void> {\n  validateWritablePath('setWithPriority', ref._path);\n  validateFirebaseDataArg('setWithPriority', value, ref._path, false);\n  validatePriority('setWithPriority', priority, false);\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\n  }\n\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    priority,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes multiple values to the Database at once.\n *\n * The `values` argument contains multiple property-value pairs that will be\n * written to the Database together. Each child property can either be a simple\n * property (for example, \"name\") or a relative path (for example,\n * \"name/first\") from the current location to the data to update.\n *\n * As opposed to the `set()` method, `update()` can be use to selectively update\n * only the referenced properties at the current location (instead of replacing\n * all the child properties at the current location).\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * A single `update()` will generate a single \"value\" event at the location\n * where the `update()` was performed, regardless of how many children were\n * modified.\n *\n * Note that modifying data with `update()` will cancel any pending\n * transactions at that location, so extreme care should be taken if mixing\n * `update()` and `transaction()` to modify the same data.\n *\n * Passing `null` to `update()` will remove the data at this location.\n *\n * See\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\n *\n * @param ref - The location to write to.\n * @param values - Object containing multiple values.\n * @returns Resolves when update on server is complete.\n */\nexport function update(ref: DatabaseReference, values: object): Promise<void> {\n  validateFirebaseMergeDataArg('update', values, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoUpdate(\n    ref._repo,\n    ref._path,\n    values as Record<string, unknown>,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Gets the most up-to-date result for this query.\n *\n * @param query - The query to run.\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\n * available, or rejects if the client is unable to return a value (e.g., if the\n * server is unreachable and there is nothing cached).\n */\nexport function get(query: Query): Promise<DataSnapshot> {\n  query = getModularInstance(query) as QueryImpl;\n  const callbackContext = new CallbackContext(() => {});\n  const container = new ValueEventRegistration(callbackContext);\n  return repoGetValue(query._repo, query, container).then(node => {\n    return new DataSnapshot(\n      node,\n      new ReferenceImpl(query._repo, query._path),\n      query._queryParams.getIndex()\n    );\n  });\n}\n/**\n * Represents registration for 'value' events.\n */\nexport class ValueEventRegistration implements EventRegistration {\n  constructor(private callbackContext: CallbackContext) {}\n\n  respondsTo(eventType: string): boolean {\n    return eventType === 'value';\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      'value',\n      this,\n      new DataSnapshot(\n        change.snapshotNode,\n        new ReferenceImpl(query._repo, query._path),\n        index\n      )\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue((eventData as DataEvent).snapshot, null);\n    }\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callbackContext || !this.callbackContext) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return other.callbackContext.matches(this.callbackContext);\n    }\n  }\n\n  hasAnyCallback(): boolean {\n    return this.callbackContext !== null;\n  }\n}\n\n/**\n * Represents the registration of a child_x event.\n */\nexport class ChildEventRegistration implements EventRegistration {\n  constructor(\n    private eventType: string,\n    private callbackContext: CallbackContext | null\n  ) {}\n\n  respondsTo(eventType: string): boolean {\n    let eventToCheck =\n      eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck =\n      eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return this.eventType === eventToCheck;\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const childRef = child(\n      new ReferenceImpl(query._repo, query._path),\n      change.childName\n    );\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      change.type as EventType,\n      this,\n      new DataSnapshot(change.snapshotNode, childRef, index),\n      change.prevName\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue(\n          (eventData as DataEvent).snapshot,\n          (eventData as DataEvent).prevName\n        );\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (other instanceof ChildEventRegistration) {\n      return (\n        this.eventType === other.eventType &&\n        (!this.callbackContext ||\n          !other.callbackContext ||\n          this.callbackContext.matches(other.callbackContext))\n      );\n    }\n\n    return false;\n  }\n\n  hasAnyCallback(): boolean {\n    return !!this.callbackContext;\n  }\n}\n\nfunction addEventListener(\n  query: Query,\n  eventType: EventType,\n  callback: UserCallback,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n) {\n  let cancelCallback: ((error: Error) => unknown) | undefined;\n  if (typeof cancelCallbackOrListenOptions === 'object') {\n    cancelCallback = undefined;\n    options = cancelCallbackOrListenOptions;\n  }\n  if (typeof cancelCallbackOrListenOptions === 'function') {\n    cancelCallback = cancelCallbackOrListenOptions;\n  }\n\n  if (options && options.onlyOnce) {\n    const userCallback = callback;\n    const onceCallback: UserCallback = (dataSnapshot, previousChildName) => {\n      repoRemoveEventCallbackForQuery(query._repo, query, container);\n      userCallback(dataSnapshot, previousChildName);\n    };\n    onceCallback.userCallback = callback.userCallback;\n    onceCallback.context = callback.context;\n    callback = onceCallback;\n  }\n\n  const callbackContext = new CallbackContext(\n    callback,\n    cancelCallback || undefined\n  );\n  const container =\n    eventType === 'value'\n      ? new ValueEventRegistration(callbackContext)\n      : new ChildEventRegistration(eventType, callbackContext);\n  repoAddEventCallbackForQuery(query._repo, query, container);\n  return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'value',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_added',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_changed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_moved',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_removed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\nexport { EventType };\n\n/**\n * Detaches a callback previously attached with the corresponding `on*()` (`onValue`, `onChildAdded`) listener.\n * Note: This is not the recommended way to remove a listener. Instead, please use the returned callback function from\n * the respective `on*` callbacks.\n *\n * Detach a callback previously attached with `on*()`. Calling `off()` on a parent listener\n * will not automatically remove listeners registered on child nodes, `off()`\n * must also be called on any child listeners to remove the callback.\n *\n * If a callback is not specified, all callbacks for the specified eventType\n * will be removed. Similarly, if no eventType is specified, all callbacks\n * for the `Reference` will be removed.\n *\n * Individual listeners can also be removed by invoking their unsubscribe\n * callbacks.\n *\n * @param query - The query that the listener was registered with.\n * @param eventType - One of the following strings: \"value\", \"child_added\",\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\n * for the `Reference` will be removed.\n * @param callback - The callback function that was passed to `on()` or\n * `undefined` to remove all callbacks.\n */\nexport function off(\n  query: Query,\n  eventType?: EventType,\n  callback?: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown\n): void {\n  let container: EventRegistration | null = null;\n  const expCallback = callback ? new CallbackContext(callback) : null;\n  if (eventType === 'value') {\n    container = new ValueEventRegistration(expCallback);\n  } else if (eventType) {\n    container = new ChildEventRegistration(eventType, expCallback);\n  }\n  repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/** Describes the different query constraints available in this SDK. */\nexport type QueryConstraintType =\n  | 'endAt'\n  | 'endBefore'\n  | 'startAt'\n  | 'startAfter'\n  | 'limitToFirst'\n  | 'limitToLast'\n  | 'orderByChild'\n  | 'orderByKey'\n  | 'orderByPriority'\n  | 'orderByValue'\n  | 'equalTo';\n\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\n * {@link orderByValue}  or {@link equalTo} and\n * can then be passed to {@link query} to create a new query instance that\n * also contains this `QueryConstraint`.\n */\nexport abstract class QueryConstraint {\n  /** The type of this query constraints */\n  abstract readonly type: QueryConstraintType;\n\n  /**\n   * Takes the provided `Query` and returns a copy of the `Query` with this\n   * `QueryConstraint` applied.\n   */\n  abstract _apply<T>(query: QueryImpl): QueryImpl;\n}\n\nclass QueryEndAtConstraint extends QueryConstraint {\n  readonly type: 'endAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endAt', this._value, query._path, true);\n    const newParams = queryParamsEndAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endAt: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name less than or equal\n * to the specified key.\n *\n * You can read more about `endAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to end at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end at, among the children with the previously\n * specified priority. This argument is only allowed if ordering by child,\n * value, or priority.\n */\nexport function endAt(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endAt', 'key', key, true);\n  return new QueryEndAtConstraint(value, key);\n}\n\nclass QueryEndBeforeConstraint extends QueryConstraint {\n  readonly type: 'endBefore';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endBefore', this._value, query._path, false);\n    const newParams = queryParamsEndBefore(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endBefore: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is exclusive. If only a value is provided, children\n * with a value less than the specified value will be included in the query.\n * If a key is specified, then children must have a value less than or equal\n * to the specified value and a key name less than the specified key.\n *\n * @param value - The value to end before. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end before, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function endBefore(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endBefore', 'key', key, true);\n  return new QueryEndBeforeConstraint(value, key);\n}\n\nclass QueryStartAtConstraint extends QueryConstraint {\n  readonly type: 'startAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAt', this._value, query._path, true);\n    const newParams = queryParamsStartAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAt: Starting point was already set (by another call to startAt, ' +\n          'startBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name greater than or\n * equal to the specified key.\n *\n * You can read more about `startAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to start at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAt(\n  value: number | string | boolean | null = null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAt', 'key', key, true);\n  return new QueryStartAtConstraint(value, key);\n}\n\nclass QueryStartAfterConstraint extends QueryConstraint {\n  readonly type: 'startAfter';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAfter', this._value, query._path, false);\n    const newParams = queryParamsStartAfter(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAfter: Starting point was already set (by another call to startAt, ' +\n          'startAfter, or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is exclusive. If only a value is provided, children\n * with a value greater than the specified value will be included in the query.\n * If a key is specified, then children must have a value greater than or equal\n * to the specified value and a a key name greater than the specified key.\n *\n * @param value - The value to start after. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start after. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAfter(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAfter', 'key', key, true);\n  return new QueryStartAfterConstraint(value, key);\n}\n\nclass QueryLimitToFirstConstraint extends QueryConstraint {\n  readonly type: 'limitToFirst';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToFirst: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToFirst(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that if limited to the first specific number\n * of children.\n *\n * The `limitToFirst()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the first 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToFirst()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToFirst(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToFirst: First argument must be a positive integer.');\n  }\n  return new QueryLimitToFirstConstraint(limit);\n}\n\nclass QueryLimitToLastConstraint extends QueryConstraint {\n  readonly type: 'limitToLast';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToLast: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToLast(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that is limited to return only the last\n * specified number of children.\n *\n * The `limitToLast()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the last 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToLast()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToLast(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToLast: First argument must be a positive integer.');\n  }\n\n  return new QueryLimitToLastConstraint(limit);\n}\n\nclass QueryOrderByChildConstraint extends QueryConstraint {\n  readonly type: 'orderByChild';\n\n  constructor(private readonly _path: string) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByChild');\n    const parsedPath = new Path(this._path);\n    if (pathIsEmpty(parsedPath)) {\n      throw new Error(\n        'orderByChild: cannot pass in empty path. Use orderByValue() instead.'\n      );\n    }\n    const index = new PathIndex(parsedPath);\n    const newParams = queryParamsOrderBy(query._queryParams, index);\n    validateQueryEndpoints(newParams);\n\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the specified child key.\n *\n * Queries can only order by one key at a time. Calling `orderByChild()`\n * multiple times on the same query is an error.\n *\n * Firebase queries allow you to order your data by any child key on the fly.\n * However, if you know in advance what your indexes will be, you can define\n * them via the .indexOn rule in your Security Rules for better performance. See\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\n * rule for more information.\n *\n * You can read more about `orderByChild()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n *\n * @param path - The path to order by.\n */\nexport function orderByChild(path: string): QueryConstraint {\n  if (path === '$key') {\n    throw new Error(\n      'orderByChild: \"$key\" is invalid.  Use orderByKey() instead.'\n    );\n  } else if (path === '$priority') {\n    throw new Error(\n      'orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.'\n    );\n  } else if (path === '$value') {\n    throw new Error(\n      'orderByChild: \"$value\" is invalid.  Use orderByValue() instead.'\n    );\n  }\n  validatePathString('orderByChild', 'path', path, false);\n  return new QueryOrderByChildConstraint(path);\n}\n\nclass QueryOrderByKeyConstraint extends QueryConstraint {\n  readonly type: 'orderByKey';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByKey');\n    const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the key.\n *\n * Sorts the results of a query by their (ascending) key values.\n *\n * You can read more about `orderByKey()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByKey(): QueryConstraint {\n  return new QueryOrderByKeyConstraint();\n}\n\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\n  readonly type: 'orderByPriority';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByPriority');\n    const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by priority.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\n * for alternatives to priority.\n */\nexport function orderByPriority(): QueryConstraint {\n  return new QueryOrderByPriorityConstraint();\n}\n\nclass QueryOrderByValueConstraint extends QueryConstraint {\n  readonly type: 'orderByValue';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByValue');\n    const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by value.\n *\n * If the children of a query are all scalar values (string, number, or\n * boolean), you can order the results by their (ascending) values.\n *\n * You can read more about `orderByValue()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByValue(): QueryConstraint {\n  return new QueryOrderByValueConstraint();\n}\n\nclass QueryEqualToValueConstraint extends QueryConstraint {\n  readonly type: 'equalTo';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('equalTo', this._value, query._path, false);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\n          'equalTo).'\n      );\n    }\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\n          'equalTo).'\n      );\n    }\n    return new QueryEndAtConstraint(this._value, this._key)._apply(\n      new QueryStartAtConstraint(this._value, this._key)._apply(query)\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` that includes children that match the specified\n * value.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The optional key argument can be used to further limit the range of the\n * query. If it is specified, then children that have exactly the specified\n * value must also have exactly the specified key as their key name. This can be\n * used to filter result sets with many matches for the same value.\n *\n * You can read more about `equalTo()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to match for. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function equalTo(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('equalTo', 'key', key, true);\n  return new QueryEqualToValueConstraint(value, key);\n}\n\n/**\n * Creates a new immutable instance of `Query` that is extended to also include\n * additional query constraints.\n *\n * @param query - The Query instance to use as a base for the new constraints.\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\n * @throws if any of the provided query constraints cannot be combined with the\n * existing or new constraints.\n */\nexport function query(\n  query: Query,\n  ...queryConstraints: QueryConstraint[]\n): Query {\n  let queryImpl = getModularInstance(query) as QueryImpl;\n  for (const constraint of queryConstraints) {\n    queryImpl = constraint._apply(queryImpl);\n  }\n  return queryImpl;\n}\n\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nsyncPointSetReferenceConstructor(ReferenceImpl);\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _FirebaseService,\n  _getProvider,\n  FirebaseApp,\n  getApp\n} from '@firebase/app';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport {\n  getModularInstance,\n  createMockUserToken,\n  EmulatorMockTokenOptions,\n  getDefaultEmulatorHostnameAndPort\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from '../core/AppCheckTokenProvider';\nimport {\n  AuthTokenProvider,\n  EmulatorTokenProvider,\n  FirebaseAuthTokenProvider\n} from '../core/AuthTokenProvider';\nimport { Repo, repoInterrupt, repoResume, repoStart } from '../core/Repo';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { newEmptyPath, pathIsEmpty } from '../core/util/Path';\nimport {\n  warn,\n  fatal,\n  log,\n  enableLogging as enableLoggingImpl\n} from '../core/util/util';\nimport { validateUrl } from '../core/util/validation';\nimport { BrowserPollConnection } from '../realtime/BrowserPollConnection';\nimport { TransportManager } from '../realtime/TransportManager';\nimport { WebSocketConnection } from '../realtime/WebSocketConnection';\n\nimport { ReferenceImpl } from './Reference_impl';\n\nexport { EmulatorMockTokenOptions } from '@firebase/util';\n/**\n * This variable is also defined in the firebase Node.js Admin SDK. Before\n * modifying this definition, consult the definition in:\n *\n * https://github.com/firebase/firebase-admin-node\n *\n * and make sure the two are consistent.\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n\n/**\n * Creates and caches `Repo` instances.\n */\nconst repos: {\n  [appName: string]: {\n    [dbUrl: string]: Repo;\n  };\n} = {};\n\n/**\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\n */\nlet useRestClient = false;\n\n/**\n * Update an existing `Repo` in place to point to a new host/port.\n */\nfunction repoManagerApplyEmulatorSettings(\n  repo: Repo,\n  host: string,\n  port: number,\n  tokenProvider?: AuthTokenProvider\n): void {\n  repo.repoInfo_ = new RepoInfo(\n    `${host}:${port}`,\n    /* secure= */ false,\n    repo.repoInfo_.namespace,\n    repo.repoInfo_.webSocketOnly,\n    repo.repoInfo_.nodeAdmin,\n    repo.repoInfo_.persistenceKey,\n    repo.repoInfo_.includeNamespaceInQueryParams,\n    /*isUsingEmulator=*/ true\n  );\n\n  if (tokenProvider) {\n    repo.authTokenProvider_ = tokenProvider;\n  }\n}\n\n/**\n * This function should only ever be called to CREATE a new database instance.\n * @internal\n */\nexport function repoManagerDatabaseFromApp(\n  app: FirebaseApp,\n  authProvider: Provider<FirebaseAuthInternalName>,\n  appCheckProvider?: Provider<AppCheckInternalComponentName>,\n  url?: string,\n  nodeAdmin?: boolean\n): Database {\n  let dbUrl: string | undefined = url || app.options.databaseURL;\n  if (dbUrl === undefined) {\n    if (!app.options.projectId) {\n      fatal(\n        \"Can't determine Firebase Database URL. Be sure to include \" +\n          ' a Project ID when calling firebase.initializeApp().'\n      );\n    }\n\n    log('Using default host for project ', app.options.projectId);\n    dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\n  }\n\n  let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n  let repoInfo = parsedUrl.repoInfo;\n\n  let isEmulator: boolean;\n\n  let dbEmulatorHost: string | undefined = undefined;\n  if (typeof process !== 'undefined' && process.env) {\n    dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n  }\n\n  if (dbEmulatorHost) {\n    isEmulator = true;\n    dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n    parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    repoInfo = parsedUrl.repoInfo;\n  } else {\n    isEmulator = !parsedUrl.repoInfo.secure;\n  }\n\n  const authTokenProvider =\n    nodeAdmin && isEmulator\n      ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\n      : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\n\n  validateUrl('Invalid Firebase Database URL', parsedUrl);\n  if (!pathIsEmpty(parsedUrl.path)) {\n    fatal(\n      'Database URL must point to the root of a Firebase Database ' +\n        '(not including a child path).'\n    );\n  }\n\n  const repo = repoManagerCreateRepo(\n    repoInfo,\n    app,\n    authTokenProvider,\n    new AppCheckTokenProvider(app.name, appCheckProvider)\n  );\n  return new Database(repo, app);\n}\n\n/**\n * Remove the repo and make sure it is disconnected.\n *\n */\nfunction repoManagerDeleteRepo(repo: Repo, appName: string): void {\n  const appRepos = repos[appName];\n  // This should never happen...\n  if (!appRepos || appRepos[repo.key] !== repo) {\n    fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\n  }\n  repoInterrupt(repo);\n  delete appRepos[repo.key];\n}\n\n/**\n * Ensures a repo doesn't already exist and then creates one using the\n * provided app.\n *\n * @param repoInfo - The metadata about the Repo\n * @returns The Repo object for the specified server / repoName.\n */\nfunction repoManagerCreateRepo(\n  repoInfo: RepoInfo,\n  app: FirebaseApp,\n  authTokenProvider: AuthTokenProvider,\n  appCheckProvider: AppCheckTokenProvider\n): Repo {\n  let appRepos = repos[app.name];\n\n  if (!appRepos) {\n    appRepos = {};\n    repos[app.name] = appRepos;\n  }\n\n  let repo = appRepos[repoInfo.toURLString()];\n  if (repo) {\n    fatal(\n      'Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.'\n    );\n  }\n  repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\n  appRepos[repoInfo.toURLString()] = repo;\n\n  return repo;\n}\n\n/**\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n */\nexport function repoManagerForceRestClient(forceRestClient: boolean): void {\n  useRestClient = forceRestClient;\n}\n\n/**\n * Class representing a Firebase Realtime Database.\n */\nexport class Database implements _FirebaseService {\n  /** Represents a `Database` instance. */\n  readonly 'type' = 'database';\n\n  /** Track if the instance has been used (root or repo accessed) */\n  _instanceStarted: boolean = false;\n\n  /** Backing state for root_ */\n  private _rootInternal?: ReferenceImpl;\n\n  /** @hideconstructor */\n  constructor(\n    public _repoInternal: Repo,\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\n    readonly app: FirebaseApp\n  ) {}\n\n  get _repo(): Repo {\n    if (!this._instanceStarted) {\n      repoStart(\n        this._repoInternal,\n        this.app.options.appId,\n        this.app.options['databaseAuthVariableOverride']\n      );\n      this._instanceStarted = true;\n    }\n    return this._repoInternal;\n  }\n\n  get _root(): ReferenceImpl {\n    if (!this._rootInternal) {\n      this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\n    }\n    return this._rootInternal;\n  }\n\n  _delete(): Promise<void> {\n    if (this._rootInternal !== null) {\n      repoManagerDeleteRepo(this._repo, this.app.name);\n      this._repoInternal = null;\n      this._rootInternal = null;\n    }\n    return Promise.resolve();\n  }\n\n  _checkNotDeleted(apiName: string) {\n    if (this._rootInternal === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n}\n\nfunction checkTransportInit() {\n  if (TransportManager.IS_TRANSPORT_INITIALIZED) {\n    warn(\n      'Transport has already been initialized. Please call this function before calling ref or setting up a listener'\n    );\n  }\n}\n\n/**\n * Force the use of websockets instead of longPolling.\n */\nexport function forceWebSockets() {\n  checkTransportInit();\n  BrowserPollConnection.forceDisallow();\n}\n\n/**\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\n */\nexport function forceLongPolling() {\n  checkTransportInit();\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n}\n\n/**\n * Returns the instance of the Realtime Database SDK that is associated\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\n * with default settings if no instance exists or if the existing instance uses\n * a custom database URL.\n *\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\n * Database instance is associated with.\n * @param url - The URL of the Realtime Database instance to connect to. If not\n * provided, the SDK connects to the default instance of the Firebase App.\n * @returns The `Database` instance of the provided app.\n */\nexport function getDatabase(\n  app: FirebaseApp = getApp(),\n  url?: string\n): Database {\n  const db = _getProvider(app, 'database').getImmediate({\n    identifier: url\n  }) as Database;\n  if (!db._instanceStarted) {\n    const emulator = getDefaultEmulatorHostnameAndPort('database');\n    if (emulator) {\n      connectDatabaseEmulator(db, ...emulator);\n    }\n  }\n  return db;\n}\n\n/**\n * Modify the provided instance to communicate with the Realtime Database\n * emulator.\n *\n * <p>Note: This method must be called before performing any other operation.\n *\n * @param db - The instance to modify.\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 8080)\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\n */\nexport function connectDatabaseEmulator(\n  db: Database,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('useEmulator');\n  if (db._instanceStarted) {\n    fatal(\n      'Cannot call useEmulator() after instance has already been initialized.'\n    );\n  }\n\n  const repo = db._repoInternal;\n  let tokenProvider: EmulatorTokenProvider | undefined = undefined;\n  if (repo.repoInfo_.nodeAdmin) {\n    if (options.mockUserToken) {\n      fatal(\n        'mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".'\n      );\n    }\n    tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\n  } else if (options.mockUserToken) {\n    const token =\n      typeof options.mockUserToken === 'string'\n        ? options.mockUserToken\n        : createMockUserToken(options.mockUserToken, db.app.options.projectId);\n    tokenProvider = new EmulatorTokenProvider(token);\n  }\n\n  // Modify the repo to apply emulator settings\n  repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\n}\n\n/**\n * Disconnects from the server (all Database operations will be completed\n * offline).\n *\n * The client automatically maintains a persistent connection to the Database\n * server, which will remain active indefinitely and reconnect when\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\n * to control the client connection in cases where a persistent connection is\n * undesirable.\n *\n * While offline, the client will no longer receive data updates from the\n * Database. However, all Database operations performed locally will continue to\n * immediately fire events, allowing your application to continue behaving\n * normally. Additionally, each operation performed locally will automatically\n * be queued and retried upon reconnection to the Database server.\n *\n * To reconnect to the Database and begin receiving remote events, see\n * `goOnline()`.\n *\n * @param db - The instance to disconnect.\n */\nexport function goOffline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOffline');\n  repoInterrupt(db._repo);\n}\n\n/**\n * Reconnects to the server and synchronizes the offline Database state\n * with the server state.\n *\n * This method should be used after disabling the active connection with\n * `goOffline()`. Once reconnected, the client will transmit the proper data\n * and fire the appropriate events so that your client \"catches up\"\n * automatically.\n *\n * @param db - The instance to reconnect.\n */\nexport function goOnline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOnline');\n  repoResume(db._repo);\n}\n\n/**\n * Logs debugging information to the console.\n *\n * @param enabled - Enables logging if `true`, disables logging if `false`.\n * @param persistent - Remembers the logging state between page refreshes if\n * `true`.\n */\nexport function enableLogging(enabled: boolean, persistent?: boolean);\n\n/**\n * Logs debugging information to the console.\n *\n * @param logger - A custom logger function to control how things get logged.\n */\nexport function enableLogging(logger: (message: string) => unknown);\n\nexport function enableLogging(\n  logger: boolean | ((message: string) => unknown),\n  persistent?: boolean\n): void {\n  enableLoggingImpl(logger, persistent);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PersistentConnection } from '../core/PersistentConnection';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { Connection } from '../realtime/Connection';\n\nimport { repoManagerForceRestClient } from './Database';\n\nexport const DataConnection = PersistentConnection;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).simpleListen = function (\n  pathString: string,\n  onComplete: (a: unknown) => void\n) {\n  this.sendRequest('q', { p: pathString }, onComplete);\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).echo = function (\n  data: unknown,\n  onEcho: (a: unknown) => void\n) {\n  this.sendRequest('echo', { d: data }, onEcho);\n};\n\n// RealTimeConnection properties that we use in tests.\nexport const RealTimeConnection = Connection;\n\n/**\n * @internal\n */\nexport const hijackHash = function (newHash: () => string) {\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function (\n    pathString,\n    data,\n    onComplete,\n    hash\n  ) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n\nexport const ConnectionTarget = RepoInfo;\n\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n * @internal\n */\nexport const forceRestClient = function (forceRestClient: boolean) {\n  repoManagerForceRestClient(forceRestClient);\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\nimport { Component, ComponentType } from '@firebase/component';\n\nimport { name, version } from '../package.json';\nimport { setSDKVersion } from '../src/core/version';\n\nimport { repoManagerDatabaseFromApp } from './api/Database';\n\nexport function registerDatabase(variant?: string): void {\n  setSDKVersion(SDK_VERSION);\n  _registerComponent(\n    new Component(\n      'database',\n      (container, { instanceIdentifier: url }) => {\n        const app = container.getProvider('app').getImmediate()!;\n        const authProvider = container.getProvider('auth-internal');\n        const appCheckProvider = container.getProvider('app-check-internal');\n        return repoManagerDatabaseFromApp(\n          app,\n          authProvider,\n          appCheckProvider,\n          url\n        );\n      },\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n"],"names":["CONSTANTS","assert","assertion","message","assertionError","Error","stringToByteArray","str","out","p","i","length","c","charCodeAt","base64","byteToCharMap_","charToByteMap_","byteToCharMapWebSafe_","charToByteMapWebSafe_","ENCODED_VALS_BASE","ENCODED_VALS","this","ENCODED_VALS_WEBSAFE","HAS_NATIVE_SUPPORT","atob","encodeByteArray","input","webSafe","Array","isArray","init_","byteToCharMap","output","byte1","haveByte2","byte2","haveByte3","byte3","outByte1","outByte2","outByte3","outByte4","push","join","encodeString","btoa","decodeString","bytes","pos","c1","String","fromCharCode","c2","u","c3","byteArrayToString","decodeStringToByteArray","charToByteMap","charAt","byte4","DecodeBase64StringError","_inherits","_classCallCheck","name","base64Encode","utf8Bytes","base64urlEncodeWithoutPadding","replace","base64Decode","e","console","error","deepCopy","value","deepExtend","undefined","target","source","Object","constructor","Date","getTime","prop","hasOwnProperty","getDefaultsFromGlobal","self","window","global","getGlobal","__FIREBASE_DEFAULTS__","getDefaults","process","defaultsJsonString","JSON","parse","getDefaultsFromEnvVariable","document","match","cookie","decoded","getDefaultsFromCookie","info","getDefaultEmulatorHostnameAndPort","productName","host","emulatorHosts","getDefaultEmulatorHost","separatorIndex","lastIndexOf","port","parseInt","substring","getDefaultAppConfig","config","Deferred","reject","resolve","promise","Promise","_this2","_createClass","key","callback","_this3","catch","createMockUserToken","token","projectId","uid","project","iat","sub","user_id","payload","iss","aud","exp","auth_time","firebase","sign_in_provider","identities","stringify","alg","type","getUA","navigator","isMobileCordova","test","isReactNative","isNodeSdk","isIndexedDBAvailable","indexedDB","validateIndexedDBOpenable","preExist","DB_CHECK_NAME","request","open","onsuccess","result","close","deleteDatabase","onupgradeneeded","onerror","FirebaseError","code","customData","_this4","setPrototypeOf","prototype","captureStackTrace","ErrorFactory","create","service","serviceName","errors","fullCode","template","replaceTemplate","fullMessage","data","PATTERN","_","jsonEval","decode","header","claims","signature","parts","split","isValidFormat","isAdmin","contains","obj","call","safeGet","isEmpty","map","fn","contextObj","res","deepEqual","a","b","aKeys","keys","bKeys","k","includes","aProp","bProp","isObject","thing","querystring","querystringParams","params","forEach","arrayVal","encodeURIComponent","entries","_loop","Sha1","blockSize","pad_","reset","chain_","inbuf_","total_","buf","offset","W","W_","t","f","d","lengthMinusBlock","n","buf_","inbuf","compress_","digest","totalBits","update","j","errorPrefix","fnName","argName","high","stringLength","getModularInstance","_delegate","asyncGeneratorStep","gen","_next","_throw","arg","done","then","_asyncToGenerator","args","arguments","apply","err","_defineProperty","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","_objectSpread2","getOwnPropertyDescriptors","defineProperties","idbProxyableTypes","cursorAdvanceMethods","cursorRequestMap","WeakMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","idbProxyTraps","get","receiver","IDBTransaction","objectStoreNames","objectStore","wrap","set","has","wrapFunction","func","IDBDatabase","transaction","IDBCursor","advance","continue","continuePrimaryKey","_len2","_key2","unwrap","_len3","_key3","storeNames","_len","_key","tx","concat","sort","transformCachableValue","unlisten","removeEventListener","complete","DOMException","addEventListener","cacheDonePromiseForTransaction","IDBObjectStore","IDBIndex","some","Proxy","IDBRequest","success","promisifyRequest","newValue","readMethods","writeMethods","cachedMethods","Map","getMethod","targetFuncName","useIndex","isWrite","method","_ref3","_regeneratorRuntime","_callee","storeName","_target","_args","_context","prev","next","store","index","shift","all","abrupt","sent","stop","_x","oldTraps","_objectSpread","PlatformLoggerServiceImpl","container","getProviders","provider","component","getComponent","isVersionServiceProvider","getImmediate","library","version","logString","logger","Logger","DEFAULT_ENTRY_NAME","PLATFORM_LOG_STRING","appName","_apps","_components","_addComponent","app","addComponent","debug","_registerComponent","componentName","_step","values","_iterator","_getProvider","heartbeatController","getProvider","optional","triggerHeartbeat","ERRORS","ERROR_FACTORY","FirebaseAppImpl","options","_options","_config","_name","_automaticDataCollectionEnabled","automaticDataCollectionEnabled","_container","Component","_this","checkDestroyed","val","_isDeleted","isDeleted","SDK_VERSION","initializeApp","rawConfig","existingApp","_step2","ComponentContainer","_iterator2","newApp","getApp","registerVersion","libraryKeyOrName","variant","libraryMismatch","versionMismatch","warning","warn","STORE_NAME","dbPromise","getDbPromise","_ref","blocked","upgrade","blocking","terminated","openPromise","event","oldVersion","newVersion","db","openDB","createObjectStore","originalErrorMessage","readHeartbeatsFromIndexedDB","_readHeartbeatsFromIndexedDB","_context8","computeKey","idbGetError","writeHeartbeatsToIndexedDB","_writeHeartbeatsToIndexedDB","heartbeatObject","_context9","put","appId","HeartbeatServiceImpl","_storage","HeartbeatStorageImpl","_heartbeatsCachePromise","read","_heartbeatsCache","platformLogger","agent","getPlatformInfoString","date","getUTCDateString","heartbeats","lastSentHeartbeatDate","singleDateHeartbeat","hbTimestamp","valueOf","now","overwrite","_context2","extractHeartbeatsForHeader","heartbeatsToSend","unsentEntries","headerString","toISOString","heartbeatsCache","_step3","maxSize","slice","heartbeatEntry","find","hb","dates","countBytes","pop","_iterator3","_canUseIndexedDBPromise","runIndexedDBEnvironmentCheck","_context3","_context4","idbHeartbeatObject","heartbeatsObject","_context5","existingHeartbeatsObject","_context6","instanceFactory","instantiationMode","mode","multipleInstances","props","serviceProps","onInstanceCreated","Provider","instances","instancesDeferred","instancesOptions","onInitCallbacks","identifier","normalizedIdentifier","normalizeInstanceIdentifier","deferred","isInitialized","shouldAutoInitialize","instance","getOrInitializeService","instanceIdentifier","isComponentEager","instanceDeferred","delete","services","from","INTERNAL","_delete","opts","isComponentSet","normalizedDeferredIdentifier","existingCallbacks","Set","add","existingInstance","callbacks","_a","_ref$options","invokeOnInitCallbacks","providers","setComponent","LogLevel","levelStringToEnum","DEBUG","VERBOSE","INFO","WARN","ERROR","SILENT","defaultLogLevel","ConsoleMethod","defaultLogHandler","logType","logLevel","_logLevel","TypeError","_logHandler","_userLogHandler","setSDKVersion","DOMStorageWrapper","domStorage_","removeItem","prefixedName_","setItem","storedVal","getItem","prefix_","toString","MemoryStorage","cache_","createStoragefor","domStorageName","domStorage","PersistentStorage","SessionStorage","logClient","LUIDGenerator","id","sha1","sha1Bytes","buildLogMessage_","firstLog_","enableLogging","logger_","persistent","log","bind","remove","varArgs","logWrapper","prefix","fatal","isInvalidJSONNumber","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","MIN_NAME","MAX_NAME","nameCompare","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","ObjectToUniqueKey","splitStringBySize","segsize","len","dataSegs","each","doubleToIEEE754String","v","s","ln","bias","Infinity","Math","abs","pow","min","floor","LN2","round","bits","reverse","hexByteString","hexByte","substr","toLowerCase","INTEGER_REGEXP_","RegExp","intVal","exceptionGuard","setTimeout","stack","setTimeoutNonBlocking","time","timeout","Deno","unrefTimer","AppCheckTokenProvider","appName_","appCheckProvider","appCheck","forceRefresh","getToken","listener","addTokenListener","FirebaseAuthTokenProvider","firebaseOptions_","authProvider_","auth_","onInit","auth","addAuthTokenListener","removeAuthTokenListener","errorMessage","EmulatorTokenProvider","accessToken","PROTOCOL_VERSION","FORGE_DOMAIN_RE","WEBSOCKET","LONG_POLLING","RepoInfo","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","isUsingEmulator","_host","_domain","indexOf","internalHost","newHost","isCacheableHost","toURLString","protocol","query","repoInfoConnectionURL","repoInfo","connURL","isCustomHost","repoInfoNeedsQueryParam","pairs","StatsCollection","amount","counters_","collections","reporters","statsManagerGetCollection","hashString","PacketReceiver","onMessage_","responseNum","closeAfterResponse","onClose","currentResponseNum","requestNum","pendingResponses","toProcess","_this5","_loop2","FIREBASE_LONGPOLL_START_PARAM","FIREBASE_LONGPOLL_CLOSE_COMMAND","BrowserPollConnection","connId","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","log_","stats_","urlFn","_this6","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","_this7","onClosed_","readyState","called","wrappedFn","body","attachEvent","executeWhenDOMReady","scriptTagHolder","FirebaseIFrameScriptHolder","command","arg1","arg2","incrementIncomingBytes_","clearTimeout","everConnected_","password","sendNewPolls","closeAfter","pN","handleResponse","urlParams","random","uniqueCallbackIdentifier","location","hostname","connectURL","addTag","startLongPoll","addDisconnectPingFrame","myDisconnFrame","removeChild","shutdown_","dataStr","bytesSent","incrementCounter","base64data","MAX_URL_DATA_SIZE","enqueueSegment","pw","createElement","src","style","display","appendChild","bytesReceived","forceAllow_","forceDisallow_","href","Windows","UI","commandCB","onMessageCB","outstandingRequests","currentSerial","myIFrame","createIFrame_","script","domain","iframeContents","doc","write","alive","textContent","_this8","myID","myPW","newRequest_","size","pendingSegs","theURL","curDataString","theSeg","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","doNewRequest","_this9","keepaliveTimeout","loadCB","doNodeLongPoll","_this10","newScript","async","onload","onreadystatechange","rstate","parentNode","iframe","contentWindow","contentDocument","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","connectionURL_","device","headers","platform","env","proxy","origin","mySock","onopen","_this11","onclose","onmessage","m","handleIncomingFrame","frames","totalFrames","fullMess","jsonMess","frameCount","isNaN","handleNewFrameCount_","mess","resetKeepAlive","appendFrame_","remainingData","extractFrameCount_","sendString_","keepaliveTimer","clearInterval","setInterval","_this12","send","isOldAndroid","userAgent","oldAndroidMatch","parseFloat","isInMemoryStorage","TransportManager","initTransports_","isWebSocketsAvailable","isSkipPollConnection","previouslyFailed","transports_","transports","ALL_TRANSPORTS","transport","globalTransportInitialized_","Connection","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","state_","transportManager_","start_","conn","initialTransport","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","_this13","healthyTimeoutMS","healthyTimeout_","markConnectionHealthy","connectionCount","everConnected","_this14","onConnectionLost_","onSecondaryConnectionLost_","_this15","onPrimaryMessageReceived_","onSecondaryMessageReceived_","dataMsg","msg","sendData_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","onSecondaryControl_","pendingDataMessages","proceedWithUpgrade_","start","tryCleanupConnection","onControl_","onDataMessage_","onPrimaryResponse_","handshakePayload","h","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","sessionId","onConnectionEstablished_","tryStartUpgrade_","upgradeTransport","startUpgrade_","_this16","closeConnections_","_this17","reason","ServerActions","pathString","onComplete","hash","stats","EventEmitter","allowedEvents_","eventType","listeners_","listeners","context","validateEventType_","eventData","getInitialEvent","splice","et","OnlineMonitor","_this18","online_","trigger","Path","pathOrString","pieceNum","pieces_","copyTo","pieceNum_","newEmptyPath","pathGetFront","path","pathGetLength","pathPopFront","pathGetBack","pathSlice","begin","pathParent","pieces","pathChild","childPathObj","childPieces","pathIsEmpty","newRelativePath","outerPath","innerPath","outer","inner","pathEquals","other","pathContains","ValidationPath","errorPrefix_","parts_","byteLength_","max","validationPathCheckValid","validationPath","validationPathToErrorString","VisibilityMonitor","hidden","visibilityChange","_this19","visible_","visible","RECONNECT_MIN_DELAY","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","_this20","nextPersistentConnectionId_","interruptReasons_","outstandingPuts_","outstandingGets_","outstandingPutCount_","outstandingGetCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","forceTokenRefresh_","invalidAuthTokenCount_","invalidAppCheckTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","getInstance","on","onVisible_","onOnline_","action","onResponse","curReqNum","r","sendRequest","initConnection_","outstandingGet","_path","q","_queryObject","sendGet_","currentHashFn","tag","queryId","_queryIdentifier","listens","_queryParams","isDefault","loadsAllData","listenSpec","hashFn","sendListen_","_this21","req","status","warnOnListenWarnings_","_this22","removeListen_","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","tryAppCheck","authMethod","requestData","cred","_this23","onAuthRevoked_","_this24","onAppCheckRevoked_","sendUnlisten_","queryObj","sendOnDisconnect_","response","putInternal","sendPut_","queued","_this25","errorReason","_this26","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","handleTimestamp_","sendConnectStats_","restoreState_","_this27","establishConnection_","scheduleConnect_","online","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage","onReady","onRealtimeDisconnect_","nextConnectionId_","canceled","connection","closeFn","sendRequestFn","_yield$Promise$all","_yield$Promise$all2","_this28","interrupt","delta","serverTimeOffset","listen","normalizedPathString","statusCode","explanation","notifyForInvalidToken","queries","clientName","reportStats","currentlyOnline","warnings","indexSpec","getIndex","indexPath","__EMPTY_NODE","NamedNode","node","Index","compare","oldNode","newNode","oldWrapped","newWrapped","MIN","KeyIndex","indexValue","KEY_INDEX","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","cmp","left","right","nodeStack_","LLRBNode","color","RED","SortedMap","EMPTY_NODE","count","inorderTraversal","reverseTraversal","min_","maxKey","copy","insert","fixUp_","isRed_","moveRedLeft_","removeMin_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","blackDepth","check_","MAX_NODE","LLRBEmptyNode","comparator_","root_","BLACK","rightParent","minKey","resultGenerator","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","__childrenNodeConstructor","nodeFromJSON","priorityHashText","priority","validatePriorityNode","priorityNode","isLeafNode","getPriority","LeafNode","value_","priorityNode_","newPriorityNode","childName","childNode","newChildNode","updatePriority","updateImmediateChild","front","updateChild","exportFormat","getValue","lazyHash_","toHash","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","equals","_defaultIndexMap","PriorityIndex","aPriority","bPriority","indexCmp","compareTo","PRIORITY_INDEX","LOG_2","Base12Num","num","current_","mask","bits_","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","namedNode","middle","root","base12","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","nextBitIsOne","buildFrom12Array","fallbackObject","IndexMap","indexes_","indexSet_","indexKey","sortedMap","indexDefinition","existingChildren","newIndex","sawIndexedValue","iter","getIterator","Wrap","getNext","isDefinedOn","getCompare","indexName","newIndexSet","newIndexes","indexedChildren","_this29","existingSnap","newChildren","ChildrenNode","children_","indexMap_","child","getImmediateChild","getChild","newIndexMap","removeFromIndexes","addToIndexes","newPriority","newImmediateChild","numKeys","allIntegerKeys","forEachChild","array","childHash","idx","resolveIndex_","predecessor","getPredecessorKey","getFirstChildName","getLastChildName","wrappedNode","getIteratorFrom","minPost","startPost","iterator","peek","getReverseIteratorFrom","maxPost","endPost","hasIndex","addIndex","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","Default","MAX","setPriorityMaxNode","json","jsonLeaf","childData","children","childrenHavePriority","hinzeJsonObj","childSet","sortedChildSet","setNodeFromJSON","PathIndex","indexPath_","_this30","snap","aChild","extractChild","bChild","valueNode","ValueIndex","VALUE_INDEX","changeValue","snapshotNode","changeChildAdded","changeChildRemoved","changeChildChanged","oldSnap","IndexedFilter","index_","newChild","affectedPath","optChangeAccumulator","isIndexed","oldChild","hasChild","trackChildChange","withIndex","newSnap","RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","startIsInclusive_","startAfterSet_","endIsInclusive_","endBeforeSet_","isWithinStart","getStartPost","isWithinEnd","getEndPost","matches","filtered","updateFullNode","hasStart","startName","getIndexStartName","makePost","getIndexStartValue","hasEnd","endName","getIndexEndName","getIndexEndValue","LimitedFilter","_this31","reverse_","withinEndPost","withinStartPost","compareRes","rangedFilter_","limit_","getLimit","isViewFromLeft","numChildren","getIndexedFilter","fullLimitUpdateChild_","hasNext","withinDirectionalStart","withinDirectionalEnd","getReverseIterator","childKey","childSnap","changeAccumulator","oldEventCache","newChildNamedNode","windowBoundary","getFirstChild","getLastChild","inRange","oldChildSnap","nextChild","getChildAfterChild","compareNext","newEventCache","QueryParams","startSet_","viewFrom_","indexStartValue_","startNameSet_","indexStartName_","endSet_","indexEndValue_","endNameSet_","indexEndName_","limitSet_","queryParamsToRestQueryStringParameters","queryParams","orderBy","qs","startParam","endParam","queryParamsGetQueryObject","viewFrom","ReadonlyRestClient","_this32","listens_","listenId","getListenId_","thisListen","queryStringParameters","restRequest_","_this33","_this34","_this35","xhr","XMLHttpRequest","responseText","SnapshotHolder","rootNode_","newSnapshotNode","newSparseSnapshotTree","sparseSnapshotTreeRemember","sparseSnapshotTree","clear","sparseSnapshotTreeForEachTree","prefixPath","tree","sparseSnapshotTreeForEachChild","OperationType","StatsListener","collection_","newStats","last_","stat","StatsReporter","collection","server_","statsListener_","reportStats_","reportedStats","haveStatsToReport","_this36","statsToReport_","newOperationSourceServerTaggedQuery","fromUser","fromServer","tagged","emptyChildrenSingleton","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","subtree","ListenComplete","LISTEN_COMPLETE","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","node_","fullyInitialized_","filtered_","isFullyInitialized","isCompleteForChild","EventGenerator","query_","eventGeneratorGenerateEventsForType","eventGenerator","events","changes","registrations","eventCache","filteredChanges","change","aWrapped","bWrapped","eventGeneratorCompareChanges","materializedChange","prevName","getPredecessorChildName","eventGeneratorMaterializeSingleChange","registration","respondsTo","createEvent","newViewCache","serverCache","viewCacheUpdateEventSnap","viewCache","eventSnap","viewCacheUpdateServerSnap","serverSnap","viewCacheGetCompleteEventSnap","getNode","viewCacheGetCompleteServerSnap","EmptyChildren","ImmutableTree","relativePath","predicate","childExistingPathAndValue","findRootMostMatchingPathAndValue","toSet","newTree","setTree","fold_","pathSoFar","accum","findOnPath_","pathToFollow","foreachOnPath_","currentRelativePath","foreach_","childPath","CompoundWrite","writeTree_","compoundWriteAddWrite","compoundWrite","rootmost","findRootMostValueAndPath","rootMostPath","newWriteTree","compoundWriteAddWrites","updates","newWrite","compoundWriteRemoveWrite","empty","compoundWriteHasCompleteWrite","compoundWriteGetCompleteNode","compoundWriteGetCompleteChildren","compoundWriteChildCompoundWrite","shadowingNode","compoundWriteIsEmpty","compoundWriteApply","applySubtreeWrite","writeTree","priorityWrite","writeTreeChildWrites","newWriteTreeRef","writeTreeGetWrite","writeId","allWrites","record","writeTreeRemoveWrite","findIndex","writeToRemove","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","writeTreeRecordContainsPath_","visibleWrites","writeTreeLayerTree_","writeTreeDefaultFilter_","lastWriteId","writeTreeResetTree_","writeRecord","writes","treeRoot","writePath","deepNode","writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","merge","subMerge","writeTreeRefCalcCompleteEventCache","writeTreeRef","writeTreeRefCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","writeTreeCalcCompleteEventChildren","writeTreeRefCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","writeTreeCalcEventCacheAfterServerOverwrite","writeTreeRefShadowingWrite","writeTreeShadowingWrite","writeTreeRefCalcIndexedSlice","completeServerData","toIterate","nodes","writeTreeCalcIndexedSlice","writeTreeRefCalcCompleteChild","existingServerCache","writeTreeCalcCompleteChild","writeTreeRefChild","ChildChangeAccumulator","changeMap","oldChange","oldType","NO_COMPLETE_CHILD_SOURCE","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","viewProcessorApplyOperation","viewProcessor","oldViewCache","operation","writesCache","completeCache","filterServerNode","accumulator","viewProcessorApplyUserOverwrite","isFiltered","viewProcessorApplyServerOverwrite","changedChildren","curViewCache","foreach","viewProcessorCacheHasChild","viewProcessorApplyUserMerge","viewProcessorApplyServerMerge","ackUserWrite","serverChildren","filtersNodes","viewProcessorRevertUserWrite","ackPath","isCompleteForPath","mergePath","serverCachePath","viewProcessorAckUserWrite","oldServerNode","viewProcessorGenerateEventCacheAfterServerEvent","viewProcessorListenComplete","getChanges","isLeafOrEmpty","oldCompleteSnap","viewProcessorMaybeAddValueEvent","changePath","oldEventSnap","completeEventChildren","completeNode","oldEventNode","updatedPriority","newEventChild","childChangePath","eventChildUpdate","changedSnap","newServerCache","oldServerSnap","serverFilter","newServerNode","getCompleteChild","viewProcessorApplyMerge","viewMergeTree","childMergeTree","isUnknownDeepMerge","referenceConstructor","View","initialViewCache","indexFilter","hasLimit","processor_","newViewProcessor","initialServerCache","initialEventCache","eventGenerator_","viewGetCompleteServerCache","view","cache","viewIsEmpty","eventRegistrations_","viewRemoveEventRegistration","eventRegistration","cancelError","cancelEvents","maybeEvent","createCancelEvent","remaining","existing","hasAnyCallback","viewApplyOperation","viewGenerateEventsForChanges_","eventRegistrations","moves","indexedValueChanged","eventGeneratorGenerateEventsForChanges","SyncPoint","views","syncPointIsEmpty","syncPoint","syncPointApplyOperation","optCompleteServerCache","_step4","_iterator5","syncPointGetView","serverCacheComplete","eventCacheComplete","syncPointAddEventRegistration","viewAddEventRegistration","initialChanges","viewGetInitialEvents","syncPointRemoveEventRegistration","removed","hadCompleteView","syncPointHasCompleteView","_step5","viewQueryId","_iterator6","_repo","syncPointGetQueryViews","_step6","_iterator7","syncPointGetCompleteServerCache","_step7","_iterator8","syncPointViewForQuery","syncPointGetCompleteView","syncPointViewExistsForQuery","_step8","_iterator9","syncTreeNextQueryTag_","SyncTree","listenProvider_","syncPointTree_","tagToQueryMap","queryToTagMap","syncTreeApplyUserOverwrite","syncTree","newData","writeTreeAddOverwrite","pendingWriteTree_","syncTreeApplyOperationToSyncPoints_","syncTreeAckUserWrite","needToReevaluate","syncTreeApplyServerOverwrite","syncTreeRemoveEventRegistration","skipListenerDedup","maybeSyncPoint","removedAndEvents","removingDefault","covered","findOnPath","parentSyncPoint","newViews","syncTreeCollectDistinctViewsForSubTree_","newQuery","syncTreeCreateListenerForView_","startListening","syncTreeQueryForListening_","syncTreeTagForQuery","defaultTag","stopListening","queryToRemove","tagToRemove","syncTreeMakeQueryKey_","syncTreeRemoveTags_","syncTreeApplyTaggedQueryOverwrite","queryKey","syncTreeQueryKeyForTag_","syncTreeParseQueryKey_","queryPath","syncTreeApplyTaggedOperation_","syncTreeAddEventRegistration","skipSetupListener","foundAncestorDefaultView","foreachOnPath","pathToSyncPoint","sp","foreachChild","childSyncPoint","viewAlreadyExists","syncTreeGetNextQueryTag_","syncTreeSetupListener_","syncTreeCalcCompleteEventCache","syncTreeApplyOperationHelper_","syncPointTree","syncTreeApplyOperationDescendantsHelper_","childOperation","operationForChild","childServerCache","childWritesCache","viewGetServerCache","syncTreeApplyTaggedListenComplete","syncTreeApplyListenComplete","toUpperCase","errorForServerCode","splitIndex","fold","maybeChildSyncPoint","childMap","childViews","removedQuery","removedQueryKey","removedQueryTag","queriesToStop","childQueries","queryToStop","ExistingValueProvider","DeferredValueProvider","syncTree_","path_","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","op","unused","existingNode","resolveDeferredValueTree","resolveDeferredValue","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","Tree","parent","childCount","treeSubTree","pathObj","treeGetValue","treeSetValue","treeUpdateParents","treeHasChildren","treeForEachChild","treeForEachDescendant","includeSelf","childrenFirst","treeGetPath","childEmpty","treeIsEmpty","childExists","treeUpdateChild","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidKey","isValidPathString","validateFirebaseData","hasDotValue","hasActualChild","last","validationPathPop","validatePathString","argumentName","errorPrefixFxn","validateUrl","parsedUrl","isValidRootPathString","EventQueue","eventQueueQueueEvents","eventQueue","eventDataList","currList","getPath","eventLists_","eventQueueRaiseEventsAtPath","eventQueueRaiseQueuedEventsMatchingPredicate","eventPath","eventQueueRaiseEventsForChangedPath","changedPath","recursionDepth_","sentAll","eventList","eventListRaise","eventFn","getEventRunner","INTERRUPT_REASON","Repo","forceRestClient_","appCheckProvider_","eventQueue_","transactionQueueTree_","repoStart","repo","authOverride","search","isMerge","repoOnDataUpdate","repoOnConnectStatus","persistentConnection_","connectStatus","repoUpdateInfo","repoOnServerInfoUpdate","addTokenChangeListener","refreshAuthToken","refreshAppCheckToken","statsReporter_","creatorFunction","statsManagerGetOrCreateReporter","infoData_","infoSyncTree_","infoEvents","serverSyncTree_","repoServerTime","repoGenerateServerValues","dataUpdateCount","interceptServerDataCallback_","taggedChildren","raw","changeTree","fromObject","syncTreeApplyTaggedQueryMerge","taggedSnap","syncTreeApplyServerMerge","repoRerunTransactions","repoLog","resolvedOnDisconnectTree","resolved","repoAbortTransactions","repoRunOnDisconnectEvents","updateSnapshot","repoGetNextWriteId","nextWriteId_","repoRemoveEventCallbackForQuery","repoInterrupt","repoGetLatestState","excludeSets","repoSendReadyTransactions","repoPruneCompletedTransactionsBelowNode","queue","repoBuildTransactionQueue","allRun","every","repoSendTransactionQueue","setsToIgnore","txn","currentWriteId","latestState","snapToSend","latestHash","retryCount","currentOutputSnapshotRaw","dataToSend","pathToSend","currentOutputSnapshotResolved","unwatcher","_loop3","abortReason","rootMostTransactionNode","repoGetAncestorTransactionNode","abortTransaction","currentNode","currentInputSnapshot","newDataNode","oldWriteId","newNodeResolved","applyLocally","_loop4","repoRerunTransactionQueue","transactionNode","transactionQueue","repoAggregateTransactionQueuesForNode","order","nodeQueue","to","treeForEachAncestor","repoAbortTransactionsOnNode","lastSent","parseRepoInfo","dataURL","parseDatabaseURL","scheme","subdomain","colonInd","slashInd","questionMarkInd","pathStringDecoded","piece","decodeURIComponent","decodePath","queryString","results","_step9","segment","kv","_iterator10","decodeQuery","hostWithoutPort","dotInd","PUSH_CHARS","DataEvent","lastPushTime","lastRandChars","snapshot","ref","exportVal","CancelEvent","CallbackContext","snapshotCallback","cancelCallback","expDataSnapshot","previousChildName","hasCancelCallback","userCallback","QueryImpl","_orderByCalled","ReferenceImpl","sameRepo","samePath","sameQueryIdentifier","pathToUrlEncodedString","parentPath","DataSnapshot","_node","_index","childRef","_this37","_checkNotDeleted","_root","ValueEventRegistration","callbackContext","getEventType","_this38","onCancel","onValue","ChildEventRegistration","eventToCheck","_this39","cancelCallbackOrListenOptions","onlyOnce","onceCallback","dataSnapshot","repoAddEventCallbackForQuery","syncPointSetReferenceConstructor","syncTreeSetReferenceConstructor","repos","useRestClient","repoManagerApplyEmulatorSettings","tokenProvider","repoManagerDatabaseFromApp","authProvider","dbUrl","databaseURL","isEmulator","dbEmulatorHost","authTokenProvider","OWNER","appRepos","repoManagerCreateRepo","Database","_repoInternal","_instanceStarted","_rootInternal","repoManagerDeleteRepo","apiName","getDatabase","emulator","connectDatabaseEmulator","mockUserToken","simpleListen","echo","onEcho","setMultipleInstances"],"sourceRoot":""}